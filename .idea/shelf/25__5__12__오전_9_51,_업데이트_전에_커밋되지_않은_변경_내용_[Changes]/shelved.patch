Index: RISK_ESTIMATION/GAT__TCN.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"nbformat\": 4,\r\n  \"nbformat_minor\": 0,\r\n  \"metadata\": {\r\n    \"colab\": {\r\n      \"provenance\": []\r\n    },\r\n    \"kernelspec\": {\r\n      \"name\": \"python3\",\r\n      \"display_name\": \"Python 3\"\r\n    },\r\n    \"language_info\": {\r\n      \"name\": \"python\"\r\n    }\r\n  },\r\n  \"cells\": [\r\n    {\r\n      \"cell_type\": \"markdown\",\r\n      \"source\": [\r\n        \"# 실행 준비\"\r\n      ],\r\n      \"metadata\": {\r\n        \"id\": \"uSGwEK8Rl8nu\"\r\n      }\r\n    },\r\n    {\r\n      \"cell_type\": \"code\",\r\n      \"execution_count\": null,\r\n      \"metadata\": {\r\n        \"id\": \"poEZQtkOdvnF\"\r\n      },\r\n      \"outputs\": [],\r\n      \"source\": [\r\n        \"#from google.colab import drive\\n\",\r\n        \"#drive.mount('/content/drive')\"\r\n      ]\r\n    },\r\n    {\r\n      \"cell_type\": \"code\",\r\n      \"source\": [\r\n        \"import pandas as pd\"\r\n      ],\r\n      \"metadata\": {\r\n        \"id\": \"DSgYsaX5g5s9\"\r\n      },\r\n      \"execution_count\": 2,\r\n      \"outputs\": []\r\n    },\r\n    {\r\n      \"cell_type\": \"code\",\r\n      \"source\": [\r\n        \"file_path = '/content/daily_all.csv'\\n\",\r\n        \"df = pd.read_csv(file_path, engine='pyarrow')\"\r\n      ],\r\n      \"metadata\": {\r\n        \"id\": \"-vyn0-Vqghaa\"\r\n      },\r\n      \"execution_count\": 3,\r\n      \"outputs\": []\r\n    },\r\n    {\r\n      \"cell_type\": \"code\",\r\n      \"source\": [\r\n        \"df = pd.read_csv(\\\"daily_all.csv\\\")\"\r\n      ],\r\n      \"metadata\": {\r\n        \"id\": \"i2zflSUtie6r\"\r\n      },\r\n      \"execution_count\": 4,\r\n      \"outputs\": []\r\n    },\r\n    {\r\n      \"cell_type\": \"code\",\r\n      \"source\": [\r\n        \"df\"\r\n      ],\r\n      \"metadata\": {\r\n        \"colab\": {\r\n          \"base_uri\": \"https://localhost:8080/\",\r\n          \"height\": 617\r\n        },\r\n        \"id\": \"24-DKqOjhCyk\",\r\n        \"outputId\": \"74670461-cca7-4e0e-dc2b-c5523b9a55c9\"\r\n      },\r\n      \"execution_count\": 5,\r\n      \"outputs\": [\r\n        {\r\n          \"output_type\": \"execute_result\",\r\n          \"data\": {\r\n            \"text/plain\": [\r\n              \"        datadate  cshtrd_TSLA  prccd_TSLA  cshtrd_NVDA  prccd_NVDA  \\\\\\n\",\r\n              \"0     2014-03-27      9493537      207.32     13450390       17.79   \\n\",\r\n              \"1     2014-03-28      9666658      212.37      9970437       17.90   \\n\",\r\n              \"2     2014-03-31      8367389      208.45      6835058       17.91   \\n\",\r\n              \"3     2014-04-01      7353574      216.97     16406760       18.65   \\n\",\r\n              \"4     2014-04-02     10738310      230.29      5998666       18.53   \\n\",\r\n              \"...          ...          ...         ...          ...         ...   \\n\",\r\n              \"2759  2025-03-17    111192700      238.01    254465500      119.53   \\n\",\r\n              \"2760  2025-03-18    110243300      225.31    297843800      115.43   \\n\",\r\n              \"2761  2025-03-19    111022100      235.86    271117700      117.52   \\n\",\r\n              \"2762  2025-03-20     98542130      236.26    247168100      118.53   \\n\",\r\n              \"2763  2025-03-21    131675100      248.71    265810400      117.70   \\n\",\r\n              \"\\n\",\r\n              \"      cshtrd_MSFT  prccd_MSFT  cshtrd_GOOG  prccd_GOOG  cshtrd_AAPL  ...  \\\\\\n\",\r\n              \"0        35215570       39.36        13052      558.46      7904344  ...   \\n\",\r\n              \"1        43414400       40.30        41003      559.99      7100433  ...   \\n\",\r\n              \"2        46840570       40.99        10772      556.97      5969709  ...   \\n\",\r\n              \"3        32604260       41.42         7932      567.16      7152806  ...   \\n\",\r\n              \"4        28614590       41.35       146697      567.00      6400542  ...   \\n\",\r\n              \"...           ...         ...          ...         ...          ...  ...   \\n\",\r\n              \"2759     22456210      388.70     17812050      166.57     48031700  ...   \\n\",\r\n              \"2760     18691680      383.52     24576840      162.67     42380710  ...   \\n\",\r\n              \"2761     18960900      387.82     24921470      166.28     54327250  ...   \\n\",\r\n              \"2762     18451340      386.84     19714890      165.05     48781470  ...   \\n\",\r\n              \"2763     38785710      391.26     29843810      166.25     93876130  ...   \\n\",\r\n              \"\\n\",\r\n              \"      sent_AMZN  sent_AAPL  sent_CRM  sent_DIS  sent_GOOG  sent_INTC  \\\\\\n\",\r\n              \"0           NaN        NaN       NaN       NaN        NaN        NaN   \\n\",\r\n              \"1           NaN        NaN       NaN       NaN        NaN        NaN   \\n\",\r\n              \"2           NaN        NaN  0.166667       NaN        NaN        NaN   \\n\",\r\n              \"3           NaN        NaN  0.333333       NaN        NaN        NaN   \\n\",\r\n              \"4           NaN        NaN -0.166667       NaN        NaN        NaN   \\n\",\r\n              \"...         ...        ...       ...       ...        ...        ...   \\n\",\r\n              \"2759        NaN        NaN       NaN       NaN        NaN        NaN   \\n\",\r\n              \"2760        NaN        NaN       NaN       NaN        NaN        NaN   \\n\",\r\n              \"2761        NaN        NaN       NaN       NaN        NaN        NaN   \\n\",\r\n              \"2762        NaN        NaN       NaN       NaN        NaN        NaN   \\n\",\r\n              \"2763        NaN        NaN       NaN       NaN        NaN        NaN   \\n\",\r\n              \"\\n\",\r\n              \"      sent_MSFT  sent_NVDA  sent_TSLA  sent_XOM  \\n\",\r\n              \"0           NaN        NaN        NaN       NaN  \\n\",\r\n              \"1           NaN        NaN        NaN       NaN  \\n\",\r\n              \"2           NaN        NaN        NaN       NaN  \\n\",\r\n              \"3           NaN        0.0        NaN       NaN  \\n\",\r\n              \"4           NaN        NaN        NaN       NaN  \\n\",\r\n              \"...         ...        ...        ...       ...  \\n\",\r\n              \"2759        NaN        NaN        NaN       NaN  \\n\",\r\n              \"2760        NaN        NaN        NaN       NaN  \\n\",\r\n              \"2761        NaN        NaN        NaN       NaN  \\n\",\r\n              \"2762        NaN        NaN        NaN       NaN  \\n\",\r\n              \"2763        NaN        NaN        NaN       NaN  \\n\",\r\n              \"\\n\",\r\n              \"[2764 rows x 31 columns]\"\r\n            ],\r\n            \"text/html\": [\r\n              \"\\n\",\r\n              \"  <div id=\\\"df-f9415af3-a9bc-40a5-92d2-d23338b380a1\\\" class=\\\"colab-df-container\\\">\\n\",\r\n              \"    <div>\\n\",\r\n              \"<style scoped>\\n\",\r\n              \"    .dataframe tbody tr th:only-of-type {\\n\",\r\n              \"        vertical-align: middle;\\n\",\r\n              \"    }\\n\",\r\n              \"\\n\",\r\n              \"    .dataframe tbody tr th {\\n\",\r\n              \"        vertical-align: top;\\n\",\r\n              \"    }\\n\",\r\n              \"\\n\",\r\n              \"    .dataframe thead th {\\n\",\r\n              \"        text-align: right;\\n\",\r\n              \"    }\\n\",\r\n              \"</style>\\n\",\r\n              \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\r\n              \"  <thead>\\n\",\r\n              \"    <tr style=\\\"text-align: right;\\\">\\n\",\r\n              \"      <th></th>\\n\",\r\n              \"      <th>datadate</th>\\n\",\r\n              \"      <th>cshtrd_TSLA</th>\\n\",\r\n              \"      <th>prccd_TSLA</th>\\n\",\r\n              \"      <th>cshtrd_NVDA</th>\\n\",\r\n              \"      <th>prccd_NVDA</th>\\n\",\r\n              \"      <th>cshtrd_MSFT</th>\\n\",\r\n              \"      <th>prccd_MSFT</th>\\n\",\r\n              \"      <th>cshtrd_GOOG</th>\\n\",\r\n              \"      <th>prccd_GOOG</th>\\n\",\r\n              \"      <th>cshtrd_AAPL</th>\\n\",\r\n              \"      <th>...</th>\\n\",\r\n              \"      <th>sent_AMZN</th>\\n\",\r\n              \"      <th>sent_AAPL</th>\\n\",\r\n              \"      <th>sent_CRM</th>\\n\",\r\n              \"      <th>sent_DIS</th>\\n\",\r\n              \"      <th>sent_GOOG</th>\\n\",\r\n              \"      <th>sent_INTC</th>\\n\",\r\n              \"      <th>sent_MSFT</th>\\n\",\r\n              \"      <th>sent_NVDA</th>\\n\",\r\n              \"      <th>sent_TSLA</th>\\n\",\r\n              \"      <th>sent_XOM</th>\\n\",\r\n              \"    </tr>\\n\",\r\n              \"  </thead>\\n\",\r\n              \"  <tbody>\\n\",\r\n              \"    <tr>\\n\",\r\n              \"      <th>0</th>\\n\",\r\n              \"      <td>2014-03-27</td>\\n\",\r\n              \"      <td>9493537</td>\\n\",\r\n              \"      <td>207.32</td>\\n\",\r\n              \"      <td>13450390</td>\\n\",\r\n              \"      <td>17.79</td>\\n\",\r\n              \"      <td>35215570</td>\\n\",\r\n              \"      <td>39.36</td>\\n\",\r\n              \"      <td>13052</td>\\n\",\r\n              \"      <td>558.46</td>\\n\",\r\n              \"      <td>7904344</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"    </tr>\\n\",\r\n              \"    <tr>\\n\",\r\n              \"      <th>1</th>\\n\",\r\n              \"      <td>2014-03-28</td>\\n\",\r\n              \"      <td>9666658</td>\\n\",\r\n              \"      <td>212.37</td>\\n\",\r\n              \"      <td>9970437</td>\\n\",\r\n              \"      <td>17.90</td>\\n\",\r\n              \"      <td>43414400</td>\\n\",\r\n              \"      <td>40.30</td>\\n\",\r\n              \"      <td>41003</td>\\n\",\r\n              \"      <td>559.99</td>\\n\",\r\n              \"      <td>7100433</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"    </tr>\\n\",\r\n              \"    <tr>\\n\",\r\n              \"      <th>2</th>\\n\",\r\n              \"      <td>2014-03-31</td>\\n\",\r\n              \"      <td>8367389</td>\\n\",\r\n              \"      <td>208.45</td>\\n\",\r\n              \"      <td>6835058</td>\\n\",\r\n              \"      <td>17.91</td>\\n\",\r\n              \"      <td>46840570</td>\\n\",\r\n              \"      <td>40.99</td>\\n\",\r\n              \"      <td>10772</td>\\n\",\r\n              \"      <td>556.97</td>\\n\",\r\n              \"      <td>5969709</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>0.166667</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"    </tr>\\n\",\r\n              \"    <tr>\\n\",\r\n              \"      <th>3</th>\\n\",\r\n              \"      <td>2014-04-01</td>\\n\",\r\n              \"      <td>7353574</td>\\n\",\r\n              \"      <td>216.97</td>\\n\",\r\n              \"      <td>16406760</td>\\n\",\r\n              \"      <td>18.65</td>\\n\",\r\n              \"      <td>32604260</td>\\n\",\r\n              \"      <td>41.42</td>\\n\",\r\n              \"      <td>7932</td>\\n\",\r\n              \"      <td>567.16</td>\\n\",\r\n              \"      <td>7152806</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>0.333333</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>0.0</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"    </tr>\\n\",\r\n              \"    <tr>\\n\",\r\n              \"      <th>4</th>\\n\",\r\n              \"      <td>2014-04-02</td>\\n\",\r\n              \"      <td>10738310</td>\\n\",\r\n              \"      <td>230.29</td>\\n\",\r\n              \"      <td>5998666</td>\\n\",\r\n              \"      <td>18.53</td>\\n\",\r\n              \"      <td>28614590</td>\\n\",\r\n              \"      <td>41.35</td>\\n\",\r\n              \"      <td>146697</td>\\n\",\r\n              \"      <td>567.00</td>\\n\",\r\n              \"      <td>6400542</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>-0.166667</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"    </tr>\\n\",\r\n              \"    <tr>\\n\",\r\n              \"      <th>...</th>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"    </tr>\\n\",\r\n              \"    <tr>\\n\",\r\n              \"      <th>2759</th>\\n\",\r\n              \"      <td>2025-03-17</td>\\n\",\r\n              \"      <td>111192700</td>\\n\",\r\n              \"      <td>238.01</td>\\n\",\r\n              \"      <td>254465500</td>\\n\",\r\n              \"      <td>119.53</td>\\n\",\r\n              \"      <td>22456210</td>\\n\",\r\n              \"      <td>388.70</td>\\n\",\r\n              \"      <td>17812050</td>\\n\",\r\n              \"      <td>166.57</td>\\n\",\r\n              \"      <td>48031700</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"    </tr>\\n\",\r\n              \"    <tr>\\n\",\r\n              \"      <th>2760</th>\\n\",\r\n              \"      <td>2025-03-18</td>\\n\",\r\n              \"      <td>110243300</td>\\n\",\r\n              \"      <td>225.31</td>\\n\",\r\n              \"      <td>297843800</td>\\n\",\r\n              \"      <td>115.43</td>\\n\",\r\n              \"      <td>18691680</td>\\n\",\r\n              \"      <td>383.52</td>\\n\",\r\n              \"      <td>24576840</td>\\n\",\r\n              \"      <td>162.67</td>\\n\",\r\n              \"      <td>42380710</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"    </tr>\\n\",\r\n              \"    <tr>\\n\",\r\n              \"      <th>2761</th>\\n\",\r\n              \"      <td>2025-03-19</td>\\n\",\r\n              \"      <td>111022100</td>\\n\",\r\n              \"      <td>235.86</td>\\n\",\r\n              \"      <td>271117700</td>\\n\",\r\n              \"      <td>117.52</td>\\n\",\r\n              \"      <td>18960900</td>\\n\",\r\n              \"      <td>387.82</td>\\n\",\r\n              \"      <td>24921470</td>\\n\",\r\n              \"      <td>166.28</td>\\n\",\r\n              \"      <td>54327250</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"    </tr>\\n\",\r\n              \"    <tr>\\n\",\r\n              \"      <th>2762</th>\\n\",\r\n              \"      <td>2025-03-20</td>\\n\",\r\n              \"      <td>98542130</td>\\n\",\r\n              \"      <td>236.26</td>\\n\",\r\n              \"      <td>247168100</td>\\n\",\r\n              \"      <td>118.53</td>\\n\",\r\n              \"      <td>18451340</td>\\n\",\r\n              \"      <td>386.84</td>\\n\",\r\n              \"      <td>19714890</td>\\n\",\r\n              \"      <td>165.05</td>\\n\",\r\n              \"      <td>48781470</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"    </tr>\\n\",\r\n              \"    <tr>\\n\",\r\n              \"      <th>2763</th>\\n\",\r\n              \"      <td>2025-03-21</td>\\n\",\r\n              \"      <td>131675100</td>\\n\",\r\n              \"      <td>248.71</td>\\n\",\r\n              \"      <td>265810400</td>\\n\",\r\n              \"      <td>117.70</td>\\n\",\r\n              \"      <td>38785710</td>\\n\",\r\n              \"      <td>391.26</td>\\n\",\r\n              \"      <td>29843810</td>\\n\",\r\n              \"      <td>166.25</td>\\n\",\r\n              \"      <td>93876130</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"      <td>NaN</td>\\n\",\r\n              \"    </tr>\\n\",\r\n              \"  </tbody>\\n\",\r\n              \"</table>\\n\",\r\n              \"<p>2764 rows × 31 columns</p>\\n\",\r\n              \"</div>\\n\",\r\n              \"    <div class=\\\"colab-df-buttons\\\">\\n\",\r\n              \"\\n\",\r\n              \"  <div class=\\\"colab-df-container\\\">\\n\",\r\n              \"    <button class=\\\"colab-df-convert\\\" onclick=\\\"convertToInteractive('df-f9415af3-a9bc-40a5-92d2-d23338b380a1')\\\"\\n\",\r\n              \"            title=\\\"Convert this dataframe to an interactive table.\\\"\\n\",\r\n              \"            style=\\\"display:none;\\\">\\n\",\r\n              \"\\n\",\r\n              \"  <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"24px\\\" viewBox=\\\"0 -960 960 960\\\">\\n\",\r\n              \"    <path d=\\\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\\\"/>\\n\",\r\n              \"  </svg>\\n\",\r\n              \"    </button>\\n\",\r\n              \"\\n\",\r\n              \"  <style>\\n\",\r\n              \"    .colab-df-container {\\n\",\r\n              \"      display:flex;\\n\",\r\n              \"      gap: 12px;\\n\",\r\n              \"    }\\n\",\r\n              \"\\n\",\r\n              \"    .colab-df-convert {\\n\",\r\n              \"      background-color: #E8F0FE;\\n\",\r\n              \"      border: none;\\n\",\r\n              \"      border-radius: 50%;\\n\",\r\n              \"      cursor: pointer;\\n\",\r\n              \"      display: none;\\n\",\r\n              \"      fill: #1967D2;\\n\",\r\n              \"      height: 32px;\\n\",\r\n              \"      padding: 0 0 0 0;\\n\",\r\n              \"      width: 32px;\\n\",\r\n              \"    }\\n\",\r\n              \"\\n\",\r\n              \"    .colab-df-convert:hover {\\n\",\r\n              \"      background-color: #E2EBFA;\\n\",\r\n              \"      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\\n\",\r\n              \"      fill: #174EA6;\\n\",\r\n              \"    }\\n\",\r\n              \"\\n\",\r\n              \"    .colab-df-buttons div {\\n\",\r\n              \"      margin-bottom: 4px;\\n\",\r\n              \"    }\\n\",\r\n              \"\\n\",\r\n              \"    [theme=dark] .colab-df-convert {\\n\",\r\n              \"      background-color: #3B4455;\\n\",\r\n              \"      fill: #D2E3FC;\\n\",\r\n              \"    }\\n\",\r\n              \"\\n\",\r\n              \"    [theme=dark] .colab-df-convert:hover {\\n\",\r\n              \"      background-color: #434B5C;\\n\",\r\n              \"      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\\n\",\r\n              \"      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\\n\",\r\n              \"      fill: #FFFFFF;\\n\",\r\n              \"    }\\n\",\r\n              \"  </style>\\n\",\r\n              \"\\n\",\r\n              \"    <script>\\n\",\r\n              \"      const buttonEl =\\n\",\r\n              \"        document.querySelector('#df-f9415af3-a9bc-40a5-92d2-d23338b380a1 button.colab-df-convert');\\n\",\r\n              \"      buttonEl.style.display =\\n\",\r\n              \"        google.colab.kernel.accessAllowed ? 'block' : 'none';\\n\",\r\n              \"\\n\",\r\n              \"      async function convertToInteractive(key) {\\n\",\r\n              \"        const element = document.querySelector('#df-f9415af3-a9bc-40a5-92d2-d23338b380a1');\\n\",\r\n              \"        const dataTable =\\n\",\r\n              \"          await google.colab.kernel.invokeFunction('convertToInteractive',\\n\",\r\n              \"                                                    [key], {});\\n\",\r\n              \"        if (!dataTable) return;\\n\",\r\n              \"\\n\",\r\n              \"        const docLinkHtml = 'Like what you see? Visit the ' +\\n\",\r\n              \"          '<a target=\\\"_blank\\\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\\n\",\r\n              \"          + ' to learn more about interactive tables.';\\n\",\r\n              \"        element.innerHTML = '';\\n\",\r\n              \"        dataTable['output_type'] = 'display_data';\\n\",\r\n              \"        await google.colab.output.renderOutput(dataTable, element);\\n\",\r\n              \"        const docLink = document.createElement('div');\\n\",\r\n              \"        docLink.innerHTML = docLinkHtml;\\n\",\r\n              \"        element.appendChild(docLink);\\n\",\r\n              \"      }\\n\",\r\n              \"    </script>\\n\",\r\n              \"  </div>\\n\",\r\n              \"\\n\",\r\n              \"\\n\",\r\n              \"    <div id=\\\"df-f369e2c4-36d9-43b2-9a86-10edbde5a057\\\">\\n\",\r\n              \"      <button class=\\\"colab-df-quickchart\\\" onclick=\\\"quickchart('df-f369e2c4-36d9-43b2-9a86-10edbde5a057')\\\"\\n\",\r\n              \"                title=\\\"Suggest charts\\\"\\n\",\r\n              \"                style=\\\"display:none;\\\">\\n\",\r\n              \"\\n\",\r\n              \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"24px\\\"viewBox=\\\"0 0 24 24\\\"\\n\",\r\n              \"     width=\\\"24px\\\">\\n\",\r\n              \"    <g>\\n\",\r\n              \"        <path d=\\\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\\\"/>\\n\",\r\n              \"    </g>\\n\",\r\n              \"</svg>\\n\",\r\n              \"      </button>\\n\",\r\n              \"\\n\",\r\n              \"<style>\\n\",\r\n              \"  .colab-df-quickchart {\\n\",\r\n              \"      --bg-color: #E8F0FE;\\n\",\r\n              \"      --fill-color: #1967D2;\\n\",\r\n              \"      --hover-bg-color: #E2EBFA;\\n\",\r\n              \"      --hover-fill-color: #174EA6;\\n\",\r\n              \"      --disabled-fill-color: #AAA;\\n\",\r\n              \"      --disabled-bg-color: #DDD;\\n\",\r\n              \"  }\\n\",\r\n              \"\\n\",\r\n              \"  [theme=dark] .colab-df-quickchart {\\n\",\r\n              \"      --bg-color: #3B4455;\\n\",\r\n              \"      --fill-color: #D2E3FC;\\n\",\r\n              \"      --hover-bg-color: #434B5C;\\n\",\r\n              \"      --hover-fill-color: #FFFFFF;\\n\",\r\n              \"      --disabled-bg-color: #3B4455;\\n\",\r\n              \"      --disabled-fill-color: #666;\\n\",\r\n              \"  }\\n\",\r\n              \"\\n\",\r\n              \"  .colab-df-quickchart {\\n\",\r\n              \"    background-color: var(--bg-color);\\n\",\r\n              \"    border: none;\\n\",\r\n              \"    border-radius: 50%;\\n\",\r\n              \"    cursor: pointer;\\n\",\r\n              \"    display: none;\\n\",\r\n              \"    fill: var(--fill-color);\\n\",\r\n              \"    height: 32px;\\n\",\r\n              \"    padding: 0;\\n\",\r\n              \"    width: 32px;\\n\",\r\n              \"  }\\n\",\r\n              \"\\n\",\r\n              \"  .colab-df-quickchart:hover {\\n\",\r\n              \"    background-color: var(--hover-bg-color);\\n\",\r\n              \"    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\\n\",\r\n              \"    fill: var(--button-hover-fill-color);\\n\",\r\n              \"  }\\n\",\r\n              \"\\n\",\r\n              \"  .colab-df-quickchart-complete:disabled,\\n\",\r\n              \"  .colab-df-quickchart-complete:disabled:hover {\\n\",\r\n              \"    background-color: var(--disabled-bg-color);\\n\",\r\n              \"    fill: var(--disabled-fill-color);\\n\",\r\n              \"    box-shadow: none;\\n\",\r\n              \"  }\\n\",\r\n              \"\\n\",\r\n              \"  .colab-df-spinner {\\n\",\r\n              \"    border: 2px solid var(--fill-color);\\n\",\r\n              \"    border-color: transparent;\\n\",\r\n              \"    border-bottom-color: var(--fill-color);\\n\",\r\n              \"    animation:\\n\",\r\n              \"      spin 1s steps(1) infinite;\\n\",\r\n              \"  }\\n\",\r\n              \"\\n\",\r\n              \"  @keyframes spin {\\n\",\r\n              \"    0% {\\n\",\r\n              \"      border-color: transparent;\\n\",\r\n              \"      border-bottom-color: var(--fill-color);\\n\",\r\n              \"      border-left-color: var(--fill-color);\\n\",\r\n              \"    }\\n\",\r\n              \"    20% {\\n\",\r\n              \"      border-color: transparent;\\n\",\r\n              \"      border-left-color: var(--fill-color);\\n\",\r\n              \"      border-top-color: var(--fill-color);\\n\",\r\n              \"    }\\n\",\r\n              \"    30% {\\n\",\r\n              \"      border-color: transparent;\\n\",\r\n              \"      border-left-color: var(--fill-color);\\n\",\r\n              \"      border-top-color: var(--fill-color);\\n\",\r\n              \"      border-right-color: var(--fill-color);\\n\",\r\n              \"    }\\n\",\r\n              \"    40% {\\n\",\r\n              \"      border-color: transparent;\\n\",\r\n              \"      border-right-color: var(--fill-color);\\n\",\r\n              \"      border-top-color: var(--fill-color);\\n\",\r\n              \"    }\\n\",\r\n              \"    60% {\\n\",\r\n              \"      border-color: transparent;\\n\",\r\n              \"      border-right-color: var(--fill-color);\\n\",\r\n              \"    }\\n\",\r\n              \"    80% {\\n\",\r\n              \"      border-color: transparent;\\n\",\r\n              \"      border-right-color: var(--fill-color);\\n\",\r\n              \"      border-bottom-color: var(--fill-color);\\n\",\r\n              \"    }\\n\",\r\n              \"    90% {\\n\",\r\n              \"      border-color: transparent;\\n\",\r\n              \"      border-bottom-color: var(--fill-color);\\n\",\r\n              \"    }\\n\",\r\n              \"  }\\n\",\r\n              \"</style>\\n\",\r\n              \"\\n\",\r\n              \"      <script>\\n\",\r\n              \"        async function quickchart(key) {\\n\",\r\n              \"          const quickchartButtonEl =\\n\",\r\n              \"            document.querySelector('#' + key + ' button');\\n\",\r\n              \"          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\\n\",\r\n              \"          quickchartButtonEl.classList.add('colab-df-spinner');\\n\",\r\n              \"          try {\\n\",\r\n              \"            const charts = await google.colab.kernel.invokeFunction(\\n\",\r\n              \"                'suggestCharts', [key], {});\\n\",\r\n              \"          } catch (error) {\\n\",\r\n              \"            console.error('Error during call to suggestCharts:', error);\\n\",\r\n              \"          }\\n\",\r\n              \"          quickchartButtonEl.classList.remove('colab-df-spinner');\\n\",\r\n              \"          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\\n\",\r\n              \"        }\\n\",\r\n              \"        (() => {\\n\",\r\n              \"          let quickchartButtonEl =\\n\",\r\n              \"            document.querySelector('#df-f369e2c4-36d9-43b2-9a86-10edbde5a057 button');\\n\",\r\n              \"          quickchartButtonEl.style.display =\\n\",\r\n              \"            google.colab.kernel.accessAllowed ? 'block' : 'none';\\n\",\r\n              \"        })();\\n\",\r\n              \"      </script>\\n\",\r\n              \"    </div>\\n\",\r\n              \"\\n\",\r\n              \"  <div id=\\\"id_3cc3d105-8330-4527-83e6-f6ba5e409bad\\\">\\n\",\r\n              \"    <style>\\n\",\r\n              \"      .colab-df-generate {\\n\",\r\n              \"        background-color: #E8F0FE;\\n\",\r\n              \"        border: none;\\n\",\r\n              \"        border-radius: 50%;\\n\",\r\n              \"        cursor: pointer;\\n\",\r\n              \"        display: none;\\n\",\r\n              \"        fill: #1967D2;\\n\",\r\n              \"        height: 32px;\\n\",\r\n              \"        padding: 0 0 0 0;\\n\",\r\n              \"        width: 32px;\\n\",\r\n              \"      }\\n\",\r\n              \"\\n\",\r\n              \"      .colab-df-generate:hover {\\n\",\r\n              \"        background-color: #E2EBFA;\\n\",\r\n              \"        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\\n\",\r\n              \"        fill: #174EA6;\\n\",\r\n              \"      }\\n\",\r\n              \"\\n\",\r\n              \"      [theme=dark] .colab-df-generate {\\n\",\r\n              \"        background-color: #3B4455;\\n\",\r\n              \"        fill: #D2E3FC;\\n\",\r\n              \"      }\\n\",\r\n              \"\\n\",\r\n              \"      [theme=dark] .colab-df-generate:hover {\\n\",\r\n              \"        background-color: #434B5C;\\n\",\r\n              \"        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\\n\",\r\n              \"        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\\n\",\r\n              \"        fill: #FFFFFF;\\n\",\r\n              \"      }\\n\",\r\n              \"    </style>\\n\",\r\n              \"    <button class=\\\"colab-df-generate\\\" onclick=\\\"generateWithVariable('df')\\\"\\n\",\r\n              \"            title=\\\"Generate code using this dataframe.\\\"\\n\",\r\n              \"            style=\\\"display:none;\\\">\\n\",\r\n              \"\\n\",\r\n              \"  <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"24px\\\"viewBox=\\\"0 0 24 24\\\"\\n\",\r\n              \"       width=\\\"24px\\\">\\n\",\r\n              \"    <path d=\\\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\\\"/>\\n\",\r\n              \"  </svg>\\n\",\r\n              \"    </button>\\n\",\r\n              \"    <script>\\n\",\r\n              \"      (() => {\\n\",\r\n              \"      const buttonEl =\\n\",\r\n              \"        document.querySelector('#id_3cc3d105-8330-4527-83e6-f6ba5e409bad button.colab-df-generate');\\n\",\r\n              \"      buttonEl.style.display =\\n\",\r\n              \"        google.colab.kernel.accessAllowed ? 'block' : 'none';\\n\",\r\n              \"\\n\",\r\n              \"      buttonEl.onclick = () => {\\n\",\r\n              \"        google.colab.notebook.generateWithVariable('df');\\n\",\r\n              \"      }\\n\",\r\n              \"      })();\\n\",\r\n              \"    </script>\\n\",\r\n              \"  </div>\\n\",\r\n              \"\\n\",\r\n              \"    </div>\\n\",\r\n              \"  </div>\\n\"\r\n            ],\r\n            \"application/vnd.google.colaboratory.intrinsic+json\": {\r\n              \"type\": \"dataframe\",\r\n              \"variable_name\": \"df\"\r\n            }\r\n          },\r\n          \"metadata\": {},\r\n          \"execution_count\": 5\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"cell_type\": \"markdown\",\r\n      \"source\": [\r\n        \"# 데이터셋 로드\"\r\n      ],\r\n      \"metadata\": {\r\n        \"id\": \"ng-ZikeSl_o9\"\r\n      }\r\n    },\r\n    {\r\n      \"cell_type\": \"markdown\",\r\n      \"source\": [\r\n        \"- 피처 선택\"\r\n      ],\r\n      \"metadata\": {\r\n        \"id\": \"ssYDGmrLq16F\"\r\n      }\r\n    },\r\n    {\r\n      \"cell_type\": \"code\",\r\n      \"source\": [\r\n        \"company_name = \\\"AMZN\\\"  # 예측할 회사 선택\\n\",\r\n        \"\\n\",\r\n        \"# 데이터 선택: 종가는 모든 회사에 대해, 거래량과 감정분석은 예측할 회사만\\n\",\r\n        \"data = df[[f'prccd_{company}' for company in ['TSLA', 'NVDA', 'MSFT', 'GOOG', 'AAPL', 'DIS', 'XOM', 'CRM', 'INTC', 'AMZN']] +\\n\",\r\n        \"          [f'cshtrd_{company_name}', f'sent_{company_name}', 'datadate']].copy()\\n\",\r\n        \"data.set_index('datadate', inplace=True)\\n\",\r\n        \"\\n\",\r\n        \"# 예측 회사의 상승/하락 결과 (1: 상승, 0: 하락) : GAT에서 사용 X\\n\",\r\n        \"# data.loc[:, 'y'] = (df[f'prccd_{company_name}'] > df[f'prccd_{company_name}'].shift(1)).astype(int)\\n\",\r\n        \"# data = data[1:] # 첫 번째 행은 상승/하락 정보를 알 수 없으므로 제거\\n\",\r\n        \"\\n\",\r\n        \"# 감정분석 결측값을 0으로 채움\\n\",\r\n        \"data.fillna(0, inplace=True)  # 기존 sent에는 NaN이 너무 많음; 임베딩도 NaN으로 출력됨\\n\",\r\n        \"\\n\",\r\n        \"# 결과 출력\\n\",\r\n        \"data\"\r\n      ],\r\n      \"metadata\": {\r\n        \"colab\": {\r\n          \"base_uri\": \"https://localhost:8080/\",\r\n          \"height\": 455\r\n        },\r\n        \"id\": \"NvkAcJ2yd59z\",\r\n        \"outputId\": \"b103f9e4-61c5-4589-86a2-7eb065d836f4\"\r\n      },\r\n      \"execution_count\": 6,\r\n      \"outputs\": [\r\n        {\r\n          \"output_type\": \"execute_result\",\r\n          \"data\": {\r\n            \"text/plain\": [\r\n              \"            prccd_TSLA  prccd_NVDA  prccd_MSFT  prccd_GOOG  prccd_AAPL  \\\\\\n\",\r\n              \"datadate                                                                 \\n\",\r\n              \"2014-03-27      207.32       17.79       39.36      558.46      537.46   \\n\",\r\n              \"2014-03-28      212.37       17.90       40.30      559.99      536.86   \\n\",\r\n              \"2014-03-31      208.45       17.91       40.99      556.97      536.74   \\n\",\r\n              \"2014-04-01      216.97       18.65       41.42      567.16      541.65   \\n\",\r\n              \"2014-04-02      230.29       18.53       41.35      567.00      542.55   \\n\",\r\n              \"...                ...         ...         ...         ...         ...   \\n\",\r\n              \"2025-03-17      238.01      119.53      388.70      166.57      214.00   \\n\",\r\n              \"2025-03-18      225.31      115.43      383.52      162.67      212.69   \\n\",\r\n              \"2025-03-19      235.86      117.52      387.82      166.28      215.24   \\n\",\r\n              \"2025-03-20      236.26      118.53      386.84      165.05      214.10   \\n\",\r\n              \"2025-03-21      248.71      117.70      391.26      166.25      218.27   \\n\",\r\n              \"\\n\",\r\n              \"            prccd_DIS  prccd_XOM  prccd_CRM  prccd_INTC  prccd_AMZN  \\\\\\n\",\r\n              \"datadate                                                              \\n\",\r\n              \"2014-03-27      78.48      96.24      55.97      25.310     338.470   \\n\",\r\n              \"2014-03-28      78.99      97.70      55.75      25.620     338.290   \\n\",\r\n              \"2014-03-31      80.07      97.68      57.09      25.814     336.365   \\n\",\r\n              \"2014-04-01      81.57      97.73      58.80      25.990     342.990   \\n\",\r\n              \"2014-04-02      81.67      97.95      58.15      25.890     341.960   \\n\",\r\n              \"...               ...        ...        ...         ...         ...   \\n\",\r\n              \"2025-03-17      99.36     113.76     280.75      25.690     195.740   \\n\",\r\n              \"2025-03-18      99.35     113.64     278.73      25.920     192.820   \\n\",\r\n              \"2025-03-19     100.29     115.41     279.39      24.120     195.540   \\n\",\r\n              \"2025-03-20      98.86     115.90     279.03      23.960     194.950   \\n\",\r\n              \"2025-03-21      99.46     115.50     280.62      24.260     196.210   \\n\",\r\n              \"\\n\",\r\n              \"            cshtrd_AMZN  sent_AMZN  \\n\",\r\n              \"datadate                            \\n\",\r\n              \"2014-03-27      5761711        0.0  \\n\",\r\n              \"2014-03-28      3976769        0.0  \\n\",\r\n              \"2014-03-31      4276550        0.0  \\n\",\r\n              \"2014-04-01      3599779        0.0  \\n\",\r\n              \"2014-04-02      4465927        0.0  \\n\",\r\n              \"...                 ...        ...  \\n\",\r\n              \"2025-03-17     47256830        0.0  \\n\",\r\n              \"2025-03-18     40331650        0.0  \\n\",\r\n              \"2025-03-19     39283570        0.0  \\n\",\r\n              \"2025-03-20     38840620        0.0  \\n\",\r\n              \"2025-03-21     59988490        0.0  \\n\",\r\n              \"\\n\",\r\n              \"[2764 rows x 12 columns]\"\r\n            ],\r\n            \"text/html\": [\r\n              \"\\n\",\r\n              \"  <div id=\\\"df-aa455aaf-4a55-42c6-aaeb-06da7f759ac9\\\" class=\\\"colab-df-container\\\">\\n\",\r\n              \"    <div>\\n\",\r\n              \"<style scoped>\\n\",\r\n              \"    .dataframe tbody tr th:only-of-type {\\n\",\r\n              \"        vertical-align: middle;\\n\",\r\n              \"    }\\n\",\r\n              \"\\n\",\r\n              \"    .dataframe tbody tr th {\\n\",\r\n              \"        vertical-align: top;\\n\",\r\n              \"    }\\n\",\r\n              \"\\n\",\r\n              \"    .dataframe thead th {\\n\",\r\n              \"        text-align: right;\\n\",\r\n              \"    }\\n\",\r\n              \"</style>\\n\",\r\n              \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\r\n              \"  <thead>\\n\",\r\n              \"    <tr style=\\\"text-align: right;\\\">\\n\",\r\n              \"      <th></th>\\n\",\r\n              \"      <th>prccd_TSLA</th>\\n\",\r\n              \"      <th>prccd_NVDA</th>\\n\",\r\n              \"      <th>prccd_MSFT</th>\\n\",\r\n              \"      <th>prccd_GOOG</th>\\n\",\r\n              \"      <th>prccd_AAPL</th>\\n\",\r\n              \"      <th>prccd_DIS</th>\\n\",\r\n              \"      <th>prccd_XOM</th>\\n\",\r\n              \"      <th>prccd_CRM</th>\\n\",\r\n              \"      <th>prccd_INTC</th>\\n\",\r\n              \"      <th>prccd_AMZN</th>\\n\",\r\n              \"      <th>cshtrd_AMZN</th>\\n\",\r\n              \"      <th>sent_AMZN</th>\\n\",\r\n              \"    </tr>\\n\",\r\n              \"    <tr>\\n\",\r\n              \"      <th>datadate</th>\\n\",\r\n              \"      <th></th>\\n\",\r\n              \"      <th></th>\\n\",\r\n              \"      <th></th>\\n\",\r\n              \"      <th></th>\\n\",\r\n              \"      <th></th>\\n\",\r\n              \"      <th></th>\\n\",\r\n              \"      <th></th>\\n\",\r\n              \"      <th></th>\\n\",\r\n              \"      <th></th>\\n\",\r\n              \"      <th></th>\\n\",\r\n              \"      <th></th>\\n\",\r\n              \"      <th></th>\\n\",\r\n              \"    </tr>\\n\",\r\n              \"  </thead>\\n\",\r\n              \"  <tbody>\\n\",\r\n              \"    <tr>\\n\",\r\n              \"      <th>2014-03-27</th>\\n\",\r\n              \"      <td>207.32</td>\\n\",\r\n              \"      <td>17.79</td>\\n\",\r\n              \"      <td>39.36</td>\\n\",\r\n              \"      <td>558.46</td>\\n\",\r\n              \"      <td>537.46</td>\\n\",\r\n              \"      <td>78.48</td>\\n\",\r\n              \"      <td>96.24</td>\\n\",\r\n              \"      <td>55.97</td>\\n\",\r\n              \"      <td>25.310</td>\\n\",\r\n              \"      <td>338.470</td>\\n\",\r\n              \"      <td>5761711</td>\\n\",\r\n              \"      <td>0.0</td>\\n\",\r\n              \"    </tr>\\n\",\r\n              \"    <tr>\\n\",\r\n              \"      <th>2014-03-28</th>\\n\",\r\n              \"      <td>212.37</td>\\n\",\r\n              \"      <td>17.90</td>\\n\",\r\n              \"      <td>40.30</td>\\n\",\r\n              \"      <td>559.99</td>\\n\",\r\n              \"      <td>536.86</td>\\n\",\r\n              \"      <td>78.99</td>\\n\",\r\n              \"      <td>97.70</td>\\n\",\r\n              \"      <td>55.75</td>\\n\",\r\n              \"      <td>25.620</td>\\n\",\r\n              \"      <td>338.290</td>\\n\",\r\n              \"      <td>3976769</td>\\n\",\r\n              \"      <td>0.0</td>\\n\",\r\n              \"    </tr>\\n\",\r\n              \"    <tr>\\n\",\r\n              \"      <th>2014-03-31</th>\\n\",\r\n              \"      <td>208.45</td>\\n\",\r\n              \"      <td>17.91</td>\\n\",\r\n              \"      <td>40.99</td>\\n\",\r\n              \"      <td>556.97</td>\\n\",\r\n              \"      <td>536.74</td>\\n\",\r\n              \"      <td>80.07</td>\\n\",\r\n              \"      <td>97.68</td>\\n\",\r\n              \"      <td>57.09</td>\\n\",\r\n              \"      <td>25.814</td>\\n\",\r\n              \"      <td>336.365</td>\\n\",\r\n              \"      <td>4276550</td>\\n\",\r\n              \"      <td>0.0</td>\\n\",\r\n              \"    </tr>\\n\",\r\n              \"    <tr>\\n\",\r\n              \"      <th>2014-04-01</th>\\n\",\r\n              \"      <td>216.97</td>\\n\",\r\n              \"      <td>18.65</td>\\n\",\r\n              \"      <td>41.42</td>\\n\",\r\n              \"      <td>567.16</td>\\n\",\r\n              \"      <td>541.65</td>\\n\",\r\n              \"      <td>81.57</td>\\n\",\r\n              \"      <td>97.73</td>\\n\",\r\n              \"      <td>58.80</td>\\n\",\r\n              \"      <td>25.990</td>\\n\",\r\n              \"      <td>342.990</td>\\n\",\r\n              \"      <td>3599779</td>\\n\",\r\n              \"      <td>0.0</td>\\n\",\r\n              \"    </tr>\\n\",\r\n              \"    <tr>\\n\",\r\n              \"      <th>2014-04-02</th>\\n\",\r\n              \"      <td>230.29</td>\\n\",\r\n              \"      <td>18.53</td>\\n\",\r\n              \"      <td>41.35</td>\\n\",\r\n              \"      <td>567.00</td>\\n\",\r\n              \"      <td>542.55</td>\\n\",\r\n              \"      <td>81.67</td>\\n\",\r\n              \"      <td>97.95</td>\\n\",\r\n              \"      <td>58.15</td>\\n\",\r\n              \"      <td>25.890</td>\\n\",\r\n              \"      <td>341.960</td>\\n\",\r\n              \"      <td>4465927</td>\\n\",\r\n              \"      <td>0.0</td>\\n\",\r\n              \"    </tr>\\n\",\r\n              \"    <tr>\\n\",\r\n              \"      <th>...</th>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"      <td>...</td>\\n\",\r\n              \"    </tr>\\n\",\r\n              \"    <tr>\\n\",\r\n              \"      <th>2025-03-17</th>\\n\",\r\n              \"      <td>238.01</td>\\n\",\r\n              \"      <td>119.53</td>\\n\",\r\n              \"      <td>388.70</td>\\n\",\r\n              \"      <td>166.57</td>\\n\",\r\n              \"      <td>214.00</td>\\n\",\r\n              \"      <td>99.36</td>\\n\",\r\n              \"      <td>113.76</td>\\n\",\r\n              \"      <td>280.75</td>\\n\",\r\n              \"      <td>25.690</td>\\n\",\r\n              \"      <td>195.740</td>\\n\",\r\n              \"      <td>47256830</td>\\n\",\r\n              \"      <td>0.0</td>\\n\",\r\n              \"    </tr>\\n\",\r\n              \"    <tr>\\n\",\r\n              \"      <th>2025-03-18</th>\\n\",\r\n              \"      <td>225.31</td>\\n\",\r\n              \"      <td>115.43</td>\\n\",\r\n              \"      <td>383.52</td>\\n\",\r\n              \"      <td>162.67</td>\\n\",\r\n              \"      <td>212.69</td>\\n\",\r\n              \"      <td>99.35</td>\\n\",\r\n              \"      <td>113.64</td>\\n\",\r\n              \"      <td>278.73</td>\\n\",\r\n              \"      <td>25.920</td>\\n\",\r\n              \"      <td>192.820</td>\\n\",\r\n              \"      <td>40331650</td>\\n\",\r\n              \"      <td>0.0</td>\\n\",\r\n              \"    </tr>\\n\",\r\n              \"    <tr>\\n\",\r\n              \"      <th>2025-03-19</th>\\n\",\r\n              \"      <td>235.86</td>\\n\",\r\n              \"      <td>117.52</td>\\n\",\r\n              \"      <td>387.82</td>\\n\",\r\n              \"      <td>166.28</td>\\n\",\r\n              \"      <td>215.24</td>\\n\",\r\n              \"      <td>100.29</td>\\n\",\r\n              \"      <td>115.41</td>\\n\",\r\n              \"      <td>279.39</td>\\n\",\r\n              \"      <td>24.120</td>\\n\",\r\n              \"      <td>195.540</td>\\n\",\r\n              \"      <td>39283570</td>\\n\",\r\n              \"      <td>0.0</td>\\n\",\r\n              \"    </tr>\\n\",\r\n              \"    <tr>\\n\",\r\n              \"      <th>2025-03-20</th>\\n\",\r\n              \"      <td>236.26</td>\\n\",\r\n              \"      <td>118.53</td>\\n\",\r\n              \"      <td>386.84</td>\\n\",\r\n              \"      <td>165.05</td>\\n\",\r\n              \"      <td>214.10</td>\\n\",\r\n              \"      <td>98.86</td>\\n\",\r\n              \"      <td>115.90</td>\\n\",\r\n              \"      <td>279.03</td>\\n\",\r\n              \"      <td>23.960</td>\\n\",\r\n              \"      <td>194.950</td>\\n\",\r\n              \"      <td>38840620</td>\\n\",\r\n              \"      <td>0.0</td>\\n\",\r\n              \"    </tr>\\n\",\r\n              \"    <tr>\\n\",\r\n              \"      <th>2025-03-21</th>\\n\",\r\n              \"      <td>248.71</td>\\n\",\r\n              \"      <td>117.70</td>\\n\",\r\n              \"      <td>391.26</td>\\n\",\r\n              \"      <td>166.25</td>\\n\",\r\n              \"      <td>218.27</td>\\n\",\r\n              \"      <td>99.46</td>\\n\",\r\n              \"      <td>115.50</td>\\n\",\r\n              \"      <td>280.62</td>\\n\",\r\n              \"      <td>24.260</td>\\n\",\r\n              \"      <td>196.210</td>\\n\",\r\n              \"      <td>59988490</td>\\n\",\r\n              \"      <td>0.0</td>\\n\",\r\n              \"    </tr>\\n\",\r\n              \"  </tbody>\\n\",\r\n              \"</table>\\n\",\r\n              \"<p>2764 rows × 12 columns</p>\\n\",\r\n              \"</div>\\n\",\r\n              \"    <div class=\\\"colab-df-buttons\\\">\\n\",\r\n              \"\\n\",\r\n              \"  <div class=\\\"colab-df-container\\\">\\n\",\r\n              \"    <button class=\\\"colab-df-convert\\\" onclick=\\\"convertToInteractive('df-aa455aaf-4a55-42c6-aaeb-06da7f759ac9')\\\"\\n\",\r\n              \"            title=\\\"Convert this dataframe to an interactive table.\\\"\\n\",\r\n              \"            style=\\\"display:none;\\\">\\n\",\r\n              \"\\n\",\r\n              \"  <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"24px\\\" viewBox=\\\"0 -960 960 960\\\">\\n\",\r\n              \"    <path d=\\\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\\\"/>\\n\",\r\n              \"  </svg>\\n\",\r\n              \"    </button>\\n\",\r\n              \"\\n\",\r\n              \"  <style>\\n\",\r\n              \"    .colab-df-container {\\n\",\r\n              \"      display:flex;\\n\",\r\n              \"      gap: 12px;\\n\",\r\n              \"    }\\n\",\r\n              \"\\n\",\r\n              \"    .colab-df-convert {\\n\",\r\n              \"      background-color: #E8F0FE;\\n\",\r\n              \"      border: none;\\n\",\r\n              \"      border-radius: 50%;\\n\",\r\n              \"      cursor: pointer;\\n\",\r\n              \"      display: none;\\n\",\r\n              \"      fill: #1967D2;\\n\",\r\n              \"      height: 32px;\\n\",\r\n              \"      padding: 0 0 0 0;\\n\",\r\n              \"      width: 32px;\\n\",\r\n              \"    }\\n\",\r\n              \"\\n\",\r\n              \"    .colab-df-convert:hover {\\n\",\r\n              \"      background-color: #E2EBFA;\\n\",\r\n              \"      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\\n\",\r\n              \"      fill: #174EA6;\\n\",\r\n              \"    }\\n\",\r\n              \"\\n\",\r\n              \"    .colab-df-buttons div {\\n\",\r\n              \"      margin-bottom: 4px;\\n\",\r\n              \"    }\\n\",\r\n              \"\\n\",\r\n              \"    [theme=dark] .colab-df-convert {\\n\",\r\n              \"      background-color: #3B4455;\\n\",\r\n              \"      fill: #D2E3FC;\\n\",\r\n              \"    }\\n\",\r\n              \"\\n\",\r\n              \"    [theme=dark] .colab-df-convert:hover {\\n\",\r\n              \"      background-color: #434B5C;\\n\",\r\n              \"      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\\n\",\r\n              \"      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\\n\",\r\n              \"      fill: #FFFFFF;\\n\",\r\n              \"    }\\n\",\r\n              \"  </style>\\n\",\r\n              \"\\n\",\r\n              \"    <script>\\n\",\r\n              \"      const buttonEl =\\n\",\r\n              \"        document.querySelector('#df-aa455aaf-4a55-42c6-aaeb-06da7f759ac9 button.colab-df-convert');\\n\",\r\n              \"      buttonEl.style.display =\\n\",\r\n              \"        google.colab.kernel.accessAllowed ? 'block' : 'none';\\n\",\r\n              \"\\n\",\r\n              \"      async function convertToInteractive(key) {\\n\",\r\n              \"        const element = document.querySelector('#df-aa455aaf-4a55-42c6-aaeb-06da7f759ac9');\\n\",\r\n              \"        const dataTable =\\n\",\r\n              \"          await google.colab.kernel.invokeFunction('convertToInteractive',\\n\",\r\n              \"                                                    [key], {});\\n\",\r\n              \"        if (!dataTable) return;\\n\",\r\n              \"\\n\",\r\n              \"        const docLinkHtml = 'Like what you see? Visit the ' +\\n\",\r\n              \"          '<a target=\\\"_blank\\\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\\n\",\r\n              \"          + ' to learn more about interactive tables.';\\n\",\r\n              \"        element.innerHTML = '';\\n\",\r\n              \"        dataTable['output_type'] = 'display_data';\\n\",\r\n              \"        await google.colab.output.renderOutput(dataTable, element);\\n\",\r\n              \"        const docLink = document.createElement('div');\\n\",\r\n              \"        docLink.innerHTML = docLinkHtml;\\n\",\r\n              \"        element.appendChild(docLink);\\n\",\r\n              \"      }\\n\",\r\n              \"    </script>\\n\",\r\n              \"  </div>\\n\",\r\n              \"\\n\",\r\n              \"\\n\",\r\n              \"    <div id=\\\"df-0172de52-16bd-4712-94a9-f5b657175c00\\\">\\n\",\r\n              \"      <button class=\\\"colab-df-quickchart\\\" onclick=\\\"quickchart('df-0172de52-16bd-4712-94a9-f5b657175c00')\\\"\\n\",\r\n              \"                title=\\\"Suggest charts\\\"\\n\",\r\n              \"                style=\\\"display:none;\\\">\\n\",\r\n              \"\\n\",\r\n              \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"24px\\\"viewBox=\\\"0 0 24 24\\\"\\n\",\r\n              \"     width=\\\"24px\\\">\\n\",\r\n              \"    <g>\\n\",\r\n              \"        <path d=\\\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\\\"/>\\n\",\r\n              \"    </g>\\n\",\r\n              \"</svg>\\n\",\r\n              \"      </button>\\n\",\r\n              \"\\n\",\r\n              \"<style>\\n\",\r\n              \"  .colab-df-quickchart {\\n\",\r\n              \"      --bg-color: #E8F0FE;\\n\",\r\n              \"      --fill-color: #1967D2;\\n\",\r\n              \"      --hover-bg-color: #E2EBFA;\\n\",\r\n              \"      --hover-fill-color: #174EA6;\\n\",\r\n              \"      --disabled-fill-color: #AAA;\\n\",\r\n              \"      --disabled-bg-color: #DDD;\\n\",\r\n              \"  }\\n\",\r\n              \"\\n\",\r\n              \"  [theme=dark] .colab-df-quickchart {\\n\",\r\n              \"      --bg-color: #3B4455;\\n\",\r\n              \"      --fill-color: #D2E3FC;\\n\",\r\n              \"      --hover-bg-color: #434B5C;\\n\",\r\n              \"      --hover-fill-color: #FFFFFF;\\n\",\r\n              \"      --disabled-bg-color: #3B4455;\\n\",\r\n              \"      --disabled-fill-color: #666;\\n\",\r\n              \"  }\\n\",\r\n              \"\\n\",\r\n              \"  .colab-df-quickchart {\\n\",\r\n              \"    background-color: var(--bg-color);\\n\",\r\n              \"    border: none;\\n\",\r\n              \"    border-radius: 50%;\\n\",\r\n              \"    cursor: pointer;\\n\",\r\n              \"    display: none;\\n\",\r\n              \"    fill: var(--fill-color);\\n\",\r\n              \"    height: 32px;\\n\",\r\n              \"    padding: 0;\\n\",\r\n              \"    width: 32px;\\n\",\r\n              \"  }\\n\",\r\n              \"\\n\",\r\n              \"  .colab-df-quickchart:hover {\\n\",\r\n              \"    background-color: var(--hover-bg-color);\\n\",\r\n              \"    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\\n\",\r\n              \"    fill: var(--button-hover-fill-color);\\n\",\r\n              \"  }\\n\",\r\n              \"\\n\",\r\n              \"  .colab-df-quickchart-complete:disabled,\\n\",\r\n              \"  .colab-df-quickchart-complete:disabled:hover {\\n\",\r\n              \"    background-color: var(--disabled-bg-color);\\n\",\r\n              \"    fill: var(--disabled-fill-color);\\n\",\r\n              \"    box-shadow: none;\\n\",\r\n              \"  }\\n\",\r\n              \"\\n\",\r\n              \"  .colab-df-spinner {\\n\",\r\n              \"    border: 2px solid var(--fill-color);\\n\",\r\n              \"    border-color: transparent;\\n\",\r\n              \"    border-bottom-color: var(--fill-color);\\n\",\r\n              \"    animation:\\n\",\r\n              \"      spin 1s steps(1) infinite;\\n\",\r\n              \"  }\\n\",\r\n              \"\\n\",\r\n              \"  @keyframes spin {\\n\",\r\n              \"    0% {\\n\",\r\n              \"      border-color: transparent;\\n\",\r\n              \"      border-bottom-color: var(--fill-color);\\n\",\r\n              \"      border-left-color: var(--fill-color);\\n\",\r\n              \"    }\\n\",\r\n              \"    20% {\\n\",\r\n              \"      border-color: transparent;\\n\",\r\n              \"      border-left-color: var(--fill-color);\\n\",\r\n              \"      border-top-color: var(--fill-color);\\n\",\r\n              \"    }\\n\",\r\n              \"    30% {\\n\",\r\n              \"      border-color: transparent;\\n\",\r\n              \"      border-left-color: var(--fill-color);\\n\",\r\n              \"      border-top-color: var(--fill-color);\\n\",\r\n              \"      border-right-color: var(--fill-color);\\n\",\r\n              \"    }\\n\",\r\n              \"    40% {\\n\",\r\n              \"      border-color: transparent;\\n\",\r\n              \"      border-right-color: var(--fill-color);\\n\",\r\n              \"      border-top-color: var(--fill-color);\\n\",\r\n              \"    }\\n\",\r\n              \"    60% {\\n\",\r\n              \"      border-color: transparent;\\n\",\r\n              \"      border-right-color: var(--fill-color);\\n\",\r\n              \"    }\\n\",\r\n              \"    80% {\\n\",\r\n              \"      border-color: transparent;\\n\",\r\n              \"      border-right-color: var(--fill-color);\\n\",\r\n              \"      border-bottom-color: var(--fill-color);\\n\",\r\n              \"    }\\n\",\r\n              \"    90% {\\n\",\r\n              \"      border-color: transparent;\\n\",\r\n              \"      border-bottom-color: var(--fill-color);\\n\",\r\n              \"    }\\n\",\r\n              \"  }\\n\",\r\n              \"</style>\\n\",\r\n              \"\\n\",\r\n              \"      <script>\\n\",\r\n              \"        async function quickchart(key) {\\n\",\r\n              \"          const quickchartButtonEl =\\n\",\r\n              \"            document.querySelector('#' + key + ' button');\\n\",\r\n              \"          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\\n\",\r\n              \"          quickchartButtonEl.classList.add('colab-df-spinner');\\n\",\r\n              \"          try {\\n\",\r\n              \"            const charts = await google.colab.kernel.invokeFunction(\\n\",\r\n              \"                'suggestCharts', [key], {});\\n\",\r\n              \"          } catch (error) {\\n\",\r\n              \"            console.error('Error during call to suggestCharts:', error);\\n\",\r\n              \"          }\\n\",\r\n              \"          quickchartButtonEl.classList.remove('colab-df-spinner');\\n\",\r\n              \"          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\\n\",\r\n              \"        }\\n\",\r\n              \"        (() => {\\n\",\r\n              \"          let quickchartButtonEl =\\n\",\r\n              \"            document.querySelector('#df-0172de52-16bd-4712-94a9-f5b657175c00 button');\\n\",\r\n              \"          quickchartButtonEl.style.display =\\n\",\r\n              \"            google.colab.kernel.accessAllowed ? 'block' : 'none';\\n\",\r\n              \"        })();\\n\",\r\n              \"      </script>\\n\",\r\n              \"    </div>\\n\",\r\n              \"\\n\",\r\n              \"  <div id=\\\"id_68b40e53-06a4-4ddd-bce3-dfedca850499\\\">\\n\",\r\n              \"    <style>\\n\",\r\n              \"      .colab-df-generate {\\n\",\r\n              \"        background-color: #E8F0FE;\\n\",\r\n              \"        border: none;\\n\",\r\n              \"        border-radius: 50%;\\n\",\r\n              \"        cursor: pointer;\\n\",\r\n              \"        display: none;\\n\",\r\n              \"        fill: #1967D2;\\n\",\r\n              \"        height: 32px;\\n\",\r\n              \"        padding: 0 0 0 0;\\n\",\r\n              \"        width: 32px;\\n\",\r\n              \"      }\\n\",\r\n              \"\\n\",\r\n              \"      .colab-df-generate:hover {\\n\",\r\n              \"        background-color: #E2EBFA;\\n\",\r\n              \"        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\\n\",\r\n              \"        fill: #174EA6;\\n\",\r\n              \"      }\\n\",\r\n              \"\\n\",\r\n              \"      [theme=dark] .colab-df-generate {\\n\",\r\n              \"        background-color: #3B4455;\\n\",\r\n              \"        fill: #D2E3FC;\\n\",\r\n              \"      }\\n\",\r\n              \"\\n\",\r\n              \"      [theme=dark] .colab-df-generate:hover {\\n\",\r\n              \"        background-color: #434B5C;\\n\",\r\n              \"        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\\n\",\r\n              \"        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\\n\",\r\n              \"        fill: #FFFFFF;\\n\",\r\n              \"      }\\n\",\r\n              \"    </style>\\n\",\r\n              \"    <button class=\\\"colab-df-generate\\\" onclick=\\\"generateWithVariable('data')\\\"\\n\",\r\n              \"            title=\\\"Generate code using this dataframe.\\\"\\n\",\r\n              \"            style=\\\"display:none;\\\">\\n\",\r\n              \"\\n\",\r\n              \"  <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"24px\\\"viewBox=\\\"0 0 24 24\\\"\\n\",\r\n              \"       width=\\\"24px\\\">\\n\",\r\n              \"    <path d=\\\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\\\"/>\\n\",\r\n              \"  </svg>\\n\",\r\n              \"    </button>\\n\",\r\n              \"    <script>\\n\",\r\n              \"      (() => {\\n\",\r\n              \"      const buttonEl =\\n\",\r\n              \"        document.querySelector('#id_68b40e53-06a4-4ddd-bce3-dfedca850499 button.colab-df-generate');\\n\",\r\n              \"      buttonEl.style.display =\\n\",\r\n              \"        google.colab.kernel.accessAllowed ? 'block' : 'none';\\n\",\r\n              \"\\n\",\r\n              \"      buttonEl.onclick = () => {\\n\",\r\n              \"        google.colab.notebook.generateWithVariable('data');\\n\",\r\n              \"      }\\n\",\r\n              \"      })();\\n\",\r\n              \"    </script>\\n\",\r\n              \"  </div>\\n\",\r\n              \"\\n\",\r\n              \"    </div>\\n\",\r\n              \"  </div>\\n\"\r\n            ],\r\n            \"application/vnd.google.colaboratory.intrinsic+json\": {\r\n              \"type\": \"dataframe\",\r\n              \"variable_name\": \"data\",\r\n              \"summary\": \"{\\n  \\\"name\\\": \\\"data\\\",\\n  \\\"rows\\\": 2764,\\n  \\\"fields\\\": [\\n    {\\n      \\\"column\\\": \\\"datadate\\\",\\n      \\\"properties\\\": {\\n        \\\"dtype\\\": \\\"object\\\",\\n        \\\"num_unique_values\\\": 2764,\\n        \\\"samples\\\": [\\n          \\\"2022-02-16\\\",\\n          \\\"2019-01-25\\\",\\n          \\\"2019-09-26\\\"\\n        ],\\n        \\\"semantic_type\\\": \\\"\\\",\\n        \\\"description\\\": \\\"\\\"\\n      }\\n    },\\n    {\\n      \\\"column\\\": \\\"prccd_TSLA\\\",\\n      \\\"properties\\\": {\\n        \\\"dtype\\\": \\\"number\\\",\\n        \\\"std\\\": 278.23144861343263,\\n        \\\"min\\\": 108.1,\\n        \\\"max\\\": 2238.75,\\n        \\\"num_unique_values\\\": 2656,\\n        \\\"samples\\\": [\\n          348.05,\\n          245.26,\\n          424.23\\n        ],\\n        \\\"semantic_type\\\": \\\"\\\",\\n        \\\"description\\\": \\\"\\\"\\n      }\\n    },\\n    {\\n      \\\"column\\\": \\\"prccd_NVDA\\\",\\n      \\\"properties\\\": {\\n        \\\"dtype\\\": \\\"number\\\",\\n        \\\"std\\\": 203.0253020561452,\\n        \\\"min\\\": 16.785,\\n        \\\"max\\\": 1224.4,\\n        \\\"num_unique_values\\\": 2609,\\n        \\\"samples\\\": [\\n          418.62,\\n          272.47,\\n          21.06\\n        ],\\n        \\\"semantic_type\\\": \\\"\\\",\\n        \\\"description\\\": \\\"\\\"\\n      }\\n    },\\n    {\\n      \\\"column\\\": \\\"prccd_MSFT\\\",\\n      \\\"properties\\\": {\\n        \\\"dtype\\\": \\\"number\\\",\\n        \\\"std\\\": 127.02823369325104,\\n        \\\"min\\\": 39.06,\\n        \\\"max\\\": 467.56,\\n        \\\"num_unique_values\\\": 2568,\\n        \\\"samples\\\": [\\n          411.46,\\n          95.82,\\n          138.4\\n        ],\\n        \\\"semantic_type\\\": \\\"\\\",\\n        \\\"description\\\": \\\"\\\"\\n      }\\n    },\\n    {\\n      \\\"column\\\": \\\"prccd_GOOG\\\",\\n      \\\"properties\\\": {\\n        \\\"dtype\\\": \\\"number\\\",\\n        \\\"std\\\": 762.4237845252198,\\n        \\\"min\\\": 83.49,\\n        \\\"max\\\": 3014.18,\\n        \\\"num_unique_values\\\": 2718,\\n        \\\"samples\\\": [\\n          108.21,\\n          700.56,\\n          1299.19\\n        ],\\n        \\\"semantic_type\\\": \\\"\\\",\\n        \\\"description\\\": \\\"\\\"\\n      }\\n    },\\n    {\\n      \\\"column\\\": \\\"prccd_AAPL\\\",\\n      \\\"properties\\\": {\\n        \\\"dtype\\\": \\\"number\\\",\\n        \\\"std\\\": 81.0907297819937,\\n        \\\"min\\\": 90.28,\\n        \\\"max\\\": 647.35,\\n        \\\"num_unique_values\\\": 2532,\\n        \\\"samples\\\": [\\n          173.31,\\n          150.82,\\n          109.25\\n        ],\\n        \\\"semantic_type\\\": \\\"\\\",\\n        \\\"description\\\": \\\"\\\"\\n      }\\n    },\\n    {\\n      \\\"column\\\": \\\"prccd_DIS\\\",\\n      \\\"properties\\\": {\\n        \\\"dtype\\\": \\\"number\\\",\\n        \\\"std\\\": 25.677768944728097,\\n        \\\"min\\\": 77.01,\\n        \\\"max\\\": 201.91,\\n        \\\"num_unique_values\\\": 2197,\\n        \\\"samples\\\": [\\n          94.02,\\n          101.72,\\n          106.59\\n        ],\\n        \\\"semantic_type\\\": \\\"\\\",\\n        \\\"description\\\": \\\"\\\"\\n      }\\n    },\\n    {\\n      \\\"column\\\": \\\"prccd_XOM\\\",\\n      \\\"properties\\\": {\\n        \\\"dtype\\\": \\\"number\\\",\\n        \\\"std\\\": 20.535404346961304,\\n        \\\"min\\\": 31.45,\\n        \\\"max\\\": 125.37,\\n        \\\"num_unique_values\\\": 2204,\\n        \\\"samples\\\": [\\n          75.74,\\n          83.65,\\n          112.93\\n        ],\\n        \\\"semantic_type\\\": \\\"\\\",\\n        \\\"description\\\": \\\"\\\"\\n      }\\n    },\\n    {\\n      \\\"column\\\": \\\"prccd_CRM\\\",\\n      \\\"properties\\\": {\\n        \\\"dtype\\\": \\\"number\\\",\\n        \\\"std\\\": 77.59967101861768,\\n        \\\"min\\\": 49.13,\\n        \\\"max\\\": 367.87,\\n        \\\"num_unique_values\\\": 2566,\\n        \\\"samples\\\": [\\n          141.76,\\n          183.8,\\n          152.74\\n        ],\\n        \\\"semantic_type\\\": \\\"\\\",\\n        \\\"description\\\": \\\"\\\"\\n      }\\n    },\\n    {\\n      \\\"column\\\": \\\"prccd_INTC\\\",\\n      \\\"properties\\\": {\\n        \\\"dtype\\\": \\\"number\\\",\\n        \\\"std\\\": 11.122598668834152,\\n        \\\"min\\\": 18.89,\\n        \\\"max\\\": 68.47,\\n        \\\"num_unique_values\\\": 1932,\\n        \\\"samples\\\": [\\n          58.95,\\n          29.51,\\n          24.05\\n        ],\\n        \\\"semantic_type\\\": \\\"\\\",\\n        \\\"description\\\": \\\"\\\"\\n      }\\n    },\\n    {\\n      \\\"column\\\": \\\"prccd_AMZN\\\",\\n      \\\"properties\\\": {\\n        \\\"dtype\\\": \\\"number\\\",\\n        \\\"std\\\": 1109.418847975065,\\n        \\\"min\\\": 81.82,\\n        \\\"max\\\": 3731.41,\\n        \\\"num_unique_values\\\": 2723,\\n        \\\"samples\\\": [\\n          1776.66,\\n          695.27,\\n          2351.26\\n        ],\\n        \\\"semantic_type\\\": \\\"\\\",\\n        \\\"description\\\": \\\"\\\"\\n      }\\n    },\\n    {\\n      \\\"column\\\": \\\"cshtrd_AMZN\\\",\\n      \\\"properties\\\": {\\n        \\\"dtype\\\": \\\"number\\\",\\n        \\\"std\\\": 24412667,\\n        \\\"min\\\": 881337,\\n        \\\"max\\\": 222689600,\\n        \\\"num_unique_values\\\": 2764,\\n        \\\"samples\\\": [\\n          2619429,\\n          4933434,\\n          3567955\\n        ],\\n        \\\"semantic_type\\\": \\\"\\\",\\n        \\\"description\\\": \\\"\\\"\\n      }\\n    },\\n    {\\n      \\\"column\\\": \\\"sent_AMZN\\\",\\n      \\\"properties\\\": {\\n        \\\"dtype\\\": \\\"number\\\",\\n        \\\"std\\\": 0.12211000310378821,\\n        \\\"min\\\": -0.25,\\n        \\\"max\\\": 0.785714286,\\n        \\\"num_unique_values\\\": 162,\\n        \\\"samples\\\": [\\n          0.429824561,\\n          0.608974359,\\n          0.268817204\\n        ],\\n        \\\"semantic_type\\\": \\\"\\\",\\n        \\\"description\\\": \\\"\\\"\\n      }\\n    }\\n  ]\\n}\"\r\n            }\r\n          },\r\n          \"metadata\": {},\r\n          \"execution_count\": 6\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"cell_type\": \"code\",\r\n      \"source\": [\r\n        \"data.isna().sum()\"\r\n      ],\r\n      \"metadata\": {\r\n        \"id\": \"0h0OYum5RzC6\",\r\n        \"outputId\": \"75c4f819-1ca2-4541-d3ad-3fe72e048c2f\",\r\n        \"colab\": {\r\n          \"base_uri\": \"https://localhost:8080/\",\r\n          \"height\": 460\r\n        }\r\n      },\r\n      \"execution_count\": 7,\r\n      \"outputs\": [\r\n        {\r\n          \"output_type\": \"execute_result\",\r\n          \"data\": {\r\n            \"text/plain\": [\r\n              \"prccd_TSLA     0\\n\",\r\n              \"prccd_NVDA     0\\n\",\r\n              \"prccd_MSFT     0\\n\",\r\n              \"prccd_GOOG     0\\n\",\r\n              \"prccd_AAPL     0\\n\",\r\n              \"prccd_DIS      0\\n\",\r\n              \"prccd_XOM      0\\n\",\r\n              \"prccd_CRM      0\\n\",\r\n              \"prccd_INTC     0\\n\",\r\n              \"prccd_AMZN     0\\n\",\r\n              \"cshtrd_AMZN    0\\n\",\r\n              \"sent_AMZN      0\\n\",\r\n              \"dtype: int64\"\r\n            ],\r\n            \"text/html\": [\r\n              \"<div>\\n\",\r\n              \"<style scoped>\\n\",\r\n              \"    .dataframe tbody tr th:only-of-type {\\n\",\r\n              \"        vertical-align: middle;\\n\",\r\n              \"    }\\n\",\r\n              \"\\n\",\r\n              \"    .dataframe tbody tr th {\\n\",\r\n              \"        vertical-align: top;\\n\",\r\n              \"    }\\n\",\r\n              \"\\n\",\r\n              \"    .dataframe thead th {\\n\",\r\n              \"        text-align: right;\\n\",\r\n              \"    }\\n\",\r\n              \"</style>\\n\",\r\n              \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\r\n              \"  <thead>\\n\",\r\n              \"    <tr style=\\\"text-align: right;\\\">\\n\",\r\n              \"      <th></th>\\n\",\r\n              \"      <th>0</th>\\n\",\r\n              \"    </tr>\\n\",\r\n              \"  </thead>\\n\",\r\n              \"  <tbody>\\n\",\r\n              \"    <tr>\\n\",\r\n              \"      <th>prccd_TSLA</th>\\n\",\r\n              \"      <td>0</td>\\n\",\r\n              \"    </tr>\\n\",\r\n              \"    <tr>\\n\",\r\n              \"      <th>prccd_NVDA</th>\\n\",\r\n              \"      <td>0</td>\\n\",\r\n              \"    </tr>\\n\",\r\n              \"    <tr>\\n\",\r\n              \"      <th>prccd_MSFT</th>\\n\",\r\n              \"      <td>0</td>\\n\",\r\n              \"    </tr>\\n\",\r\n              \"    <tr>\\n\",\r\n              \"      <th>prccd_GOOG</th>\\n\",\r\n              \"      <td>0</td>\\n\",\r\n              \"    </tr>\\n\",\r\n              \"    <tr>\\n\",\r\n              \"      <th>prccd_AAPL</th>\\n\",\r\n              \"      <td>0</td>\\n\",\r\n              \"    </tr>\\n\",\r\n              \"    <tr>\\n\",\r\n              \"      <th>prccd_DIS</th>\\n\",\r\n              \"      <td>0</td>\\n\",\r\n              \"    </tr>\\n\",\r\n              \"    <tr>\\n\",\r\n              \"      <th>prccd_XOM</th>\\n\",\r\n              \"      <td>0</td>\\n\",\r\n              \"    </tr>\\n\",\r\n              \"    <tr>\\n\",\r\n              \"      <th>prccd_CRM</th>\\n\",\r\n              \"      <td>0</td>\\n\",\r\n              \"    </tr>\\n\",\r\n              \"    <tr>\\n\",\r\n              \"      <th>prccd_INTC</th>\\n\",\r\n              \"      <td>0</td>\\n\",\r\n              \"    </tr>\\n\",\r\n              \"    <tr>\\n\",\r\n              \"      <th>prccd_AMZN</th>\\n\",\r\n              \"      <td>0</td>\\n\",\r\n              \"    </tr>\\n\",\r\n              \"    <tr>\\n\",\r\n              \"      <th>cshtrd_AMZN</th>\\n\",\r\n              \"      <td>0</td>\\n\",\r\n              \"    </tr>\\n\",\r\n              \"    <tr>\\n\",\r\n              \"      <th>sent_AMZN</th>\\n\",\r\n              \"      <td>0</td>\\n\",\r\n              \"    </tr>\\n\",\r\n              \"  </tbody>\\n\",\r\n              \"</table>\\n\",\r\n              \"</div><br><label><b>dtype:</b> int64</label>\"\r\n            ]\r\n          },\r\n          \"metadata\": {},\r\n          \"execution_count\": 7\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"cell_type\": \"markdown\",\r\n      \"source\": [\r\n        \"# GAT\"\r\n      ],\r\n      \"metadata\": {\r\n        \"id\": \"c3a9pQD5FCYz\"\r\n      }\r\n    },\r\n    {\r\n      \"cell_type\": \"markdown\",\r\n      \"source\": [\r\n        \"- 노드 : 각 시점\\n\",\r\n        \"- 피처 : 10개 주식 종가 + 예측 기업 감정분석\\n\",\r\n        \"- GAT의 역할 : 피처들의 관계(회사 간의 관계 등)을 파악해 **시점별** 임베딩 생성;  다른 시점과의 연관성을 반영    \\n\",\r\n        \"(ex. 1~10일 전과 연결이 되어있는 상태에서, 1일 전 정보는 얼마나 중요하고 10일 전 정보는 얼마나 중요한지 판단)\"\r\n      ],\r\n      \"metadata\": {\r\n        \"id\": \"ZyPD4n10nlku\"\r\n      }\r\n    },\r\n    {\r\n      \"cell_type\": \"code\",\r\n      \"source\": [\r\n        \"# PyTorch Geometric 설치\\n\",\r\n        \"!pip install torch-geometric\\n\",\r\n        \"!pip install pyg-lib torch-scatter torch-sparse torch-cluster torch-spline-conv -f https://data.pyg.org/whl/torch-2.3.0+cpu.html\"\r\n      ],\r\n      \"metadata\": {\r\n        \"id\": \"zcWtyQhmENfe\",\r\n        \"colab\": {\r\n          \"base_uri\": \"https://localhost:8080/\"\r\n        },\r\n        \"collapsed\": true,\r\n        \"outputId\": \"23fe19b7-0e16-4b58-cfa0-231956c66a69\"\r\n      },\r\n      \"execution_count\": 9,\r\n      \"outputs\": [\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"Collecting torch-geometric\\n\",\r\n            \"  Downloading torch_geometric-2.6.1-py3-none-any.whl.metadata (63 kB)\\n\",\r\n            \"\\u001b[?25l     \\u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\u001b[0m \\u001b[32m0.0/63.1 kB\\u001b[0m \\u001b[31m?\\u001b[0m eta \\u001b[36m-:--:--\\u001b[0m\\r\\u001b[2K     \\u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\u001b[0m \\u001b[32m63.1/63.1 kB\\u001b[0m \\u001b[31m1.7 MB/s\\u001b[0m eta \\u001b[36m0:00:00\\u001b[0m\\n\",\r\n            \"\\u001b[?25hRequirement already satisfied: aiohttp in /usr/local/lib/python3.11/dist-packages (from torch-geometric) (3.11.15)\\n\",\r\n            \"Requirement already satisfied: fsspec in /usr/local/lib/python3.11/dist-packages (from torch-geometric) (2025.3.2)\\n\",\r\n            \"Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch-geometric) (3.1.6)\\n\",\r\n            \"Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from torch-geometric) (2.0.2)\\n\",\r\n            \"Requirement already satisfied: psutil>=5.8.0 in /usr/local/lib/python3.11/dist-packages (from torch-geometric) (5.9.5)\\n\",\r\n            \"Requirement already satisfied: pyparsing in /usr/local/lib/python3.11/dist-packages (from torch-geometric) (3.2.3)\\n\",\r\n            \"Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from torch-geometric) (2.32.3)\\n\",\r\n            \"Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from torch-geometric) (4.67.1)\\n\",\r\n            \"Requirement already satisfied: aiohappyeyeballs>=2.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->torch-geometric) (2.6.1)\\n\",\r\n            \"Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from aiohttp->torch-geometric) (1.3.2)\\n\",\r\n            \"Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->torch-geometric) (25.3.0)\\n\",\r\n            \"Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from aiohttp->torch-geometric) (1.6.0)\\n\",\r\n            \"Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.11/dist-packages (from aiohttp->torch-geometric) (6.4.3)\\n\",\r\n            \"Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->torch-geometric) (0.3.1)\\n\",\r\n            \"Requirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->torch-geometric) (1.20.0)\\n\",\r\n            \"Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch-geometric) (3.0.2)\\n\",\r\n            \"Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->torch-geometric) (3.4.1)\\n\",\r\n            \"Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->torch-geometric) (3.10)\\n\",\r\n            \"Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->torch-geometric) (2.4.0)\\n\",\r\n            \"Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->torch-geometric) (2025.4.26)\\n\",\r\n            \"Downloading torch_geometric-2.6.1-py3-none-any.whl (1.1 MB)\\n\",\r\n            \"\\u001b[2K   \\u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\u001b[0m \\u001b[32m1.1/1.1 MB\\u001b[0m \\u001b[31m18.2 MB/s\\u001b[0m eta \\u001b[36m0:00:00\\u001b[0m\\n\",\r\n            \"\\u001b[?25hInstalling collected packages: torch-geometric\\n\",\r\n            \"Successfully installed torch-geometric-2.6.1\\n\",\r\n            \"Looking in links: https://data.pyg.org/whl/torch-2.3.0+cpu.html\\n\",\r\n            \"Collecting pyg-lib\\n\",\r\n            \"  Downloading https://data.pyg.org/whl/torch-2.3.0%2Bcpu/pyg_lib-0.4.0%2Bpt23cpu-cp311-cp311-linux_x86_64.whl (1.3 MB)\\n\",\r\n            \"\\u001b[2K     \\u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\u001b[0m \\u001b[32m1.3/1.3 MB\\u001b[0m \\u001b[31m12.7 MB/s\\u001b[0m eta \\u001b[36m0:00:00\\u001b[0m\\n\",\r\n            \"\\u001b[?25hCollecting torch-scatter\\n\",\r\n            \"  Downloading https://data.pyg.org/whl/torch-2.3.0%2Bcpu/torch_scatter-2.1.2%2Bpt23cpu-cp311-cp311-linux_x86_64.whl (515 kB)\\n\",\r\n            \"\\u001b[2K     \\u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\u001b[0m \\u001b[32m515.4/515.4 kB\\u001b[0m \\u001b[31m23.5 MB/s\\u001b[0m eta \\u001b[36m0:00:00\\u001b[0m\\n\",\r\n            \"\\u001b[?25hCollecting torch-sparse\\n\",\r\n            \"  Downloading https://data.pyg.org/whl/torch-2.3.0%2Bcpu/torch_sparse-0.6.18%2Bpt23cpu-cp311-cp311-linux_x86_64.whl (1.2 MB)\\n\",\r\n            \"\\u001b[2K     \\u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\u001b[0m \\u001b[32m1.2/1.2 MB\\u001b[0m \\u001b[31m34.0 MB/s\\u001b[0m eta \\u001b[36m0:00:00\\u001b[0m\\n\",\r\n            \"\\u001b[?25hCollecting torch-cluster\\n\",\r\n            \"  Downloading https://data.pyg.org/whl/torch-2.3.0%2Bcpu/torch_cluster-1.6.3%2Bpt23cpu-cp311-cp311-linux_x86_64.whl (785 kB)\\n\",\r\n            \"\\u001b[2K     \\u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\u001b[0m \\u001b[32m785.3/785.3 kB\\u001b[0m \\u001b[31m43.0 MB/s\\u001b[0m eta \\u001b[36m0:00:00\\u001b[0m\\n\",\r\n            \"\\u001b[?25hCollecting torch-spline-conv\\n\",\r\n            \"  Downloading https://data.pyg.org/whl/torch-2.3.0%2Bcpu/torch_spline_conv-1.2.2%2Bpt23cpu-cp311-cp311-linux_x86_64.whl (217 kB)\\n\",\r\n            \"\\u001b[2K     \\u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\u001b[0m \\u001b[32m217.6/217.6 kB\\u001b[0m \\u001b[31m14.2 MB/s\\u001b[0m eta \\u001b[36m0:00:00\\u001b[0m\\n\",\r\n            \"\\u001b[?25hRequirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from torch-sparse) (1.15.2)\\n\",\r\n            \"Requirement already satisfied: numpy<2.5,>=1.23.5 in /usr/local/lib/python3.11/dist-packages (from scipy->torch-sparse) (2.0.2)\\n\",\r\n            \"Installing collected packages: torch-spline-conv, torch-scatter, pyg-lib, torch-sparse, torch-cluster\\n\",\r\n            \"Successfully installed pyg-lib-0.4.0+pt23cpu torch-cluster-1.6.3+pt23cpu torch-scatter-2.1.2+pt23cpu torch-sparse-0.6.18+pt23cpu torch-spline-conv-1.2.2+pt23cpu\\n\"\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"cell_type\": \"code\",\r\n      \"source\": [\r\n        \"# import 문\\n\",\r\n        \"import torch\\n\",\r\n        \"import torch.nn as nn\\n\",\r\n        \"from torch_geometric.nn import GATv2Conv\"\r\n      ],\r\n      \"metadata\": {\r\n        \"id\": \"hKYw4OJfKP-A\",\r\n        \"colab\": {\r\n          \"base_uri\": \"https://localhost:8080/\"\r\n        },\r\n        \"collapsed\": true,\r\n        \"outputId\": \"b8c7e34f-c825-4e62-9f01-2d54658bed35\"\r\n      },\r\n      \"execution_count\": 10,\r\n      \"outputs\": [\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"/usr/local/lib/python3.11/dist-packages/torch_geometric/typing.py:68: UserWarning: An issue occurred while importing 'pyg-lib'. Disabling its usage. Stacktrace: /usr/local/lib/python3.11/dist-packages/libpyg.so: undefined symbol: _ZN3c1010Dispatcher17runRecordFunctionERN2at14RecordFunctionESt17reference_wrapperIKNS_14FunctionSchemaEENS_11DispatchKeyE\\n\",\r\n            \"  warnings.warn(f\\\"An issue occurred while importing 'pyg-lib'. \\\"\\n\",\r\n            \"/usr/local/lib/python3.11/dist-packages/torch_geometric/typing.py:86: UserWarning: An issue occurred while importing 'torch-scatter'. Disabling its usage. Stacktrace: /usr/local/lib/python3.11/dist-packages/torch_scatter/_version_cpu.so: undefined symbol: _ZN5torch3jit17parseSchemaOrNameERKSs\\n\",\r\n            \"  warnings.warn(f\\\"An issue occurred while importing 'torch-scatter'. \\\"\\n\",\r\n            \"/usr/local/lib/python3.11/dist-packages/torch_geometric/typing.py:97: UserWarning: An issue occurred while importing 'torch-cluster'. Disabling its usage. Stacktrace: /usr/local/lib/python3.11/dist-packages/torch_cluster/_version_cpu.so: undefined symbol: _ZN5torch3jit17parseSchemaOrNameERKSs\\n\",\r\n            \"  warnings.warn(f\\\"An issue occurred while importing 'torch-cluster'. \\\"\\n\",\r\n            \"/usr/local/lib/python3.11/dist-packages/torch_geometric/typing.py:113: UserWarning: An issue occurred while importing 'torch-spline-conv'. Disabling its usage. Stacktrace: /usr/local/lib/python3.11/dist-packages/torch_spline_conv/_version_cpu.so: undefined symbol: _ZN5torch3jit17parseSchemaOrNameERKSs\\n\",\r\n            \"  warnings.warn(\\n\",\r\n            \"/usr/local/lib/python3.11/dist-packages/torch_geometric/typing.py:124: UserWarning: An issue occurred while importing 'torch-sparse'. Disabling its usage. Stacktrace: /usr/local/lib/python3.11/dist-packages/torch_sparse/_version_cpu.so: undefined symbol: _ZN5torch3jit17parseSchemaOrNameERKSs\\n\",\r\n            \"  warnings.warn(f\\\"An issue occurred while importing 'torch-sparse'. \\\"\\n\"\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"cell_type\": \"code\",\r\n      \"source\": [\r\n        \"# GAT 레이어 정의\\n\",\r\n        \"class GATLayer(nn.Module):\\n\",\r\n        \"    def __init__(self, in_features, out_features, heads=4):\\n\",\r\n        \"        super().__init__()\\n\",\r\n        \"        self.gat = GATv2Conv(in_features, out_features, heads=heads, concat=False) # 선형 변환 : concat이 True이면 결합, False이면 평균\\n\",\r\n        \"                                                                                   # GATv2Conv 내부에서 어텐션 계산이 수행됨\\n\",\r\n        \"\\n\",\r\n        \"    def forward(self, x, edge_index):\\n\",\r\n        \"        return self.gat(x, edge_index)\"\r\n      ],\r\n      \"metadata\": {\r\n        \"id\": \"OeUAFsolD3_n\"\r\n      },\r\n      \"execution_count\": 11,\r\n      \"outputs\": []\r\n    },\r\n    {\r\n      \"cell_type\": \"code\",\r\n      \"source\": [\r\n        \"# 데이터 준비\\n\",\r\n        \"node_features = data.values  # shape: [날짜 수, feature 수]\\n\",\r\n        \"n_nodes = node_features.shape[0] # 노드 수 (==날짜 수)\\n\",\r\n        \"\\n\",\r\n        \"# 그래프 형태로 변환 : 엣지 생성 (시점 간 연결)\\n\",\r\n        \"edge_list = []\\n\",\r\n        \"for i in range(n_nodes):\\n\",\r\n        \"    for j in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]: # 이후 시점들에 단방향 연결; (휴장 같은 것은 생각하지 않음.... 시점 기준)\\n\",\r\n        \"        if i + j < n_nodes:\\n\",\r\n        \"            edge_list.append([i, i + j])\\n\",\r\n        \"edge_index = torch.tensor(edge_list).t()\"\r\n      ],\r\n      \"metadata\": {\r\n        \"id\": \"q8GV9ihbilPA\"\r\n      },\r\n      \"execution_count\": 12,\r\n      \"outputs\": []\r\n    },\r\n    {\r\n      \"cell_type\": \"code\",\r\n      \"source\": [\r\n        \"edge_index # 출력 결과의 첫째행이 출발노드, 둘째행이 도착노드!\"\r\n      ],\r\n      \"metadata\": {\r\n        \"colab\": {\r\n          \"base_uri\": \"https://localhost:8080/\"\r\n        },\r\n        \"id\": \"CoPQPC7lqhYP\",\r\n        \"outputId\": \"f4422a70-13fd-4966-e6ba-664c8e8354f7\"\r\n      },\r\n      \"execution_count\": 13,\r\n      \"outputs\": [\r\n        {\r\n          \"output_type\": \"execute_result\",\r\n          \"data\": {\r\n            \"text/plain\": [\r\n              \"tensor([[   0,    0,    0,  ..., 2761, 2761, 2762],\\n\",\r\n              \"        [   1,    2,    3,  ..., 2762, 2763, 2763]])\"\r\n            ]\r\n          },\r\n          \"metadata\": {},\r\n          \"execution_count\": 13\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"cell_type\": \"code\",\r\n      \"source\": [\r\n        \"# GAT 입력 형태로 변환\\n\",\r\n        \"x = torch.tensor(node_features, dtype=torch.float)\"\r\n      ],\r\n      \"metadata\": {\r\n        \"id\": \"QHYMVczGi_Ey\"\r\n      },\r\n      \"execution_count\": 14,\r\n      \"outputs\": []\r\n    },\r\n    {\r\n      \"cell_type\": \"code\",\r\n      \"source\": [\r\n        \"# GAT 모델 생성 및 실행\\n\",\r\n        \"gat_model = GATLayer(in_features=data.shape[1], out_features=8) # 결과: 각 시점(노드)에 대한 (output_features)차원 임베딩\\n\",\r\n        \"embeddings = gat_model(x, edge_index)  # shape: [날짜 수, 설정한 out_features 수]\"\r\n      ],\r\n      \"metadata\": {\r\n        \"id\": \"fjZPQBOtDDlR\"\r\n      },\r\n      \"execution_count\": 15,\r\n      \"outputs\": []\r\n    },\r\n    {\r\n      \"cell_type\": \"code\",\r\n      \"source\": [\r\n        \"embeddings\"\r\n      ],\r\n      \"metadata\": {\r\n        \"colab\": {\r\n          \"base_uri\": \"https://localhost:8080/\"\r\n        },\r\n        \"id\": \"y20jeOXzKiQE\",\r\n        \"outputId\": \"492af6b7-4c9a-436a-d480-50b904f861ad\"\r\n      },\r\n      \"execution_count\": 16,\r\n      \"outputs\": [\r\n        {\r\n          \"output_type\": \"execute_result\",\r\n          \"data\": {\r\n            \"text/plain\": [\r\n              \"tensor([[   65129.2148,  -482026.8750,   -86618.8984,  ...,\\n\",\r\n              \"           739839.6250,  -458352.7500,   438598.1562],\\n\",\r\n              \"        [  124705.3594,  -421653.4688,  -105195.8516,  ...,\\n\",\r\n              \"           699307.2500,  -454739.8125,   407343.6562],\\n\",\r\n              \"        [   99830.0469,  -444466.2188,  -111441.1016,  ...,\\n\",\r\n              \"           695413.3750,  -454175.0625,   403961.0312],\\n\",\r\n              \"        ...,\\n\",\r\n              \"        [ 1162427.0000, -4682110.5000, -1264119.6250,  ...,\\n\",\r\n              \"          7362709.0000, -4873425.0000,  4253154.0000],\\n\",\r\n              \"        [ 1162427.0000, -4682110.5000, -1264119.6250,  ...,\\n\",\r\n              \"          7362709.0000, -4873425.0000,  4253154.0000],\\n\",\r\n              \"        [ -490411.5625, -6197898.0000, -1679043.7500,  ...,\\n\",\r\n              \"          7103988.0000, -4835910.5000,  4028366.2500]], grad_fn=<AddBackward0>)\"\r\n            ]\r\n          },\r\n          \"metadata\": {},\r\n          \"execution_count\": 16\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"cell_type\": \"markdown\",\r\n      \"source\": [\r\n        \"# csv로 저장\"\r\n      ],\r\n      \"metadata\": {\r\n        \"id\": \"6Qc2aXFfaIms\"\r\n      }\r\n    },\r\n    {\r\n      \"cell_type\": \"code\",\r\n      \"source\": [\r\n        \"embeddings_np = embeddings.detach().cpu().numpy()\\n\",\r\n        \"\\n\",\r\n        \"# DataFrame으로 변환\\n\",\r\n        \"df_embeddings = pd.DataFrame(embeddings_np)\\n\",\r\n        \"\\n\",\r\n        \"# data의 인덱스(datadate)를 가져와서 추가 (data는 이미 set_index로 datadate를 인덱스로 설정했음)\\n\",\r\n        \"df_embeddings['datadate'] = data.index.values\\n\",\r\n        \"\\n\",\r\n        \"# 컬럼 이름 설정\\n\",\r\n        \"column_names = [f'emb_{i}' for i in range(embeddings_np.shape[1])]\\n\",\r\n        \"df_embeddings.columns = column_names + ['datadate']\\n\",\r\n        \"\\n\",\r\n        \"# datadate를 첫 번째 컬럼으로 이동\\n\",\r\n        \"df_embeddings = df_embeddings[['datadate'] + column_names]\\n\",\r\n        \"\\n\",\r\n        \"# 결과 확인\\n\",\r\n        \"print(\\\"Embeddings with datadate:\\\")\\n\",\r\n        \"print(df_embeddings.head())\"\r\n      ],\r\n      \"metadata\": {\r\n        \"id\": \"L1bGXzBpaJtx\",\r\n        \"colab\": {\r\n          \"base_uri\": \"https://localhost:8080/\"\r\n        },\r\n        \"outputId\": \"4a9c94e5-49ab-4827-efa3-6089c3edf7ae\"\r\n      },\r\n      \"execution_count\": null,\r\n      \"outputs\": [\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"Embeddings with datadate:\\n\",\r\n            \"     datadate          emb_0        emb_1         emb_2         emb_3  \\\\\\n\",\r\n            \"0  2014-03-27  169624.406250 -770829.3750  19808.710938  446523.03125   \\n\",\r\n            \"1  2014-03-28  182473.953125 -535715.4375 -23719.695312  315364.93750   \\n\",\r\n            \"2  2014-03-31  182473.953125 -535715.4375 -23719.695312  315364.93750   \\n\",\r\n            \"3  2014-04-01  185187.531250 -486059.7500 -32913.710938  287665.75000   \\n\",\r\n            \"4  2014-04-02  185187.531250 -486059.7500 -32913.710938  287665.75000   \\n\",\r\n            \"\\n\",\r\n            \"        emb_4       emb_5         emb_6        emb_7  \\n\",\r\n            \"0  787846.625 -1391239.25  209081.28125 -848305.6875  \\n\",\r\n            \"1  674911.750 -1090780.75  165395.59375 -615559.8750  \\n\",\r\n            \"2  674911.750 -1090780.75  165395.59375 -615559.8750  \\n\",\r\n            \"3  651060.375 -1027323.25  156170.31250 -566401.6250  \\n\",\r\n            \"4  651060.375 -1027323.25  156170.31250 -566401.6250  \\n\"\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"cell_type\": \"code\",\r\n      \"source\": [\r\n        \"# CSV로 저장\\n\",\r\n        \"df_embeddings.to_csv(f'embeddings_{company_name}.csv', index=False)\"\r\n      ],\r\n      \"metadata\": {\r\n        \"id\": \"QdlV3Fhjs0mb\"\r\n      },\r\n      \"execution_count\": null,\r\n      \"outputs\": []\r\n    },\r\n    {\r\n      \"cell_type\": \"code\",\r\n      \"source\": [\r\n        \"!pip install optuna\"\r\n      ],\r\n      \"metadata\": {\r\n        \"colab\": {\r\n          \"base_uri\": \"https://localhost:8080/\"\r\n        },\r\n        \"collapsed\": true,\r\n        \"id\": \"iBDOkaCDuMsI\",\r\n        \"outputId\": \"43349298-cdff-4b98-fc36-3d32e345734c\"\r\n      },\r\n      \"execution_count\": 70,\r\n      \"outputs\": [\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"Collecting optuna\\n\",\r\n            \"  Downloading optuna-4.3.0-py3-none-any.whl.metadata (17 kB)\\n\",\r\n            \"Collecting alembic>=1.5.0 (from optuna)\\n\",\r\n            \"  Downloading alembic-1.15.2-py3-none-any.whl.metadata (7.3 kB)\\n\",\r\n            \"Collecting colorlog (from optuna)\\n\",\r\n            \"  Downloading colorlog-6.9.0-py3-none-any.whl.metadata (10 kB)\\n\",\r\n            \"Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from optuna) (2.0.2)\\n\",\r\n            \"Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from optuna) (24.2)\\n\",\r\n            \"Requirement already satisfied: sqlalchemy>=1.4.2 in /usr/local/lib/python3.11/dist-packages (from optuna) (2.0.40)\\n\",\r\n            \"Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from optuna) (4.67.1)\\n\",\r\n            \"Requirement already satisfied: PyYAML in /usr/local/lib/python3.11/dist-packages (from optuna) (6.0.2)\\n\",\r\n            \"Requirement already satisfied: Mako in /usr/lib/python3/dist-packages (from alembic>=1.5.0->optuna) (1.1.3)\\n\",\r\n            \"Requirement already satisfied: typing-extensions>=4.12 in /usr/local/lib/python3.11/dist-packages (from alembic>=1.5.0->optuna) (4.13.2)\\n\",\r\n            \"Requirement already satisfied: greenlet>=1 in /usr/local/lib/python3.11/dist-packages (from sqlalchemy>=1.4.2->optuna) (3.2.1)\\n\",\r\n            \"Downloading optuna-4.3.0-py3-none-any.whl (386 kB)\\n\",\r\n            \"\\u001b[2K   \\u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\u001b[0m \\u001b[32m386.6/386.6 kB\\u001b[0m \\u001b[31m7.6 MB/s\\u001b[0m eta \\u001b[36m0:00:00\\u001b[0m\\n\",\r\n            \"\\u001b[?25hDownloading alembic-1.15.2-py3-none-any.whl (231 kB)\\n\",\r\n            \"\\u001b[2K   \\u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\u001b[0m \\u001b[32m231.9/231.9 kB\\u001b[0m \\u001b[31m15.0 MB/s\\u001b[0m eta \\u001b[36m0:00:00\\u001b[0m\\n\",\r\n            \"\\u001b[?25hDownloading colorlog-6.9.0-py3-none-any.whl (11 kB)\\n\",\r\n            \"Installing collected packages: colorlog, alembic, optuna\\n\",\r\n            \"Successfully installed alembic-1.15.2 colorlog-6.9.0 optuna-4.3.0\\n\"\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"cell_type\": \"markdown\",\r\n      \"source\": [\r\n        \"###TCN 시작\"\r\n      ],\r\n      \"metadata\": {\r\n        \"id\": \"Yu936WwLjWyW\"\r\n      }\r\n    },\r\n    {\r\n      \"cell_type\": \"code\",\r\n      \"source\": [\r\n        \"import torch\\n\",\r\n        \"import torch.nn as nn\\n\",\r\n        \"import torch.nn.functional as F\\n\",\r\n        \"import matplotlib.pyplot as plt\\n\",\r\n        \"import optuna\\n\",\r\n        \"# --- 유틸 함수 ---\\n\",\r\n        \"def get_conv1d(in_channels, out_channels, kernel_size, stride, padding, dilation, groups, bias):\\n\",\r\n        \"    return nn.Conv1d(in_channels=in_channels, out_channels=out_channels,\\n\",\r\n        \"                     kernel_size=kernel_size, stride=stride,\\n\",\r\n        \"                     padding=padding, dilation=dilation,\\n\",\r\n        \"                     groups=groups, bias=bias)\\n\",\r\n        \"\\n\",\r\n        \"def get_bn(channels):\\n\",\r\n        \"    return nn.BatchNorm1d(channels)\\n\",\r\n        \"\\n\",\r\n        \"def conv_bn(in_channels, out_channels, kernel_size, stride, padding, groups, dilation=1, bias=False):\\n\",\r\n        \"    if padding is None:\\n\",\r\n        \"        padding = kernel_size // 2\\n\",\r\n        \"    result = nn.Sequential()\\n\",\r\n        \"    result.add_module('conv', get_conv1d(in_channels, out_channels, kernel_size, stride, padding, dilation, groups, bias))\\n\",\r\n        \"    result.add_module('bn', get_bn(out_channels))\\n\",\r\n        \"    return result\\n\",\r\n        \"\\n\",\r\n        \"# --- RevIN ---\\n\",\r\n        \"class RevIN(nn.Module):\\n\",\r\n        \"    def __init__(self, num_features: int, eps=1e-5, affine=True, subtract_last=False):\\n\",\r\n        \"        super().__init__()\\n\",\r\n        \"        self.num_features = num_features\\n\",\r\n        \"        self.eps = eps\\n\",\r\n        \"        self.affine = affine\\n\",\r\n        \"        self.subtract_last = subtract_last\\n\",\r\n        \"        if self.affine:\\n\",\r\n        \"            self._init_params()\\n\",\r\n        \"\\n\",\r\n        \"    def _init_params(self):\\n\",\r\n        \"        self.affine_weight = nn.Parameter(torch.ones(self.num_features))\\n\",\r\n        \"        self.affine_bias = nn.Parameter(torch.zeros(self.num_features))\\n\",\r\n        \"\\n\",\r\n        \"    def forward(self, x, mode: str):\\n\",\r\n        \"        if mode == 'norm':\\n\",\r\n        \"            self._get_statistics(x)\\n\",\r\n        \"            x = self._normalize(x)\\n\",\r\n        \"        elif mode == 'denorm':\\n\",\r\n        \"            x = self._denormalize(x)\\n\",\r\n        \"        return x\\n\",\r\n        \"\\n\",\r\n        \"    def _get_statistics(self, x):\\n\",\r\n        \"        dim2reduce = tuple(range(1, x.ndim - 1))\\n\",\r\n        \"        if self.subtract_last:\\n\",\r\n        \"            self.last = x[:, -1:, :].unsqueeze(1)\\n\",\r\n        \"        else:\\n\",\r\n        \"            self.mean = torch.mean(x, dim=dim2reduce, keepdim=True).detach()\\n\",\r\n        \"        self.stdev = torch.sqrt(torch.var(x, dim=dim2reduce, keepdim=True, unbiased=False) + self.eps).detach()\\n\",\r\n        \"\\n\",\r\n        \"    def _normalize(self, x):\\n\",\r\n        \"        x = (x - self.mean) / self.stdev\\n\",\r\n        \"        if self.affine:\\n\",\r\n        \"            x = x * self.affine_weight[None, None, :] + self.affine_bias[None, None, :]\\n\",\r\n        \"        return x\\n\",\r\n        \"\\n\",\r\n        \"    def _denormalize(self, x):\\n\",\r\n        \"        if self.affine:\\n\",\r\n        \"            x = (x - self.affine_bias[None, None, :]) / self.affine_weight[None, None, :]\\n\",\r\n        \"        x = x * self.stdev + self.mean\\n\",\r\n        \"        return x\\n\",\r\n        \"\\n\",\r\n        \"# --- 시계열 분해 ---\\n\",\r\n        \"class moving_avg(nn.Module):\\n\",\r\n        \"    def __init__(self, kernel_size, stride):\\n\",\r\n        \"        super().__init__()\\n\",\r\n        \"        self.kernel_size = kernel_size\\n\",\r\n        \"        self.avg = nn.AvgPool1d(kernel_size=kernel_size, stride=stride, padding=0)\\n\",\r\n        \"\\n\",\r\n        \"    def forward(self, x):\\n\",\r\n        \"        front = x[:, 0:1, :].repeat(1, (self.kernel_size - 1) // 2, 1)\\n\",\r\n        \"        end = x[:, -1:, :].repeat(1, (self.kernel_size - 1) // 2, 1)\\n\",\r\n        \"        x = torch.cat([front, x, end], dim=1)\\n\",\r\n        \"        x = self.avg(x.permute(0, 2, 1))\\n\",\r\n        \"        return x.permute(0, 2, 1)\\n\",\r\n        \"\\n\",\r\n        \"class series_decomp(nn.Module):\\n\",\r\n        \"    def __init__(self, kernel_size):\\n\",\r\n        \"        super().__init__()\\n\",\r\n        \"        self.moving_avg = moving_avg(kernel_size, stride=1)\\n\",\r\n        \"\\n\",\r\n        \"    def forward(self, x):\\n\",\r\n        \"        moving_mean = self.moving_avg(x)\\n\",\r\n        \"        return x - moving_mean, moving_mean\\n\",\r\n        \"\\n\",\r\n        \"# --- 커스텀 커널 ---\\n\",\r\n        \"class ReparamLargeKernelConv(nn.Module):\\n\",\r\n        \"    def __init__(self, in_channels, out_channels, kernel_size, stride, groups, small_kernel, small_kernel_merged=False):\\n\",\r\n        \"        super().__init__()\\n\",\r\n        \"        self.kernel_size = kernel_size\\n\",\r\n        \"        self.small_kernel = small_kernel\\n\",\r\n        \"        padding = kernel_size // 2\\n\",\r\n        \"        if small_kernel_merged:\\n\",\r\n        \"            self.lkb_reparam = nn.Conv1d(in_channels, out_channels, kernel_size, stride, padding, groups=groups, bias=True)\\n\",\r\n        \"        else:\\n\",\r\n        \"            self.lkb_origin = conv_bn(in_channels, out_channels, kernel_size, stride, padding, groups)\\n\",\r\n        \"            if small_kernel is not None:\\n\",\r\n        \"                self.small_conv = conv_bn(in_channels, out_channels, small_kernel, stride, small_kernel // 2, groups)\\n\",\r\n        \"\\n\",\r\n        \"    def forward(self, x):\\n\",\r\n        \"        if hasattr(self, 'lkb_reparam'):\\n\",\r\n        \"            return self.lkb_reparam(x)\\n\",\r\n        \"        out = self.lkb_origin(x)\\n\",\r\n        \"        if hasattr(self, 'small_conv'):\\n\",\r\n        \"            out += self.small_conv(x)\\n\",\r\n        \"        return out\\n\",\r\n        \"\\n\",\r\n        \"# --- 출력층 ---\\n\",\r\n        \"class Flatten_Head(nn.Module):\\n\",\r\n        \"    def __init__(self, d_model):\\n\",\r\n        \"        super().__init__()\\n\",\r\n        \"        self.linear = nn.Linear(d_model, 1)\\n\",\r\n        \"\\n\",\r\n        \"    def forward(self, x):         # x: [B, C, T]\\n\",\r\n        \"        x = x.permute(0, 2, 1)    # → [B, T, C]\\n\",\r\n        \"        x = self.linear(x)        # → [B, T, 1]\\n\",\r\n        \"        return x.squeeze(-1)     # → [B, T]\\n\",\r\n        \"\\n\",\r\n        \"# --- ModernTCN 모델 ---\\n\",\r\n        \"class ModernTCN(nn.Module):\\n\",\r\n        \"    def __init__(self, configs):\\n\",\r\n        \"        super().__init__()\\n\",\r\n        \"        self.revin = RevIN(configs.enc_in, affine=configs.affine) if configs.revin else None\\n\",\r\n        \"        self.decomp = series_decomp(configs.kernel_size) if configs.decomposition else None\\n\",\r\n        \"\\n\",\r\n        \"        self.conv_layers = nn.ModuleList()\\n\",\r\n        \"        self.norm_layers = nn.ModuleList()\\n\",\r\n        \"\\n\",\r\n        \"        c_in = configs.enc_in\\n\",\r\n        \"        for i in range(len(configs.dims)):\\n\",\r\n        \"            conv = ReparamLargeKernelConv(c_in, configs.dims[i],\\n\",\r\n        \"                                          kernel_size=configs.large_size[i],\\n\",\r\n        \"                                          stride=1,\\n\",\r\n        \"                                          groups=1,\\n\",\r\n        \"                                          small_kernel=configs.small_size[i],\\n\",\r\n        \"                                          small_kernel_merged=configs.small_kernel_merged)\\n\",\r\n        \"            self.conv_layers.append(conv)\\n\",\r\n        \"            self.norm_layers.append(nn.BatchNorm1d(configs.dims[i]))\\n\",\r\n        \"            c_in = configs.dims[i]\\n\",\r\n        \"\\n\",\r\n        \"        self.head = Flatten_Head(configs.dims[-1])\\n\",\r\n        \"\\n\",\r\n        \"    def forward(self, x):  # x: [B, T, C]\\n\",\r\n        \"        if self.revin:\\n\",\r\n        \"            x = self.revin(x, 'norm')\\n\",\r\n        \"        if self.decomp:\\n\",\r\n        \"            x, _ = self.decomp(x)\\n\",\r\n        \"        x = x.permute(0, 2, 1)  # [B, C, T]\\n\",\r\n        \"        for conv, norm in zip(self.conv_layers, self.norm_layers):\\n\",\r\n        \"            x = conv(x)\\n\",\r\n        \"            x = norm(x)\\n\",\r\n        \"            x = F.relu(x)\\n\",\r\n        \"        out = self.head(x)  # [B, T]\\n\",\r\n        \"        return out\\n\",\r\n        \"\\n\",\r\n        \"# --- Config 클래스 ---\\n\",\r\n        \"class Configs:\\n\",\r\n        \"    def __init__(self, enc_in):\\n\",\r\n        \"        self.enc_in = enc_in\\n\",\r\n        \"        self.dims = [8,16, 32]\\n\",\r\n        \"        self.large_size = [5, 5, 3]\\n\",\r\n        \"        self.small_size = [5, 3, 3]\\n\",\r\n        \"        self.small_kernel_merged = False\\n\",\r\n        \"        self.dropout = 0.1\\n\",\r\n        \"        self.head_dropout = 0.2\\n\",\r\n        \"        self.revin = True\\n\",\r\n        \"        self.affine = True\\n\",\r\n        \"        self.decomposition = True\\n\",\r\n        \"        self.kernel_size = 25\\n\"\r\n      ],\r\n      \"metadata\": {\r\n        \"id\": \"SGY079rGizbs\"\r\n      },\r\n      \"execution_count\": 72,\r\n      \"outputs\": []\r\n    },\r\n    {\r\n      \"cell_type\": \"markdown\",\r\n      \"source\": [\r\n        \"###학습 및 OPTUNA\"\r\n      ],\r\n      \"metadata\": {\r\n        \"id\": \"LyXr4lYwuEJW\"\r\n      }\r\n    },\r\n    {\r\n      \"cell_type\": \"code\",\r\n      \"source\": [\r\n        \"import matplotlib.pyplot as plt\\n\",\r\n        \"from sklearn.metrics import f1_score # Import f1_score\\n\",\r\n        \"def train_model(model, X_train, y_train, X_val, y_val, epochs=30, lr=1e-3,pos_weight=None):\\n\",\r\n        \"    optimizer = torch.optim.Adam(model.parameters(), lr=lr)\\n\",\r\n        \"    #criterion = nn.BCEWithLogitsLoss()\\n\",\r\n        \"    criterion = nn.BCEWithLogitsLoss(pos_weight=pos_weight) if pos_weight is not None else nn.BCEWithLogitsLoss()\\n\",\r\n        \"    train_losses, val_losses, val_accs = [], [], []\\n\",\r\n        \"\\n\",\r\n        \"    for epoch in range(epochs):\\n\",\r\n        \"        # 1. 학습 단계\\n\",\r\n        \"        model.train()\\n\",\r\n        \"        optimizer.zero_grad()\\n\",\r\n        \"        train_output = model(X_train).squeeze(0)  # → [T]\\n\",\r\n        \"        train_output = train_output.detach().clone().requires_grad_(True)  # detach + clone + requires_grad 복구\\n\",\r\n        \"        loss = criterion(train_output, y_train.float())\\n\",\r\n        \"        loss.backward()\\n\",\r\n        \"        optimizer.step()\\n\",\r\n        \"\\n\",\r\n        \"        train_losses.append(loss.item())\\n\",\r\n        \"\\n\",\r\n        \"        # 2. 검증 단계\\n\",\r\n        \"        model.eval()\\n\",\r\n        \"        with torch.no_grad():\\n\",\r\n        \"            val_output = model(X_val).squeeze(0)\\n\",\r\n        \"            val_loss = criterion(val_output, y_val.float()).item()\\n\",\r\n        \"            pred = (torch.sigmoid(val_output) > 0.5).int()\\n\",\r\n        \"            acc = (pred == y_val).float().mean().item()\\n\",\r\n        \"\\n\",\r\n        \"        val_losses.append(val_loss)\\n\",\r\n        \"        val_accs.append(acc)\\n\",\r\n        \"\\n\",\r\n        \"        print(f\\\"[{epoch+1}/{epochs}] Train Loss: {loss.item():.4f}, Val Loss: {val_loss:.4f}, Val Acc: {acc:.4f}\\\")\\n\",\r\n        \"\\n\",\r\n        \"    return train_losses, val_losses, val_accs\"\r\n      ],\r\n      \"metadata\": {\r\n        \"collapsed\": true,\r\n        \"id\": \"QQZdcTXzmrGn\"\r\n      },\r\n      \"execution_count\": 98,\r\n      \"outputs\": []\r\n    },\r\n    {\r\n      \"cell_type\": \"code\",\r\n      \"source\": [\r\n        \"# Config class 내부를 trial 기반으로 생성\\n\",\r\n        \"def objective(trial):\\n\",\r\n        \"    dims = [\\n\",\r\n        \"        trial.suggest_categorical(\\\"dim1\\\", [8, 16, 32, 64]),\\n\",\r\n        \"        trial.suggest_categorical(\\\"dim2\\\", [16, 32, 64, 128]),\\n\",\r\n        \"        trial.suggest_categorical(\\\"dim3\\\", [32, 64, 128, 256])\\n\",\r\n        \"    ]\\n\",\r\n        \"    large_size = [\\n\",\r\n        \"        trial.suggest_categorical(\\\"k1\\\", [3, 5, 7, 9, 11]),\\n\",\r\n        \"        trial.suggest_categorical(\\\"k2\\\", [3, 5, 7, 9]),\\n\",\r\n        \"        trial.suggest_categorical(\\\"k3\\\", [3, 5, 7])\\n\",\r\n        \"    ]\\n\",\r\n        \"    small_size = [\\n\",\r\n        \"        trial.suggest_categorical(\\\"s1\\\", [1, 3, 5]),\\n\",\r\n        \"        trial.suggest_categorical(\\\"s2\\\", [1, 3]),\\n\",\r\n        \"        trial.suggest_categorical(\\\"s3\\\", [1, 3])\\n\",\r\n        \"    ]\\n\",\r\n        \"    dropout = trial.suggest_float(\\\"dropout\\\", 0.0, 0.3)\\n\",\r\n        \"    head_dropout = trial.suggest_float(\\\"head_dropout\\\", 0.0, 0.3)\\n\",\r\n        \"    kernel_size = trial.suggest_categorical(\\\"kernel_size\\\", [5, 11, 15, 25, 31])\\n\",\r\n        \"    decomposition = trial.suggest_categorical(\\\"decomposition\\\", [True, False])\\n\",\r\n        \"    revin = trial.suggest_categorical(\\\"revin\\\", [True, False])\\n\",\r\n        \"    affine = trial.suggest_categorical(\\\"affine\\\", [True, False])\\n\",\r\n        \"\\n\",\r\n        \"    class TrialConfig:\\n\",\r\n        \"        def __init__(self):\\n\",\r\n        \"            self.enc_in = X_train.shape[2]\\n\",\r\n        \"            self.dims = dims\\n\",\r\n        \"            self.large_size = large_size\\n\",\r\n        \"            self.small_size = small_size\\n\",\r\n        \"            self.small_kernel_merged = False\\n\",\r\n        \"            self.dropout = dropout\\n\",\r\n        \"            self.head_dropout = head_dropout\\n\",\r\n        \"            self.revin = revin\\n\",\r\n        \"            self.affine = affine\\n\",\r\n        \"            self.decomposition = decomposition\\n\",\r\n        \"            self.kernel_size = kernel_size\\n\",\r\n        \"\\n\",\r\n        \"    model = ModernTCN(TrialConfig())\\n\",\r\n        \"    #_, _, val_accs = train_model(model, X_train, y_train, X_val, y_val, epochs=15)\\n\",\r\n        \"    #return max(val_accs)  # Accuracy 기준 최적화\\n\",\r\n        \"\\n\",\r\n        \"   #pos_weight 계산 (불균형 데이터 보정)\\n\",\r\n        \"    pos_weight = torch.tensor([(y_train == 0).sum() / (y_train == 1).sum()]).to(y_train.device)\\n\",\r\n        \"\\n\",\r\n        \"    #모델 학습 (loss에 pos_weight 반영됨)\\n\",\r\n        \"    train_model(model, X_train, y_train, X_val, y_val, epochs=15, pos_weight=pos_weight)\\n\",\r\n        \"\\n\",\r\n        \"    model.eval()\\n\",\r\n        \"    with torch.no_grad():\\n\",\r\n        \"        pred = model(X_val).squeeze(0)\\n\",\r\n        \"        probs = torch.sigmoid(pred).cpu().numpy()\\n\",\r\n        \"        preds = (probs > 0.5).astype(int)\\n\",\r\n        \"\\n\",\r\n        \"    y_true = y_val.cpu().numpy()\\n\",\r\n        \"    return f1_score(y_true, preds)\\n\",\r\n        \"\\n\",\r\n        \"\\n\",\r\n        \"# Optuna 튜닝 실행\\n\",\r\n        \"study = optuna.create_study(direction=\\\"maximize\\\")\\n\",\r\n        \"study.optimize(objective, n_trials=50)\\n\",\r\n        \"\\n\",\r\n        \"# 최적 하이퍼파라미터 출력\\n\",\r\n        \"print(\\\"✅ Best Trial:\\\")\\n\",\r\n        \"print(study.best_trial.params)\\n\",\r\n        \"best_params = study.best_trial.params\"\r\n      ],\r\n      \"metadata\": {\r\n        \"colab\": {\r\n          \"base_uri\": \"https://localhost:8080/\"\r\n        },\r\n        \"id\": \"UzU3cvtAz1Bl\",\r\n        \"outputId\": \"95b76a16-5918-43f7-84af-b493f4c42865\"\r\n      },\r\n      \"execution_count\": 99,\r\n      \"outputs\": [\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:36,190] A new study created in memory with name: no-name-3f4b9f02-361f-4454-b190-641dec04d8a3\\n\",\r\n            \"[I 2025-05-05 09:48:36,390] Trial 0 finished with value: 0.41014799154334036 and parameters: {'dim1': 8, 'dim2': 32, 'dim3': 128, 'k1': 9, 'k2': 7, 'k3': 3, 's1': 1, 's2': 1, 's3': 1, 'dropout': 0.163185304613254, 'head_dropout': 0.07072651447104997, 'kernel_size': 5, 'decomposition': False, 'revin': False, 'affine': False}. Best is trial 0 with value: 0.41014799154334036.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[1/15] Train Loss: 0.7982, Val Loss: 0.8268, Val Acc: 0.5373\\n\",\r\n            \"[2/15] Train Loss: 0.7982, Val Loss: 0.7984, Val Acc: 0.5282\\n\",\r\n            \"[3/15] Train Loss: 0.7982, Val Loss: 0.7901, Val Acc: 0.5246\\n\",\r\n            \"[4/15] Train Loss: 0.7982, Val Loss: 0.7863, Val Acc: 0.5100\\n\",\r\n            \"[5/15] Train Loss: 0.7982, Val Loss: 0.7843, Val Acc: 0.4973\\n\",\r\n            \"[6/15] Train Loss: 0.7982, Val Loss: 0.7832, Val Acc: 0.4973\\n\",\r\n            \"[7/15] Train Loss: 0.7982, Val Loss: 0.7828, Val Acc: 0.4863\\n\",\r\n            \"[8/15] Train Loss: 0.7982, Val Loss: 0.7827, Val Acc: 0.4845\\n\",\r\n            \"[9/15] Train Loss: 0.7982, Val Loss: 0.7826, Val Acc: 0.4918\\n\",\r\n            \"[10/15] Train Loss: 0.7982, Val Loss: 0.7828, Val Acc: 0.4991\\n\",\r\n            \"[11/15] Train Loss: 0.7982, Val Loss: 0.7832, Val Acc: 0.4954\\n\",\r\n            \"[12/15] Train Loss: 0.7982, Val Loss: 0.7837, Val Acc: 0.4936\\n\",\r\n            \"[13/15] Train Loss: 0.7982, Val Loss: 0.7843, Val Acc: 0.4918\\n\",\r\n            \"[14/15] Train Loss: 0.7982, Val Loss: 0.7850, Val Acc: 0.4936\\n\",\r\n            \"[15/15] Train Loss: 0.7982, Val Loss: 0.7859, Val Acc: 0.4918\\n\",\r\n            \"[1/15] Train Loss: 0.7986, Val Loss: 0.8743, Val Acc: 0.5738\\n\",\r\n            \"[2/15] Train Loss: 0.7986, Val Loss: 0.8244, Val Acc: 0.5610\\n\",\r\n            \"[3/15] Train Loss: 0.7986, Val Loss: 0.8087, Val Acc: 0.5574\\n\",\r\n            \"[4/15] Train Loss: 0.7986, Val Loss: 0.8017, Val Acc: 0.5574\\n\",\r\n            \"[5/15] Train Loss: 0.7986, Val Loss: 0.7983, Val Acc: 0.5592\\n\",\r\n            \"[6/15] Train Loss: 0.7986, Val Loss: 0.7965, Val Acc: 0.5592\\n\",\r\n            \"[7/15] Train Loss: 0.7986, Val Loss: 0.7957, Val Acc: 0.5592\\n\",\r\n            \"[8/15] Train Loss: 0.7986, Val Loss: 0.7956, Val Acc: 0.5592\\n\",\r\n            \"[9/15] Train Loss: 0.7986, Val Loss: 0.7959, Val Acc: 0.5610\\n\",\r\n            \"[10/15] Train Loss: 0.7986, Val Loss: 0.7966, Val Acc: 0.5610\\n\",\r\n            \"[11/15] Train Loss: 0.7986, Val Loss: 0.7977, Val Acc: 0.5610\\n\",\r\n            \"[12/15] Train Loss: 0.7986, Val Loss: 0.7990, Val Acc: 0.5592\\n\",\r\n            \"[13/15] Train Loss: 0.7986, Val Loss: 0.8006, Val Acc: 0.5610\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:36,663] Trial 1 finished with value: 0.1111111111111111 and parameters: {'dim1': 64, 'dim2': 32, 'dim3': 32, 'k1': 5, 'k2': 5, 'k3': 7, 's1': 5, 's2': 3, 's3': 3, 'dropout': 0.008354699057682113, 'head_dropout': 0.2324016107426237, 'kernel_size': 31, 'decomposition': False, 'revin': False, 'affine': True}. Best is trial 0 with value: 0.41014799154334036.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[14/15] Train Loss: 0.7986, Val Loss: 0.8025, Val Acc: 0.5610\\n\",\r\n            \"[15/15] Train Loss: 0.7986, Val Loss: 0.8048, Val Acc: 0.5628\\n\",\r\n            \"[1/15] Train Loss: 0.7877, Val Loss: 0.7852, Val Acc: 0.5319\\n\",\r\n            \"[2/15] Train Loss: 0.7877, Val Loss: 0.7790, Val Acc: 0.5137\\n\",\r\n            \"[3/15] Train Loss: 0.7877, Val Loss: 0.7771, Val Acc: 0.5264\\n\",\r\n            \"[4/15] Train Loss: 0.7877, Val Loss: 0.7763, Val Acc: 0.5209\\n\",\r\n            \"[5/15] Train Loss: 0.7877, Val Loss: 0.7759, Val Acc: 0.5228\\n\",\r\n            \"[6/15] Train Loss: 0.7877, Val Loss: 0.7757, Val Acc: 0.5301\\n\",\r\n            \"[7/15] Train Loss: 0.7877, Val Loss: 0.7756, Val Acc: 0.5209\\n\",\r\n            \"[8/15] Train Loss: 0.7877, Val Loss: 0.7756, Val Acc: 0.5228\\n\",\r\n            \"[9/15] Train Loss: 0.7877, Val Loss: 0.7757, Val Acc: 0.5301\\n\",\r\n            \"[10/15] Train Loss: 0.7877, Val Loss: 0.7757, Val Acc: 0.5319\\n\",\r\n            \"[11/15] Train Loss: 0.7877, Val Loss: 0.7757, Val Acc: 0.5410\\n\",\r\n            \"[12/15] Train Loss: 0.7877, Val Loss: 0.7759, Val Acc: 0.5355\\n\",\r\n            \"[13/15] Train Loss: 0.7877, Val Loss: 0.7761, Val Acc: 0.5319\\n\",\r\n            \"[14/15] Train Loss: 0.7877, Val Loss: 0.7765, Val Acc: 0.5264\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:37,552] Trial 2 finished with value: 0.4 and parameters: {'dim1': 16, 'dim2': 128, 'dim3': 256, 'k1': 5, 'k2': 5, 'k3': 5, 's1': 5, 's2': 3, 's3': 1, 'dropout': 0.2735150744945485, 'head_dropout': 0.16496355396833284, 'kernel_size': 5, 'decomposition': False, 'revin': False, 'affine': False}. Best is trial 0 with value: 0.41014799154334036.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[15/15] Train Loss: 0.7877, Val Loss: 0.7770, Val Acc: 0.5246\\n\",\r\n            \"[1/15] Train Loss: 0.7817, Val Loss: 1.0330, Val Acc: 0.4262\\n\",\r\n            \"[2/15] Train Loss: 0.7817, Val Loss: 0.9172, Val Acc: 0.4281\\n\",\r\n            \"[3/15] Train Loss: 0.7817, Val Loss: 0.8759, Val Acc: 0.4281\\n\",\r\n            \"[4/15] Train Loss: 0.7817, Val Loss: 0.8555, Val Acc: 0.4390\\n\",\r\n            \"[5/15] Train Loss: 0.7817, Val Loss: 0.8441, Val Acc: 0.4390\\n\",\r\n            \"[6/15] Train Loss: 0.7817, Val Loss: 0.8372, Val Acc: 0.4353\\n\",\r\n            \"[7/15] Train Loss: 0.7817, Val Loss: 0.8329, Val Acc: 0.4372\\n\",\r\n            \"[8/15] Train Loss: 0.7817, Val Loss: 0.8302, Val Acc: 0.4536\\n\",\r\n            \"[9/15] Train Loss: 0.7817, Val Loss: 0.8287, Val Acc: 0.4554\\n\",\r\n            \"[10/15] Train Loss: 0.7817, Val Loss: 0.8281, Val Acc: 0.4536\\n\",\r\n            \"[11/15] Train Loss: 0.7817, Val Loss: 0.8280, Val Acc: 0.4536\\n\",\r\n            \"[12/15] Train Loss: 0.7817, Val Loss: 0.8284, Val Acc: 0.4554\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:38,039] Trial 3 finished with value: 0.42994241842610365 and parameters: {'dim1': 32, 'dim2': 32, 'dim3': 256, 'k1': 5, 'k2': 9, 'k3': 3, 's1': 3, 's2': 1, 's3': 3, 'dropout': 0.05755296075005734, 'head_dropout': 0.10656704741835861, 'kernel_size': 11, 'decomposition': True, 'revin': False, 'affine': False}. Best is trial 3 with value: 0.42994241842610365.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[13/15] Train Loss: 0.7817, Val Loss: 0.8292, Val Acc: 0.4627\\n\",\r\n            \"[14/15] Train Loss: 0.7817, Val Loss: 0.8303, Val Acc: 0.4572\\n\",\r\n            \"[15/15] Train Loss: 0.7817, Val Loss: 0.8317, Val Acc: 0.4590\\n\",\r\n            \"[1/15] Train Loss: 0.7887, Val Loss: 0.9329, Val Acc: 0.4335\\n\",\r\n            \"[2/15] Train Loss: 0.7887, Val Loss: 0.8517, Val Acc: 0.4335\\n\",\r\n            \"[3/15] Train Loss: 0.7887, Val Loss: 0.8259, Val Acc: 0.4335\\n\",\r\n            \"[4/15] Train Loss: 0.7887, Val Loss: 0.8143, Val Acc: 0.4244\\n\",\r\n            \"[5/15] Train Loss: 0.7887, Val Loss: 0.8083, Val Acc: 0.4171\\n\",\r\n            \"[6/15] Train Loss: 0.7887, Val Loss: 0.8049, Val Acc: 0.4135\\n\",\r\n            \"[7/15] Train Loss: 0.7887, Val Loss: 0.8030, Val Acc: 0.4317\\n\",\r\n            \"[8/15] Train Loss: 0.7887, Val Loss: 0.8019, Val Acc: 0.4317\\n\",\r\n            \"[9/15] Train Loss: 0.7887, Val Loss: 0.8016, Val Acc: 0.4426\\n\",\r\n            \"[10/15] Train Loss: 0.7887, Val Loss: 0.8019, Val Acc: 0.4444\\n\",\r\n            \"[11/15] Train Loss: 0.7887, Val Loss: 0.8024, Val Acc: 0.4463\\n\",\r\n            \"[12/15] Train Loss: 0.7887, Val Loss: 0.8032, Val Acc: 0.4554\\n\",\r\n            \"[13/15] Train Loss: 0.7887, Val Loss: 0.8044, Val Acc: 0.4536\\n\",\r\n            \"[14/15] Train Loss: 0.7887, Val Loss: 0.8058, Val Acc: 0.4517\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:39,055] Trial 4 finished with value: 0.488135593220339 and parameters: {'dim1': 8, 'dim2': 128, 'dim3': 256, 'k1': 9, 'k2': 9, 'k3': 5, 's1': 1, 's2': 3, 's3': 3, 'dropout': 0.1553895048760333, 'head_dropout': 0.17488347216364408, 'kernel_size': 5, 'decomposition': False, 'revin': False, 'affine': True}. Best is trial 4 with value: 0.488135593220339.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[15/15] Train Loss: 0.7887, Val Loss: 0.8072, Val Acc: 0.4499\\n\",\r\n            \"[1/15] Train Loss: 0.7832, Val Loss: 0.9006, Val Acc: 0.4572\\n\",\r\n            \"[2/15] Train Loss: 0.7832, Val Loss: 0.8414, Val Acc: 0.4517\\n\",\r\n            \"[3/15] Train Loss: 0.7832, Val Loss: 0.8223, Val Acc: 0.4499\\n\",\r\n            \"[4/15] Train Loss: 0.7832, Val Loss: 0.8138, Val Acc: 0.4463\\n\",\r\n            \"[5/15] Train Loss: 0.7832, Val Loss: 0.8095, Val Acc: 0.4481\\n\",\r\n            \"[6/15] Train Loss: 0.7832, Val Loss: 0.8073, Val Acc: 0.4444\\n\",\r\n            \"[7/15] Train Loss: 0.7832, Val Loss: 0.8062, Val Acc: 0.4426\\n\",\r\n            \"[8/15] Train Loss: 0.7832, Val Loss: 0.8059, Val Acc: 0.4426\\n\",\r\n            \"[9/15] Train Loss: 0.7832, Val Loss: 0.8062, Val Acc: 0.4372\\n\",\r\n            \"[10/15] Train Loss: 0.7832, Val Loss: 0.8070, Val Acc: 0.4335\\n\",\r\n            \"[11/15] Train Loss: 0.7832, Val Loss: 0.8080, Val Acc: 0.4299\\n\",\r\n            \"[12/15] Train Loss: 0.7832, Val Loss: 0.8095, Val Acc: 0.4281\\n\",\r\n            \"[13/15] Train Loss: 0.7832, Val Loss: 0.8112, Val Acc: 0.4262\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:39,814] Trial 5 finished with value: 0.5631067961165048 and parameters: {'dim1': 64, 'dim2': 128, 'dim3': 256, 'k1': 3, 'k2': 9, 'k3': 5, 's1': 1, 's2': 1, 's3': 1, 'dropout': 0.2520036240043335, 'head_dropout': 0.26443356829754716, 'kernel_size': 25, 'decomposition': False, 'revin': False, 'affine': False}. Best is trial 5 with value: 0.5631067961165048.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[14/15] Train Loss: 0.7832, Val Loss: 0.8131, Val Acc: 0.4244\\n\",\r\n            \"[15/15] Train Loss: 0.7832, Val Loss: 0.8152, Val Acc: 0.4262\\n\",\r\n            \"[1/15] Train Loss: 0.7894, Val Loss: 0.9113, Val Acc: 0.4627\\n\",\r\n            \"[2/15] Train Loss: 0.7894, Val Loss: 0.8379, Val Acc: 0.4663\\n\",\r\n            \"[3/15] Train Loss: 0.7894, Val Loss: 0.8143, Val Acc: 0.4754\\n\",\r\n            \"[4/15] Train Loss: 0.7894, Val Loss: 0.8034, Val Acc: 0.4754\\n\",\r\n            \"[5/15] Train Loss: 0.7894, Val Loss: 0.7976, Val Acc: 0.4827\\n\",\r\n            \"[6/15] Train Loss: 0.7894, Val Loss: 0.7943, Val Acc: 0.4900\\n\",\r\n            \"[7/15] Train Loss: 0.7894, Val Loss: 0.7923, Val Acc: 0.4918\\n\",\r\n            \"[8/15] Train Loss: 0.7894, Val Loss: 0.7912, Val Acc: 0.4936\\n\",\r\n            \"[9/15] Train Loss: 0.7894, Val Loss: 0.7907, Val Acc: 0.4918\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:40,054] Trial 6 finished with value: 0.5517241379310345 and parameters: {'dim1': 64, 'dim2': 16, 'dim3': 128, 'k1': 9, 'k2': 5, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.2365025611661018, 'head_dropout': 0.2400102539100597, 'kernel_size': 25, 'decomposition': True, 'revin': False, 'affine': False}. Best is trial 5 with value: 0.5631067961165048.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[10/15] Train Loss: 0.7894, Val Loss: 0.7906, Val Acc: 0.5027\\n\",\r\n            \"[11/15] Train Loss: 0.7894, Val Loss: 0.7908, Val Acc: 0.5027\\n\",\r\n            \"[12/15] Train Loss: 0.7894, Val Loss: 0.7913, Val Acc: 0.5009\\n\",\r\n            \"[13/15] Train Loss: 0.7894, Val Loss: 0.7919, Val Acc: 0.5027\\n\",\r\n            \"[14/15] Train Loss: 0.7894, Val Loss: 0.7928, Val Acc: 0.5009\\n\",\r\n            \"[15/15] Train Loss: 0.7894, Val Loss: 0.7938, Val Acc: 0.5027\\n\",\r\n            \"[1/15] Train Loss: 0.8246, Val Loss: 0.7798, Val Acc: 0.4426\\n\",\r\n            \"[2/15] Train Loss: 0.8246, Val Loss: 0.7790, Val Acc: 0.4426\\n\",\r\n            \"[3/15] Train Loss: 0.8246, Val Loss: 0.7786, Val Acc: 0.4426\\n\",\r\n            \"[4/15] Train Loss: 0.8246, Val Loss: 0.7783, Val Acc: 0.4444\\n\",\r\n            \"[5/15] Train Loss: 0.8246, Val Loss: 0.7781, Val Acc: 0.4481\\n\",\r\n            \"[6/15] Train Loss: 0.8246, Val Loss: 0.7781, Val Acc: 0.4499\\n\",\r\n            \"[7/15] Train Loss: 0.8246, Val Loss: 0.7781, Val Acc: 0.4517\\n\",\r\n            \"[8/15] Train Loss: 0.8246, Val Loss: 0.7782, Val Acc: 0.4499\\n\",\r\n            \"[9/15] Train Loss: 0.8246, Val Loss: 0.7784, Val Acc: 0.4499\\n\",\r\n            \"[10/15] Train Loss: 0.8246, Val Loss: 0.7786, Val Acc: 0.4481\\n\",\r\n            \"[11/15] Train Loss: 0.8246, Val Loss: 0.7790, Val Acc: 0.4481\\n\",\r\n            \"[12/15] Train Loss: 0.8246, Val Loss: 0.7795, Val Acc: 0.4499\\n\",\r\n            \"[13/15] Train Loss: 0.8246, Val Loss: 0.7800, Val Acc: 0.4499\\n\",\r\n            \"[14/15] Train Loss: 0.8246, Val Loss: 0.7807, Val Acc: 0.4554\\n\",\r\n            \"[15/15] Train Loss: 0.8246, Val Loss: 0.7815, Val Acc: 0.4572\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:40,175] Trial 7 finished with value: 0.6099476439790575 and parameters: {'dim1': 8, 'dim2': 16, 'dim3': 32, 'k1': 7, 'k2': 5, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.23580595312520866, 'head_dropout': 0.2414528024642886, 'kernel_size': 31, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\\n\",\r\n            \"[I 2025-05-05 09:48:40,365] Trial 8 finished with value: 0.48722986247544203 and parameters: {'dim1': 16, 'dim2': 16, 'dim3': 128, 'k1': 7, 'k2': 9, 'k3': 3, 's1': 3, 's2': 1, 's3': 1, 'dropout': 0.061880911129755356, 'head_dropout': 0.0363608624795552, 'kernel_size': 11, 'decomposition': False, 'revin': True, 'affine': True}. Best is trial 7 with value: 0.6099476439790575.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[1/15] Train Loss: 0.7806, Val Loss: 0.7743, Val Acc: 0.5574\\n\",\r\n            \"[2/15] Train Loss: 0.7806, Val Loss: 0.7743, Val Acc: 0.5501\\n\",\r\n            \"[3/15] Train Loss: 0.7806, Val Loss: 0.7743, Val Acc: 0.5464\\n\",\r\n            \"[4/15] Train Loss: 0.7806, Val Loss: 0.7743, Val Acc: 0.5556\\n\",\r\n            \"[5/15] Train Loss: 0.7806, Val Loss: 0.7742, Val Acc: 0.5428\\n\",\r\n            \"[6/15] Train Loss: 0.7806, Val Loss: 0.7742, Val Acc: 0.5428\\n\",\r\n            \"[7/15] Train Loss: 0.7806, Val Loss: 0.7741, Val Acc: 0.5355\\n\",\r\n            \"[8/15] Train Loss: 0.7806, Val Loss: 0.7741, Val Acc: 0.5373\\n\",\r\n            \"[9/15] Train Loss: 0.7806, Val Loss: 0.7741, Val Acc: 0.5319\\n\",\r\n            \"[10/15] Train Loss: 0.7806, Val Loss: 0.7741, Val Acc: 0.5337\\n\",\r\n            \"[11/15] Train Loss: 0.7806, Val Loss: 0.7742, Val Acc: 0.5355\\n\",\r\n            \"[12/15] Train Loss: 0.7806, Val Loss: 0.7742, Val Acc: 0.5301\\n\",\r\n            \"[13/15] Train Loss: 0.7806, Val Loss: 0.7743, Val Acc: 0.5228\\n\",\r\n            \"[14/15] Train Loss: 0.7806, Val Loss: 0.7745, Val Acc: 0.5246\\n\",\r\n            \"[15/15] Train Loss: 0.7806, Val Loss: 0.7746, Val Acc: 0.5246\\n\",\r\n            \"[1/15] Train Loss: 0.7896, Val Loss: 0.7809, Val Acc: 0.4171\\n\",\r\n            \"[2/15] Train Loss: 0.7896, Val Loss: 0.7808, Val Acc: 0.4262\\n\",\r\n            \"[3/15] Train Loss: 0.7896, Val Loss: 0.7808, Val Acc: 0.4098\\n\",\r\n            \"[4/15] Train Loss: 0.7896, Val Loss: 0.7808, Val Acc: 0.4062\\n\",\r\n            \"[5/15] Train Loss: 0.7896, Val Loss: 0.7811, Val Acc: 0.4044\\n\",\r\n            \"[6/15] Train Loss: 0.7896, Val Loss: 0.7815, Val Acc: 0.3971\\n\",\r\n            \"[7/15] Train Loss: 0.7896, Val Loss: 0.7820, Val Acc: 0.4044\\n\",\r\n            \"[8/15] Train Loss: 0.7896, Val Loss: 0.7825, Val Acc: 0.4007\\n\",\r\n            \"[9/15] Train Loss: 0.7896, Val Loss: 0.7832, Val Acc: 0.4007\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:40,750] Trial 9 finished with value: 0.4976958525345622 and parameters: {'dim1': 32, 'dim2': 32, 'dim3': 256, 'k1': 9, 'k2': 9, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.074742922120129, 'head_dropout': 0.21430487913366228, 'kernel_size': 11, 'decomposition': False, 'revin': True, 'affine': True}. Best is trial 7 with value: 0.6099476439790575.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[10/15] Train Loss: 0.7896, Val Loss: 0.7839, Val Acc: 0.3989\\n\",\r\n            \"[11/15] Train Loss: 0.7896, Val Loss: 0.7847, Val Acc: 0.3971\\n\",\r\n            \"[12/15] Train Loss: 0.7896, Val Loss: 0.7857, Val Acc: 0.3989\\n\",\r\n            \"[13/15] Train Loss: 0.7896, Val Loss: 0.7867, Val Acc: 0.3989\\n\",\r\n            \"[14/15] Train Loss: 0.7896, Val Loss: 0.7879, Val Acc: 0.4026\\n\",\r\n            \"[15/15] Train Loss: 0.7896, Val Loss: 0.7891, Val Acc: 0.4044\\n\",\r\n            \"[1/15] Train Loss: 0.7866, Val Loss: 0.7752, Val Acc: 0.5118\\n\",\r\n            \"[2/15] Train Loss: 0.7866, Val Loss: 0.7754, Val Acc: 0.5100\\n\",\r\n            \"[3/15] Train Loss: 0.7866, Val Loss: 0.7756, Val Acc: 0.5209\\n\",\r\n            \"[4/15] Train Loss: 0.7866, Val Loss: 0.7757, Val Acc: 0.5191\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:40,951] Trial 10 finished with value: 0.4475806451612903 and parameters: {'dim1': 8, 'dim2': 64, 'dim3': 32, 'k1': 7, 'k2': 3, 'k3': 7, 's1': 5, 's2': 3, 's3': 3, 'dropout': 0.1998044785613833, 'head_dropout': 0.29793674375176615, 'kernel_size': 31, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[5/15] Train Loss: 0.7866, Val Loss: 0.7758, Val Acc: 0.5191\\n\",\r\n            \"[6/15] Train Loss: 0.7866, Val Loss: 0.7759, Val Acc: 0.5155\\n\",\r\n            \"[7/15] Train Loss: 0.7866, Val Loss: 0.7761, Val Acc: 0.5064\\n\",\r\n            \"[8/15] Train Loss: 0.7866, Val Loss: 0.7763, Val Acc: 0.4991\\n\",\r\n            \"[9/15] Train Loss: 0.7866, Val Loss: 0.7766, Val Acc: 0.4882\\n\",\r\n            \"[10/15] Train Loss: 0.7866, Val Loss: 0.7769, Val Acc: 0.4991\\n\",\r\n            \"[11/15] Train Loss: 0.7866, Val Loss: 0.7772, Val Acc: 0.5009\\n\",\r\n            \"[12/15] Train Loss: 0.7866, Val Loss: 0.7776, Val Acc: 0.4954\\n\",\r\n            \"[13/15] Train Loss: 0.7866, Val Loss: 0.7780, Val Acc: 0.4991\\n\",\r\n            \"[14/15] Train Loss: 0.7866, Val Loss: 0.7785, Val Acc: 0.5027\\n\",\r\n            \"[15/15] Train Loss: 0.7866, Val Loss: 0.7790, Val Acc: 0.5009\\n\",\r\n            \"[1/15] Train Loss: 0.8067, Val Loss: 0.7768, Val Acc: 0.5319\\n\",\r\n            \"[2/15] Train Loss: 0.8067, Val Loss: 0.7770, Val Acc: 0.5264\\n\",\r\n            \"[3/15] Train Loss: 0.8067, Val Loss: 0.7772, Val Acc: 0.5155\\n\",\r\n            \"[4/15] Train Loss: 0.8067, Val Loss: 0.7773, Val Acc: 0.5082\\n\",\r\n            \"[5/15] Train Loss: 0.8067, Val Loss: 0.7775, Val Acc: 0.5155\\n\",\r\n            \"[6/15] Train Loss: 0.8067, Val Loss: 0.7778, Val Acc: 0.5173\\n\",\r\n            \"[7/15] Train Loss: 0.8067, Val Loss: 0.7781, Val Acc: 0.5173\\n\",\r\n            \"[8/15] Train Loss: 0.8067, Val Loss: 0.7785, Val Acc: 0.5228\\n\",\r\n            \"[9/15] Train Loss: 0.8067, Val Loss: 0.7789, Val Acc: 0.5301\\n\",\r\n            \"[10/15] Train Loss: 0.8067, Val Loss: 0.7795, Val Acc: 0.5301\\n\",\r\n            \"[11/15] Train Loss: 0.8067, Val Loss: 0.7800, Val Acc: 0.5282\\n\",\r\n            \"[12/15] Train Loss: 0.8067, Val Loss: 0.7807, Val Acc: 0.5282\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:41,307] Trial 11 finished with value: 0.17252396166134185 and parameters: {'dim1': 64, 'dim2': 128, 'dim3': 64, 'k1': 3, 'k2': 3, 'k3': 5, 's1': 1, 's2': 1, 's3': 1, 'dropout': 0.2798740120820043, 'head_dropout': 0.2901188534382275, 'kernel_size': 15, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\\n\",\r\n            \"[I 2025-05-05 09:48:41,447] Trial 12 finished with value: 0.5667752442996743 and parameters: {'dim1': 8, 'dim2': 16, 'dim3': 32, 'k1': 11, 'k2': 7, 'k3': 5, 's1': 1, 's2': 1, 's3': 1, 'dropout': 0.22098954675333138, 'head_dropout': 0.2627896340068866, 'kernel_size': 25, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[13/15] Train Loss: 0.8067, Val Loss: 0.7815, Val Acc: 0.5264\\n\",\r\n            \"[14/15] Train Loss: 0.8067, Val Loss: 0.7823, Val Acc: 0.5282\\n\",\r\n            \"[15/15] Train Loss: 0.8067, Val Loss: 0.7832, Val Acc: 0.5282\\n\",\r\n            \"[1/15] Train Loss: 0.8017, Val Loss: 0.7751, Val Acc: 0.4936\\n\",\r\n            \"[2/15] Train Loss: 0.8017, Val Loss: 0.7752, Val Acc: 0.4845\\n\",\r\n            \"[3/15] Train Loss: 0.8017, Val Loss: 0.7753, Val Acc: 0.4863\\n\",\r\n            \"[4/15] Train Loss: 0.8017, Val Loss: 0.7754, Val Acc: 0.4791\\n\",\r\n            \"[5/15] Train Loss: 0.8017, Val Loss: 0.7754, Val Acc: 0.4736\\n\",\r\n            \"[6/15] Train Loss: 0.8017, Val Loss: 0.7755, Val Acc: 0.4791\\n\",\r\n            \"[7/15] Train Loss: 0.8017, Val Loss: 0.7755, Val Acc: 0.4772\\n\",\r\n            \"[8/15] Train Loss: 0.8017, Val Loss: 0.7756, Val Acc: 0.4772\\n\",\r\n            \"[9/15] Train Loss: 0.8017, Val Loss: 0.7757, Val Acc: 0.4809\\n\",\r\n            \"[10/15] Train Loss: 0.8017, Val Loss: 0.7757, Val Acc: 0.4863\\n\",\r\n            \"[11/15] Train Loss: 0.8017, Val Loss: 0.7759, Val Acc: 0.4845\\n\",\r\n            \"[12/15] Train Loss: 0.8017, Val Loss: 0.7760, Val Acc: 0.4900\\n\",\r\n            \"[13/15] Train Loss: 0.8017, Val Loss: 0.7762, Val Acc: 0.5009\\n\",\r\n            \"[14/15] Train Loss: 0.8017, Val Loss: 0.7765, Val Acc: 0.5100\\n\",\r\n            \"[15/15] Train Loss: 0.8017, Val Loss: 0.7768, Val Acc: 0.5155\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:41,598] Trial 13 finished with value: 0.5427286356821589 and parameters: {'dim1': 8, 'dim2': 16, 'dim3': 32, 'k1': 11, 'k2': 7, 'k3': 5, 's1': 1, 's2': 1, 's3': 1, 'dropout': 0.20441912287088004, 'head_dropout': 0.20301466241281924, 'kernel_size': 31, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[1/15] Train Loss: 0.7859, Val Loss: 0.7762, Val Acc: 0.4517\\n\",\r\n            \"[2/15] Train Loss: 0.7859, Val Loss: 0.7763, Val Acc: 0.4444\\n\",\r\n            \"[3/15] Train Loss: 0.7859, Val Loss: 0.7763, Val Acc: 0.4517\\n\",\r\n            \"[4/15] Train Loss: 0.7859, Val Loss: 0.7762, Val Acc: 0.4572\\n\",\r\n            \"[5/15] Train Loss: 0.7859, Val Loss: 0.7761, Val Acc: 0.4608\\n\",\r\n            \"[6/15] Train Loss: 0.7859, Val Loss: 0.7761, Val Acc: 0.4608\\n\",\r\n            \"[7/15] Train Loss: 0.7859, Val Loss: 0.7761, Val Acc: 0.4590\\n\",\r\n            \"[8/15] Train Loss: 0.7859, Val Loss: 0.7761, Val Acc: 0.4572\\n\",\r\n            \"[9/15] Train Loss: 0.7859, Val Loss: 0.7760, Val Acc: 0.4536\\n\",\r\n            \"[10/15] Train Loss: 0.7859, Val Loss: 0.7761, Val Acc: 0.4627\\n\",\r\n            \"[11/15] Train Loss: 0.7859, Val Loss: 0.7761, Val Acc: 0.4517\\n\",\r\n            \"[12/15] Train Loss: 0.7859, Val Loss: 0.7762, Val Acc: 0.4463\\n\",\r\n            \"[13/15] Train Loss: 0.7859, Val Loss: 0.7764, Val Acc: 0.4481\\n\",\r\n            \"[14/15] Train Loss: 0.7859, Val Loss: 0.7767, Val Acc: 0.4499\\n\",\r\n            \"[15/15] Train Loss: 0.7859, Val Loss: 0.7770, Val Acc: 0.4444\\n\",\r\n            \"[1/15] Train Loss: 0.8034, Val Loss: 0.7776, Val Acc: 0.4444\\n\",\r\n            \"[2/15] Train Loss: 0.8034, Val Loss: 0.7775, Val Acc: 0.4390\\n\",\r\n            \"[3/15] Train Loss: 0.8034, Val Loss: 0.7774, Val Acc: 0.4463\\n\",\r\n            \"[4/15] Train Loss: 0.8034, Val Loss: 0.7775, Val Acc: 0.4463\\n\",\r\n            \"[5/15] Train Loss: 0.8034, Val Loss: 0.7776, Val Acc: 0.4444\\n\",\r\n            \"[6/15] Train Loss: 0.8034, Val Loss: 0.7778, Val Acc: 0.4426\\n\",\r\n            \"[7/15] Train Loss: 0.8034, Val Loss: 0.7780, Val Acc: 0.4335\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:41,740] Trial 14 finished with value: 0.5368731563421829 and parameters: {'dim1': 8, 'dim2': 16, 'dim3': 32, 'k1': 11, 'k2': 7, 'k3': 7, 's1': 3, 's2': 1, 's3': 1, 'dropout': 0.29953278141519113, 'head_dropout': 0.1211521487604992, 'kernel_size': 25, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[8/15] Train Loss: 0.8034, Val Loss: 0.7784, Val Acc: 0.4317\\n\",\r\n            \"[9/15] Train Loss: 0.8034, Val Loss: 0.7788, Val Acc: 0.4299\\n\",\r\n            \"[10/15] Train Loss: 0.8034, Val Loss: 0.7792, Val Acc: 0.4299\\n\",\r\n            \"[11/15] Train Loss: 0.8034, Val Loss: 0.7798, Val Acc: 0.4281\\n\",\r\n            \"[12/15] Train Loss: 0.8034, Val Loss: 0.7804, Val Acc: 0.4262\\n\",\r\n            \"[13/15] Train Loss: 0.8034, Val Loss: 0.7812, Val Acc: 0.4299\\n\",\r\n            \"[14/15] Train Loss: 0.8034, Val Loss: 0.7820, Val Acc: 0.4299\\n\",\r\n            \"[15/15] Train Loss: 0.8034, Val Loss: 0.7830, Val Acc: 0.4281\\n\",\r\n            \"[1/15] Train Loss: 0.7897, Val Loss: 0.7763, Val Acc: 0.4426\\n\",\r\n            \"[2/15] Train Loss: 0.7897, Val Loss: 0.7763, Val Acc: 0.4426\\n\",\r\n            \"[3/15] Train Loss: 0.7897, Val Loss: 0.7764, Val Acc: 0.4426\\n\",\r\n            \"[4/15] Train Loss: 0.7897, Val Loss: 0.7764, Val Acc: 0.4426\\n\",\r\n            \"[5/15] Train Loss: 0.7897, Val Loss: 0.7765, Val Acc: 0.4426\\n\",\r\n            \"[6/15] Train Loss: 0.7897, Val Loss: 0.7765, Val Acc: 0.4408\\n\",\r\n            \"[7/15] Train Loss: 0.7897, Val Loss: 0.7766, Val Acc: 0.4408\\n\",\r\n            \"[8/15] Train Loss: 0.7897, Val Loss: 0.7766, Val Acc: 0.4408\\n\",\r\n            \"[9/15] Train Loss: 0.7897, Val Loss: 0.7767, Val Acc: 0.4408\\n\",\r\n            \"[10/15] Train Loss: 0.7897, Val Loss: 0.7767, Val Acc: 0.4353\\n\",\r\n            \"[11/15] Train Loss: 0.7897, Val Loss: 0.7768, Val Acc: 0.4353\\n\",\r\n            \"[12/15] Train Loss: 0.7897, Val Loss: 0.7768, Val Acc: 0.4335\\n\",\r\n            \"[13/15] Train Loss: 0.7897, Val Loss: 0.7769, Val Acc: 0.4353\\n\",\r\n            \"[14/15] Train Loss: 0.7897, Val Loss: 0.7769, Val Acc: 0.4317\\n\",\r\n            \"[15/15] Train Loss: 0.7897, Val Loss: 0.7770, Val Acc: 0.4299\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:41,885] Trial 15 finished with value: 0.5929778933680104 and parameters: {'dim1': 8, 'dim2': 16, 'dim3': 32, 'k1': 11, 'k2': 7, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.20524155117571816, 'head_dropout': 0.2618789349827388, 'kernel_size': 15, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\\n\",\r\n            \"[I 2025-05-05 09:48:42,110] Trial 16 finished with value: 0.022988505747126436 and parameters: {'dim1': 8, 'dim2': 64, 'dim3': 64, 'k1': 7, 'k2': 5, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.12246560736604013, 'head_dropout': 0.18607763125748958, 'kernel_size': 15, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[1/15] Train Loss: 0.8059, Val Loss: 0.7780, Val Acc: 0.5519\\n\",\r\n            \"[2/15] Train Loss: 0.8059, Val Loss: 0.7782, Val Acc: 0.5446\\n\",\r\n            \"[3/15] Train Loss: 0.8059, Val Loss: 0.7784, Val Acc: 0.5410\\n\",\r\n            \"[4/15] Train Loss: 0.8059, Val Loss: 0.7787, Val Acc: 0.5410\\n\",\r\n            \"[5/15] Train Loss: 0.8059, Val Loss: 0.7791, Val Acc: 0.5428\\n\",\r\n            \"[6/15] Train Loss: 0.8059, Val Loss: 0.7795, Val Acc: 0.5428\\n\",\r\n            \"[7/15] Train Loss: 0.8059, Val Loss: 0.7799, Val Acc: 0.5428\\n\",\r\n            \"[8/15] Train Loss: 0.8059, Val Loss: 0.7805, Val Acc: 0.5428\\n\",\r\n            \"[9/15] Train Loss: 0.8059, Val Loss: 0.7811, Val Acc: 0.5428\\n\",\r\n            \"[10/15] Train Loss: 0.8059, Val Loss: 0.7818, Val Acc: 0.5410\\n\",\r\n            \"[11/15] Train Loss: 0.8059, Val Loss: 0.7826, Val Acc: 0.5410\\n\",\r\n            \"[12/15] Train Loss: 0.8059, Val Loss: 0.7835, Val Acc: 0.5392\\n\",\r\n            \"[13/15] Train Loss: 0.8059, Val Loss: 0.7844, Val Acc: 0.5373\\n\",\r\n            \"[14/15] Train Loss: 0.8059, Val Loss: 0.7855, Val Acc: 0.5373\\n\",\r\n            \"[15/15] Train Loss: 0.8059, Val Loss: 0.7866, Val Acc: 0.5355\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:42,255] Trial 17 finished with value: 0.05303030303030303 and parameters: {'dim1': 8, 'dim2': 16, 'dim3': 32, 'k1': 7, 'k2': 5, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.185805691444221, 'head_dropout': 0.1365979182657906, 'kernel_size': 15, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[1/15] Train Loss: 0.7945, Val Loss: 0.7782, Val Acc: 0.5537\\n\",\r\n            \"[2/15] Train Loss: 0.7945, Val Loss: 0.7780, Val Acc: 0.5519\\n\",\r\n            \"[3/15] Train Loss: 0.7945, Val Loss: 0.7779, Val Acc: 0.5537\\n\",\r\n            \"[4/15] Train Loss: 0.7945, Val Loss: 0.7780, Val Acc: 0.5537\\n\",\r\n            \"[5/15] Train Loss: 0.7945, Val Loss: 0.7781, Val Acc: 0.5519\\n\",\r\n            \"[6/15] Train Loss: 0.7945, Val Loss: 0.7784, Val Acc: 0.5537\\n\",\r\n            \"[7/15] Train Loss: 0.7945, Val Loss: 0.7787, Val Acc: 0.5537\\n\",\r\n            \"[8/15] Train Loss: 0.7945, Val Loss: 0.7791, Val Acc: 0.5537\\n\",\r\n            \"[9/15] Train Loss: 0.7945, Val Loss: 0.7795, Val Acc: 0.5519\\n\",\r\n            \"[10/15] Train Loss: 0.7945, Val Loss: 0.7800, Val Acc: 0.5537\\n\",\r\n            \"[11/15] Train Loss: 0.7945, Val Loss: 0.7806, Val Acc: 0.5519\\n\",\r\n            \"[12/15] Train Loss: 0.7945, Val Loss: 0.7812, Val Acc: 0.5464\\n\",\r\n            \"[13/15] Train Loss: 0.7945, Val Loss: 0.7819, Val Acc: 0.5446\\n\",\r\n            \"[14/15] Train Loss: 0.7945, Val Loss: 0.7827, Val Acc: 0.5446\\n\",\r\n            \"[15/15] Train Loss: 0.7945, Val Loss: 0.7835, Val Acc: 0.5446\\n\",\r\n            \"[1/15] Train Loss: 0.7945, Val Loss: 0.7749, Val Acc: 0.5282\\n\",\r\n            \"[2/15] Train Loss: 0.7945, Val Loss: 0.7749, Val Acc: 0.5392\\n\",\r\n            \"[3/15] Train Loss: 0.7945, Val Loss: 0.7749, Val Acc: 0.5501\\n\",\r\n            \"[4/15] Train Loss: 0.7945, Val Loss: 0.7749, Val Acc: 0.5556\\n\",\r\n            \"[5/15] Train Loss: 0.7945, Val Loss: 0.7750, Val Acc: 0.5592\\n\",\r\n            \"[6/15] Train Loss: 0.7945, Val Loss: 0.7751, Val Acc: 0.5592\\n\",\r\n            \"[7/15] Train Loss: 0.7945, Val Loss: 0.7752, Val Acc: 0.5610\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:42,418] Trial 18 finished with value: 0.16382252559726962 and parameters: {'dim1': 16, 'dim2': 16, 'dim3': 32, 'k1': 11, 'k2': 7, 'k3': 7, 's1': 5, 's2': 3, 's3': 3, 'dropout': 0.12153873846946578, 'head_dropout': 0.0040990885857982995, 'kernel_size': 15, 'decomposition': True, 'revin': True, 'affine': True}. Best is trial 7 with value: 0.6099476439790575.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[8/15] Train Loss: 0.7945, Val Loss: 0.7753, Val Acc: 0.5628\\n\",\r\n            \"[9/15] Train Loss: 0.7945, Val Loss: 0.7755, Val Acc: 0.5610\\n\",\r\n            \"[10/15] Train Loss: 0.7945, Val Loss: 0.7756, Val Acc: 0.5610\\n\",\r\n            \"[11/15] Train Loss: 0.7945, Val Loss: 0.7758, Val Acc: 0.5592\\n\",\r\n            \"[12/15] Train Loss: 0.7945, Val Loss: 0.7760, Val Acc: 0.5610\\n\",\r\n            \"[13/15] Train Loss: 0.7945, Val Loss: 0.7762, Val Acc: 0.5556\\n\",\r\n            \"[14/15] Train Loss: 0.7945, Val Loss: 0.7765, Val Acc: 0.5556\\n\",\r\n            \"[15/15] Train Loss: 0.7945, Val Loss: 0.7768, Val Acc: 0.5537\\n\",\r\n            \"[1/15] Train Loss: 0.7828, Val Loss: 0.7769, Val Acc: 0.5209\\n\",\r\n            \"[2/15] Train Loss: 0.7828, Val Loss: 0.7770, Val Acc: 0.5282\\n\",\r\n            \"[3/15] Train Loss: 0.7828, Val Loss: 0.7771, Val Acc: 0.5355\\n\",\r\n            \"[4/15] Train Loss: 0.7828, Val Loss: 0.7771, Val Acc: 0.5373\\n\",\r\n            \"[5/15] Train Loss: 0.7828, Val Loss: 0.7773, Val Acc: 0.5337\\n\",\r\n            \"[6/15] Train Loss: 0.7828, Val Loss: 0.7774, Val Acc: 0.5319\\n\",\r\n            \"[7/15] Train Loss: 0.7828, Val Loss: 0.7775, Val Acc: 0.5282\\n\",\r\n            \"[8/15] Train Loss: 0.7828, Val Loss: 0.7776, Val Acc: 0.5155\\n\",\r\n            \"[9/15] Train Loss: 0.7828, Val Loss: 0.7778, Val Acc: 0.5046\\n\",\r\n            \"[10/15] Train Loss: 0.7828, Val Loss: 0.7780, Val Acc: 0.4936\\n\",\r\n            \"[11/15] Train Loss: 0.7828, Val Loss: 0.7783, Val Acc: 0.4882\\n\",\r\n            \"[12/15] Train Loss: 0.7828, Val Loss: 0.7787, Val Acc: 0.4809\\n\",\r\n            \"[13/15] Train Loss: 0.7828, Val Loss: 0.7791, Val Acc: 0.4718\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:42,584] Trial 19 finished with value: 0.35665914221218964 and parameters: {'dim1': 32, 'dim2': 16, 'dim3': 32, 'k1': 7, 'k2': 3, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.24450751860038195, 'head_dropout': 0.2574808942189673, 'kernel_size': 31, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[14/15] Train Loss: 0.7828, Val Loss: 0.7796, Val Acc: 0.4754\\n\",\r\n            \"[15/15] Train Loss: 0.7828, Val Loss: 0.7801, Val Acc: 0.4809\\n\",\r\n            \"[1/15] Train Loss: 0.7863, Val Loss: 0.7738, Val Acc: 0.4608\\n\",\r\n            \"[2/15] Train Loss: 0.7863, Val Loss: 0.7739, Val Acc: 0.4572\\n\",\r\n            \"[3/15] Train Loss: 0.7863, Val Loss: 0.7740, Val Acc: 0.4608\\n\",\r\n            \"[4/15] Train Loss: 0.7863, Val Loss: 0.7741, Val Acc: 0.4663\\n\",\r\n            \"[5/15] Train Loss: 0.7863, Val Loss: 0.7742, Val Acc: 0.4663\\n\",\r\n            \"[6/15] Train Loss: 0.7863, Val Loss: 0.7743, Val Acc: 0.4608\\n\",\r\n            \"[7/15] Train Loss: 0.7863, Val Loss: 0.7744, Val Acc: 0.4681\\n\",\r\n            \"[8/15] Train Loss: 0.7863, Val Loss: 0.7744, Val Acc: 0.4791\\n\",\r\n            \"[9/15] Train Loss: 0.7863, Val Loss: 0.7744, Val Acc: 0.4791\\n\",\r\n            \"[10/15] Train Loss: 0.7863, Val Loss: 0.7744, Val Acc: 0.4791\\n\",\r\n            \"[11/15] Train Loss: 0.7863, Val Loss: 0.7744, Val Acc: 0.4736\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:42,813] Trial 20 finished with value: 0.5577812018489985 and parameters: {'dim1': 8, 'dim2': 64, 'dim3': 64, 'k1': 11, 'k2': 5, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.12296957714694715, 'head_dropout': 0.21705689941827305, 'kernel_size': 15, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\\n\",\r\n            \"[I 2025-05-05 09:48:42,950] Trial 21 finished with value: 0.42731277533039647 and parameters: {'dim1': 8, 'dim2': 16, 'dim3': 32, 'k1': 11, 'k2': 7, 'k3': 5, 's1': 1, 's2': 1, 's3': 1, 'dropout': 0.2263775487811876, 'head_dropout': 0.26556834420210373, 'kernel_size': 25, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[12/15] Train Loss: 0.7863, Val Loss: 0.7744, Val Acc: 0.4754\\n\",\r\n            \"[13/15] Train Loss: 0.7863, Val Loss: 0.7743, Val Acc: 0.4754\\n\",\r\n            \"[14/15] Train Loss: 0.7863, Val Loss: 0.7743, Val Acc: 0.4736\\n\",\r\n            \"[15/15] Train Loss: 0.7863, Val Loss: 0.7743, Val Acc: 0.4772\\n\",\r\n            \"[1/15] Train Loss: 0.7921, Val Loss: 0.7749, Val Acc: 0.5428\\n\",\r\n            \"[2/15] Train Loss: 0.7921, Val Loss: 0.7750, Val Acc: 0.5428\\n\",\r\n            \"[3/15] Train Loss: 0.7921, Val Loss: 0.7751, Val Acc: 0.5392\\n\",\r\n            \"[4/15] Train Loss: 0.7921, Val Loss: 0.7753, Val Acc: 0.5428\\n\",\r\n            \"[5/15] Train Loss: 0.7921, Val Loss: 0.7754, Val Acc: 0.5410\\n\",\r\n            \"[6/15] Train Loss: 0.7921, Val Loss: 0.7756, Val Acc: 0.5301\\n\",\r\n            \"[7/15] Train Loss: 0.7921, Val Loss: 0.7758, Val Acc: 0.5373\\n\",\r\n            \"[8/15] Train Loss: 0.7921, Val Loss: 0.7759, Val Acc: 0.5355\\n\",\r\n            \"[9/15] Train Loss: 0.7921, Val Loss: 0.7761, Val Acc: 0.5337\\n\",\r\n            \"[10/15] Train Loss: 0.7921, Val Loss: 0.7763, Val Acc: 0.5228\\n\",\r\n            \"[11/15] Train Loss: 0.7921, Val Loss: 0.7765, Val Acc: 0.5337\\n\",\r\n            \"[12/15] Train Loss: 0.7921, Val Loss: 0.7768, Val Acc: 0.5337\\n\",\r\n            \"[13/15] Train Loss: 0.7921, Val Loss: 0.7770, Val Acc: 0.5319\\n\",\r\n            \"[14/15] Train Loss: 0.7921, Val Loss: 0.7773, Val Acc: 0.5355\\n\",\r\n            \"[15/15] Train Loss: 0.7921, Val Loss: 0.7777, Val Acc: 0.5264\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:43,091] Trial 22 finished with value: 0.0962962962962963 and parameters: {'dim1': 8, 'dim2': 16, 'dim3': 32, 'k1': 11, 'k2': 7, 'k3': 5, 's1': 1, 's2': 1, 's3': 1, 'dropout': 0.21861264483852605, 'head_dropout': 0.2804818977771104, 'kernel_size': 25, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[1/15] Train Loss: 0.8118, Val Loss: 0.7756, Val Acc: 0.5574\\n\",\r\n            \"[2/15] Train Loss: 0.8118, Val Loss: 0.7754, Val Acc: 0.5574\\n\",\r\n            \"[3/15] Train Loss: 0.8118, Val Loss: 0.7753, Val Acc: 0.5574\\n\",\r\n            \"[4/15] Train Loss: 0.8118, Val Loss: 0.7752, Val Acc: 0.5592\\n\",\r\n            \"[5/15] Train Loss: 0.8118, Val Loss: 0.7752, Val Acc: 0.5592\\n\",\r\n            \"[6/15] Train Loss: 0.8118, Val Loss: 0.7752, Val Acc: 0.5574\\n\",\r\n            \"[7/15] Train Loss: 0.8118, Val Loss: 0.7753, Val Acc: 0.5556\\n\",\r\n            \"[8/15] Train Loss: 0.8118, Val Loss: 0.7754, Val Acc: 0.5537\\n\",\r\n            \"[9/15] Train Loss: 0.8118, Val Loss: 0.7756, Val Acc: 0.5574\\n\",\r\n            \"[10/15] Train Loss: 0.8118, Val Loss: 0.7759, Val Acc: 0.5574\\n\",\r\n            \"[11/15] Train Loss: 0.8118, Val Loss: 0.7763, Val Acc: 0.5610\\n\",\r\n            \"[12/15] Train Loss: 0.8118, Val Loss: 0.7767, Val Acc: 0.5556\\n\",\r\n            \"[13/15] Train Loss: 0.8118, Val Loss: 0.7772, Val Acc: 0.5592\\n\",\r\n            \"[14/15] Train Loss: 0.8118, Val Loss: 0.7778, Val Acc: 0.5592\\n\",\r\n            \"[15/15] Train Loss: 0.8118, Val Loss: 0.7785, Val Acc: 0.5556\\n\",\r\n            \"[1/15] Train Loss: 0.7932, Val Loss: 0.7717, Val Acc: 0.5137\\n\",\r\n            \"[2/15] Train Loss: 0.7932, Val Loss: 0.7716, Val Acc: 0.5191\\n\",\r\n            \"[3/15] Train Loss: 0.7932, Val Loss: 0.7715, Val Acc: 0.5392\\n\",\r\n            \"[4/15] Train Loss: 0.7932, Val Loss: 0.7714, Val Acc: 0.5392\\n\",\r\n            \"[5/15] Train Loss: 0.7932, Val Loss: 0.7713, Val Acc: 0.5537\\n\",\r\n            \"[6/15] Train Loss: 0.7932, Val Loss: 0.7712, Val Acc: 0.5574\\n\",\r\n            \"[7/15] Train Loss: 0.7932, Val Loss: 0.7710, Val Acc: 0.5428\\n\",\r\n            \"[8/15] Train Loss: 0.7932, Val Loss: 0.7709, Val Acc: 0.5410\\n\",\r\n            \"[9/15] Train Loss: 0.7932, Val Loss: 0.7708, Val Acc: 0.5464\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:43,235] Trial 23 finished with value: 0.5185185185185185 and parameters: {'dim1': 8, 'dim2': 16, 'dim3': 32, 'k1': 11, 'k2': 7, 'k3': 3, 's1': 3, 's2': 1, 's3': 1, 'dropout': 0.18458213162672515, 'head_dropout': 0.24241601047205022, 'kernel_size': 31, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\\n\",\r\n            \"[I 2025-05-05 09:48:43,382] Trial 24 finished with value: 0.5718562874251497 and parameters: {'dim1': 8, 'dim2': 16, 'dim3': 32, 'k1': 11, 'k2': 7, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.2669843072398618, 'head_dropout': 0.19014073403872095, 'kernel_size': 31, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[10/15] Train Loss: 0.7932, Val Loss: 0.7707, Val Acc: 0.5501\\n\",\r\n            \"[11/15] Train Loss: 0.7932, Val Loss: 0.7706, Val Acc: 0.5519\\n\",\r\n            \"[12/15] Train Loss: 0.7932, Val Loss: 0.7705, Val Acc: 0.5574\\n\",\r\n            \"[13/15] Train Loss: 0.7932, Val Loss: 0.7704, Val Acc: 0.5519\\n\",\r\n            \"[14/15] Train Loss: 0.7932, Val Loss: 0.7704, Val Acc: 0.5519\\n\",\r\n            \"[15/15] Train Loss: 0.7932, Val Loss: 0.7704, Val Acc: 0.5501\\n\",\r\n            \"[1/15] Train Loss: 0.7925, Val Loss: 0.7746, Val Acc: 0.4754\\n\",\r\n            \"[2/15] Train Loss: 0.7925, Val Loss: 0.7748, Val Acc: 0.4699\\n\",\r\n            \"[3/15] Train Loss: 0.7925, Val Loss: 0.7749, Val Acc: 0.4681\\n\",\r\n            \"[4/15] Train Loss: 0.7925, Val Loss: 0.7750, Val Acc: 0.4681\\n\",\r\n            \"[5/15] Train Loss: 0.7925, Val Loss: 0.7751, Val Acc: 0.4681\\n\",\r\n            \"[6/15] Train Loss: 0.7925, Val Loss: 0.7752, Val Acc: 0.4645\\n\",\r\n            \"[7/15] Train Loss: 0.7925, Val Loss: 0.7753, Val Acc: 0.4699\\n\",\r\n            \"[8/15] Train Loss: 0.7925, Val Loss: 0.7754, Val Acc: 0.4699\\n\",\r\n            \"[9/15] Train Loss: 0.7925, Val Loss: 0.7756, Val Acc: 0.4681\\n\",\r\n            \"[10/15] Train Loss: 0.7925, Val Loss: 0.7758, Val Acc: 0.4663\\n\",\r\n            \"[11/15] Train Loss: 0.7925, Val Loss: 0.7759, Val Acc: 0.4645\\n\",\r\n            \"[12/15] Train Loss: 0.7925, Val Loss: 0.7761, Val Acc: 0.4718\\n\",\r\n            \"[13/15] Train Loss: 0.7925, Val Loss: 0.7764, Val Acc: 0.4754\\n\",\r\n            \"[14/15] Train Loss: 0.7925, Val Loss: 0.7766, Val Acc: 0.4736\\n\",\r\n            \"[15/15] Train Loss: 0.7925, Val Loss: 0.7769, Val Acc: 0.4791\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:43,524] Trial 25 finished with value: 0.5963541666666666 and parameters: {'dim1': 8, 'dim2': 16, 'dim3': 32, 'k1': 3, 'k2': 7, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.2729255052967877, 'head_dropout': 0.18705529902081164, 'kernel_size': 31, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[1/15] Train Loss: 0.7970, Val Loss: 0.7767, Val Acc: 0.4444\\n\",\r\n            \"[2/15] Train Loss: 0.7970, Val Loss: 0.7769, Val Acc: 0.4426\\n\",\r\n            \"[3/15] Train Loss: 0.7970, Val Loss: 0.7770, Val Acc: 0.4408\\n\",\r\n            \"[4/15] Train Loss: 0.7970, Val Loss: 0.7771, Val Acc: 0.4408\\n\",\r\n            \"[5/15] Train Loss: 0.7970, Val Loss: 0.7772, Val Acc: 0.4408\\n\",\r\n            \"[6/15] Train Loss: 0.7970, Val Loss: 0.7773, Val Acc: 0.4408\\n\",\r\n            \"[7/15] Train Loss: 0.7970, Val Loss: 0.7774, Val Acc: 0.4372\\n\",\r\n            \"[8/15] Train Loss: 0.7970, Val Loss: 0.7776, Val Acc: 0.4372\\n\",\r\n            \"[9/15] Train Loss: 0.7970, Val Loss: 0.7778, Val Acc: 0.4390\\n\",\r\n            \"[10/15] Train Loss: 0.7970, Val Loss: 0.7781, Val Acc: 0.4408\\n\",\r\n            \"[11/15] Train Loss: 0.7970, Val Loss: 0.7784, Val Acc: 0.4390\\n\",\r\n            \"[12/15] Train Loss: 0.7970, Val Loss: 0.7788, Val Acc: 0.4390\\n\",\r\n            \"[13/15] Train Loss: 0.7970, Val Loss: 0.7793, Val Acc: 0.4408\\n\",\r\n            \"[14/15] Train Loss: 0.7970, Val Loss: 0.7797, Val Acc: 0.4408\\n\",\r\n            \"[15/15] Train Loss: 0.7970, Val Loss: 0.7803, Val Acc: 0.4353\\n\",\r\n            \"[1/15] Train Loss: 0.8036, Val Loss: 0.7748, Val Acc: 0.4536\\n\",\r\n            \"[2/15] Train Loss: 0.8036, Val Loss: 0.7747, Val Acc: 0.4590\\n\",\r\n            \"[3/15] Train Loss: 0.8036, Val Loss: 0.7746, Val Acc: 0.4590\\n\",\r\n            \"[4/15] Train Loss: 0.8036, Val Loss: 0.7745, Val Acc: 0.4681\\n\",\r\n            \"[5/15] Train Loss: 0.8036, Val Loss: 0.7746, Val Acc: 0.4645\\n\",\r\n            \"[6/15] Train Loss: 0.8036, Val Loss: 0.7747, Val Acc: 0.4590\\n\",\r\n            \"[7/15] Train Loss: 0.8036, Val Loss: 0.7748, Val Acc: 0.4481\\n\",\r\n            \"[8/15] Train Loss: 0.8036, Val Loss: 0.7749, Val Acc: 0.4390\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:43,689] Trial 26 finished with value: 0.5904255319148937 and parameters: {'dim1': 8, 'dim2': 16, 'dim3': 32, 'k1': 3, 'k2': 7, 'k3': 7, 's1': 5, 's2': 3, 's3': 3, 'dropout': 0.29946465097524033, 'head_dropout': 0.14825447674501546, 'kernel_size': 31, 'decomposition': True, 'revin': True, 'affine': True}. Best is trial 7 with value: 0.6099476439790575.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[9/15] Train Loss: 0.8036, Val Loss: 0.7751, Val Acc: 0.4317\\n\",\r\n            \"[10/15] Train Loss: 0.8036, Val Loss: 0.7754, Val Acc: 0.4281\\n\",\r\n            \"[11/15] Train Loss: 0.8036, Val Loss: 0.7757, Val Acc: 0.4317\\n\",\r\n            \"[12/15] Train Loss: 0.8036, Val Loss: 0.7762, Val Acc: 0.4335\\n\",\r\n            \"[13/15] Train Loss: 0.8036, Val Loss: 0.7766, Val Acc: 0.4335\\n\",\r\n            \"[14/15] Train Loss: 0.8036, Val Loss: 0.7772, Val Acc: 0.4353\\n\",\r\n            \"[15/15] Train Loss: 0.8036, Val Loss: 0.7779, Val Acc: 0.4390\\n\",\r\n            \"[1/15] Train Loss: 0.7841, Val Loss: 0.7752, Val Acc: 0.5592\\n\",\r\n            \"[2/15] Train Loss: 0.7841, Val Loss: 0.7750, Val Acc: 0.5574\\n\",\r\n            \"[3/15] Train Loss: 0.7841, Val Loss: 0.7748, Val Acc: 0.5574\\n\",\r\n            \"[4/15] Train Loss: 0.7841, Val Loss: 0.7746, Val Acc: 0.5556\\n\",\r\n            \"[5/15] Train Loss: 0.7841, Val Loss: 0.7744, Val Acc: 0.5556\\n\",\r\n            \"[6/15] Train Loss: 0.7841, Val Loss: 0.7743, Val Acc: 0.5519\\n\",\r\n            \"[7/15] Train Loss: 0.7841, Val Loss: 0.7743, Val Acc: 0.5537\\n\",\r\n            \"[8/15] Train Loss: 0.7841, Val Loss: 0.7742, Val Acc: 0.5574\\n\",\r\n            \"[9/15] Train Loss: 0.7841, Val Loss: 0.7742, Val Acc: 0.5628\\n\",\r\n            \"[10/15] Train Loss: 0.7841, Val Loss: 0.7741, Val Acc: 0.5647\\n\",\r\n            \"[11/15] Train Loss: 0.7841, Val Loss: 0.7740, Val Acc: 0.5628\\n\",\r\n            \"[12/15] Train Loss: 0.7841, Val Loss: 0.7740, Val Acc: 0.5665\\n\",\r\n            \"[13/15] Train Loss: 0.7841, Val Loss: 0.7739, Val Acc: 0.5665\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:43,847] Trial 27 finished with value: 0.2364217252396166 and parameters: {'dim1': 16, 'dim2': 16, 'dim3': 32, 'k1': 3, 'k2': 5, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.25200271935724355, 'head_dropout': 0.22482432409286787, 'kernel_size': 31, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[14/15] Train Loss: 0.7841, Val Loss: 0.7740, Val Acc: 0.5628\\n\",\r\n            \"[15/15] Train Loss: 0.7841, Val Loss: 0.7740, Val Acc: 0.5647\\n\",\r\n            \"[1/15] Train Loss: 0.7932, Val Loss: 0.7751, Val Acc: 0.5446\\n\",\r\n            \"[2/15] Train Loss: 0.7932, Val Loss: 0.7750, Val Acc: 0.5483\\n\",\r\n            \"[3/15] Train Loss: 0.7932, Val Loss: 0.7750, Val Acc: 0.5464\\n\",\r\n            \"[4/15] Train Loss: 0.7932, Val Loss: 0.7750, Val Acc: 0.5428\\n\",\r\n            \"[5/15] Train Loss: 0.7932, Val Loss: 0.7749, Val Acc: 0.5428\\n\",\r\n            \"[6/15] Train Loss: 0.7932, Val Loss: 0.7749, Val Acc: 0.5446\\n\",\r\n            \"[7/15] Train Loss: 0.7932, Val Loss: 0.7749, Val Acc: 0.5428\\n\",\r\n            \"[8/15] Train Loss: 0.7932, Val Loss: 0.7749, Val Acc: 0.5446\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:44,172] Trial 28 finished with value: 0.4 and parameters: {'dim1': 32, 'dim2': 64, 'dim3': 128, 'k1': 3, 'k2': 3, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.16977675556582822, 'head_dropout': 0.2064405823469388, 'kernel_size': 15, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[9/15] Train Loss: 0.7932, Val Loss: 0.7749, Val Acc: 0.5301\\n\",\r\n            \"[10/15] Train Loss: 0.7932, Val Loss: 0.7749, Val Acc: 0.5301\\n\",\r\n            \"[11/15] Train Loss: 0.7932, Val Loss: 0.7749, Val Acc: 0.5373\\n\",\r\n            \"[12/15] Train Loss: 0.7932, Val Loss: 0.7750, Val Acc: 0.5337\\n\",\r\n            \"[13/15] Train Loss: 0.7932, Val Loss: 0.7750, Val Acc: 0.5355\\n\",\r\n            \"[14/15] Train Loss: 0.7932, Val Loss: 0.7751, Val Acc: 0.5337\\n\",\r\n            \"[15/15] Train Loss: 0.7932, Val Loss: 0.7752, Val Acc: 0.5301\\n\",\r\n            \"[1/15] Train Loss: 0.7867, Val Loss: 0.7753, Val Acc: 0.5246\\n\",\r\n            \"[2/15] Train Loss: 0.7867, Val Loss: 0.7754, Val Acc: 0.5191\\n\",\r\n            \"[3/15] Train Loss: 0.7867, Val Loss: 0.7754, Val Acc: 0.5191\\n\",\r\n            \"[4/15] Train Loss: 0.7867, Val Loss: 0.7754, Val Acc: 0.5282\\n\",\r\n            \"[5/15] Train Loss: 0.7867, Val Loss: 0.7755, Val Acc: 0.5319\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:44,356] Trial 29 finished with value: 0.35467980295566504 and parameters: {'dim1': 8, 'dim2': 32, 'dim3': 64, 'k1': 7, 'k2': 7, 'k3': 3, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.20598016386183188, 'head_dropout': 0.07214530441113338, 'kernel_size': 5, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[6/15] Train Loss: 0.7867, Val Loss: 0.7755, Val Acc: 0.5282\\n\",\r\n            \"[7/15] Train Loss: 0.7867, Val Loss: 0.7756, Val Acc: 0.5319\\n\",\r\n            \"[8/15] Train Loss: 0.7867, Val Loss: 0.7757, Val Acc: 0.5228\\n\",\r\n            \"[9/15] Train Loss: 0.7867, Val Loss: 0.7759, Val Acc: 0.5155\\n\",\r\n            \"[10/15] Train Loss: 0.7867, Val Loss: 0.7760, Val Acc: 0.5209\\n\",\r\n            \"[11/15] Train Loss: 0.7867, Val Loss: 0.7762, Val Acc: 0.5209\\n\",\r\n            \"[12/15] Train Loss: 0.7867, Val Loss: 0.7764, Val Acc: 0.5228\\n\",\r\n            \"[13/15] Train Loss: 0.7867, Val Loss: 0.7766, Val Acc: 0.5264\\n\",\r\n            \"[14/15] Train Loss: 0.7867, Val Loss: 0.7769, Val Acc: 0.5246\\n\",\r\n            \"[15/15] Train Loss: 0.7867, Val Loss: 0.7772, Val Acc: 0.5228\\n\",\r\n            \"[1/15] Train Loss: 0.7901, Val Loss: 0.7769, Val Acc: 0.4372\\n\",\r\n            \"[2/15] Train Loss: 0.7901, Val Loss: 0.7770, Val Acc: 0.4372\\n\",\r\n            \"[3/15] Train Loss: 0.7901, Val Loss: 0.7770, Val Acc: 0.4426\\n\",\r\n            \"[4/15] Train Loss: 0.7901, Val Loss: 0.7772, Val Acc: 0.4444\\n\",\r\n            \"[5/15] Train Loss: 0.7901, Val Loss: 0.7774, Val Acc: 0.4408\\n\",\r\n            \"[6/15] Train Loss: 0.7901, Val Loss: 0.7777, Val Acc: 0.4372\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:44,570] Trial 30 finished with value: 0.5443786982248521 and parameters: {'dim1': 8, 'dim2': 16, 'dim3': 128, 'k1': 3, 'k2': 7, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.2605433262068643, 'head_dropout': 0.16097007706807925, 'kernel_size': 31, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[7/15] Train Loss: 0.7901, Val Loss: 0.7780, Val Acc: 0.4390\\n\",\r\n            \"[8/15] Train Loss: 0.7901, Val Loss: 0.7784, Val Acc: 0.4426\\n\",\r\n            \"[9/15] Train Loss: 0.7901, Val Loss: 0.7788, Val Acc: 0.4408\\n\",\r\n            \"[10/15] Train Loss: 0.7901, Val Loss: 0.7792, Val Acc: 0.4426\\n\",\r\n            \"[11/15] Train Loss: 0.7901, Val Loss: 0.7798, Val Acc: 0.4463\\n\",\r\n            \"[12/15] Train Loss: 0.7901, Val Loss: 0.7804, Val Acc: 0.4408\\n\",\r\n            \"[13/15] Train Loss: 0.7901, Val Loss: 0.7810, Val Acc: 0.4444\\n\",\r\n            \"[14/15] Train Loss: 0.7901, Val Loss: 0.7818, Val Acc: 0.4426\\n\",\r\n            \"[15/15] Train Loss: 0.7901, Val Loss: 0.7826, Val Acc: 0.4390\\n\",\r\n            \"[1/15] Train Loss: 0.7996, Val Loss: 0.7798, Val Acc: 0.5537\\n\",\r\n            \"[2/15] Train Loss: 0.7996, Val Loss: 0.7802, Val Acc: 0.5537\\n\",\r\n            \"[3/15] Train Loss: 0.7996, Val Loss: 0.7807, Val Acc: 0.5537\\n\",\r\n            \"[4/15] Train Loss: 0.7996, Val Loss: 0.7811, Val Acc: 0.5519\\n\",\r\n            \"[5/15] Train Loss: 0.7996, Val Loss: 0.7816, Val Acc: 0.5501\\n\",\r\n            \"[6/15] Train Loss: 0.7996, Val Loss: 0.7820, Val Acc: 0.5519\\n\",\r\n            \"[7/15] Train Loss: 0.7996, Val Loss: 0.7825, Val Acc: 0.5537\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:44,743] Trial 31 finished with value: 0.1033210332103321 and parameters: {'dim1': 8, 'dim2': 16, 'dim3': 32, 'k1': 3, 'k2': 7, 'k3': 7, 's1': 5, 's2': 3, 's3': 3, 'dropout': 0.2993508527932263, 'head_dropout': 0.1045978616593376, 'kernel_size': 31, 'decomposition': True, 'revin': True, 'affine': True}. Best is trial 7 with value: 0.6099476439790575.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[8/15] Train Loss: 0.7996, Val Loss: 0.7830, Val Acc: 0.5537\\n\",\r\n            \"[9/15] Train Loss: 0.7996, Val Loss: 0.7835, Val Acc: 0.5537\\n\",\r\n            \"[10/15] Train Loss: 0.7996, Val Loss: 0.7841, Val Acc: 0.5574\\n\",\r\n            \"[11/15] Train Loss: 0.7996, Val Loss: 0.7847, Val Acc: 0.5574\\n\",\r\n            \"[12/15] Train Loss: 0.7996, Val Loss: 0.7854, Val Acc: 0.5610\\n\",\r\n            \"[13/15] Train Loss: 0.7996, Val Loss: 0.7861, Val Acc: 0.5592\\n\",\r\n            \"[14/15] Train Loss: 0.7996, Val Loss: 0.7869, Val Acc: 0.5556\\n\",\r\n            \"[15/15] Train Loss: 0.7996, Val Loss: 0.7878, Val Acc: 0.5574\\n\",\r\n            \"[1/15] Train Loss: 0.7903, Val Loss: 0.7748, Val Acc: 0.5610\\n\",\r\n            \"[2/15] Train Loss: 0.7903, Val Loss: 0.7749, Val Acc: 0.5483\\n\",\r\n            \"[3/15] Train Loss: 0.7903, Val Loss: 0.7751, Val Acc: 0.5428\\n\",\r\n            \"[4/15] Train Loss: 0.7903, Val Loss: 0.7753, Val Acc: 0.5355\\n\",\r\n            \"[5/15] Train Loss: 0.7903, Val Loss: 0.7755, Val Acc: 0.5355\\n\",\r\n            \"[6/15] Train Loss: 0.7903, Val Loss: 0.7757, Val Acc: 0.5337\\n\",\r\n            \"[7/15] Train Loss: 0.7903, Val Loss: 0.7759, Val Acc: 0.5355\\n\",\r\n            \"[8/15] Train Loss: 0.7903, Val Loss: 0.7761, Val Acc: 0.5373\\n\",\r\n            \"[9/15] Train Loss: 0.7903, Val Loss: 0.7763, Val Acc: 0.5428\\n\",\r\n            \"[10/15] Train Loss: 0.7903, Val Loss: 0.7765, Val Acc: 0.5428\\n\",\r\n            \"[11/15] Train Loss: 0.7903, Val Loss: 0.7767, Val Acc: 0.5373\\n\",\r\n            \"[12/15] Train Loss: 0.7903, Val Loss: 0.7770, Val Acc: 0.5355\\n\",\r\n            \"[13/15] Train Loss: 0.7903, Val Loss: 0.7772, Val Acc: 0.5355\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:44,895] Trial 32 finished with value: 0.13058419243986255 and parameters: {'dim1': 8, 'dim2': 16, 'dim3': 32, 'k1': 3, 'k2': 7, 'k3': 7, 's1': 5, 's2': 3, 's3': 3, 'dropout': 0.28188423316190453, 'head_dropout': 0.15651767677402503, 'kernel_size': 31, 'decomposition': True, 'revin': True, 'affine': True}. Best is trial 7 with value: 0.6099476439790575.\\n\",\r\n            \"[I 2025-05-05 09:48:45,048] Trial 33 finished with value: 0.4777777777777778 and parameters: {'dim1': 8, 'dim2': 16, 'dim3': 32, 'k1': 3, 'k2': 7, 'k3': 7, 's1': 5, 's2': 3, 's3': 3, 'dropout': 0.284458794920738, 'head_dropout': 0.18916809678518312, 'kernel_size': 31, 'decomposition': True, 'revin': True, 'affine': True}. Best is trial 7 with value: 0.6099476439790575.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[14/15] Train Loss: 0.7903, Val Loss: 0.7775, Val Acc: 0.5410\\n\",\r\n            \"[15/15] Train Loss: 0.7903, Val Loss: 0.7778, Val Acc: 0.5392\\n\",\r\n            \"[1/15] Train Loss: 0.7911, Val Loss: 0.7756, Val Acc: 0.4663\\n\",\r\n            \"[2/15] Train Loss: 0.7911, Val Loss: 0.7755, Val Acc: 0.4772\\n\",\r\n            \"[3/15] Train Loss: 0.7911, Val Loss: 0.7755, Val Acc: 0.4772\\n\",\r\n            \"[4/15] Train Loss: 0.7911, Val Loss: 0.7755, Val Acc: 0.4736\\n\",\r\n            \"[5/15] Train Loss: 0.7911, Val Loss: 0.7755, Val Acc: 0.4809\\n\",\r\n            \"[6/15] Train Loss: 0.7911, Val Loss: 0.7756, Val Acc: 0.4754\\n\",\r\n            \"[7/15] Train Loss: 0.7911, Val Loss: 0.7756, Val Acc: 0.4791\\n\",\r\n            \"[8/15] Train Loss: 0.7911, Val Loss: 0.7757, Val Acc: 0.4809\\n\",\r\n            \"[9/15] Train Loss: 0.7911, Val Loss: 0.7758, Val Acc: 0.4827\\n\",\r\n            \"[10/15] Train Loss: 0.7911, Val Loss: 0.7759, Val Acc: 0.4754\\n\",\r\n            \"[11/15] Train Loss: 0.7911, Val Loss: 0.7760, Val Acc: 0.4791\\n\",\r\n            \"[12/15] Train Loss: 0.7911, Val Loss: 0.7762, Val Acc: 0.4900\\n\",\r\n            \"[13/15] Train Loss: 0.7911, Val Loss: 0.7764, Val Acc: 0.4845\\n\",\r\n            \"[14/15] Train Loss: 0.7911, Val Loss: 0.7766, Val Acc: 0.4845\\n\",\r\n            \"[15/15] Train Loss: 0.7911, Val Loss: 0.7768, Val Acc: 0.4863\\n\",\r\n            \"[1/15] Train Loss: 0.7908, Val Loss: 0.8054, Val Acc: 0.5027\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:45,188] Trial 34 finished with value: 0.4271047227926078 and parameters: {'dim1': 8, 'dim2': 32, 'dim3': 32, 'k1': 5, 'k2': 5, 'k3': 7, 's1': 5, 's2': 3, 's3': 3, 'dropout': 0.23905371048025148, 'head_dropout': 0.14385077221220094, 'kernel_size': 31, 'decomposition': False, 'revin': False, 'affine': True}. Best is trial 7 with value: 0.6099476439790575.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[2/15] Train Loss: 0.7908, Val Loss: 0.7920, Val Acc: 0.5100\\n\",\r\n            \"[3/15] Train Loss: 0.7908, Val Loss: 0.7879, Val Acc: 0.5027\\n\",\r\n            \"[4/15] Train Loss: 0.7908, Val Loss: 0.7863, Val Acc: 0.4918\\n\",\r\n            \"[5/15] Train Loss: 0.7908, Val Loss: 0.7856, Val Acc: 0.4954\\n\",\r\n            \"[6/15] Train Loss: 0.7908, Val Loss: 0.7854, Val Acc: 0.5027\\n\",\r\n            \"[7/15] Train Loss: 0.7908, Val Loss: 0.7854, Val Acc: 0.5046\\n\",\r\n            \"[8/15] Train Loss: 0.7908, Val Loss: 0.7855, Val Acc: 0.5046\\n\",\r\n            \"[9/15] Train Loss: 0.7908, Val Loss: 0.7858, Val Acc: 0.5082\\n\",\r\n            \"[10/15] Train Loss: 0.7908, Val Loss: 0.7862, Val Acc: 0.5064\\n\",\r\n            \"[11/15] Train Loss: 0.7908, Val Loss: 0.7869, Val Acc: 0.5046\\n\",\r\n            \"[12/15] Train Loss: 0.7908, Val Loss: 0.7878, Val Acc: 0.5100\\n\",\r\n            \"[13/15] Train Loss: 0.7908, Val Loss: 0.7889, Val Acc: 0.5046\\n\",\r\n            \"[14/15] Train Loss: 0.7908, Val Loss: 0.7902, Val Acc: 0.4954\\n\",\r\n            \"[15/15] Train Loss: 0.7908, Val Loss: 0.7918, Val Acc: 0.4918\\n\",\r\n            \"[1/15] Train Loss: 0.7977, Val Loss: 1.0801, Val Acc: 0.4554\\n\",\r\n            \"[2/15] Train Loss: 0.7977, Val Loss: 0.9373, Val Acc: 0.4627\\n\",\r\n            \"[3/15] Train Loss: 0.7977, Val Loss: 0.8877, Val Acc: 0.4572\\n\",\r\n            \"[4/15] Train Loss: 0.7977, Val Loss: 0.8640, Val Acc: 0.4590\\n\",\r\n            \"[5/15] Train Loss: 0.7977, Val Loss: 0.8510, Val Acc: 0.4572\\n\",\r\n            \"[6/15] Train Loss: 0.7977, Val Loss: 0.8434, Val Acc: 0.4572\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:45,397] Trial 35 finished with value: 0.5705882352941176 and parameters: {'dim1': 64, 'dim2': 16, 'dim3': 32, 'k1': 5, 'k2': 7, 'k3': 7, 's1': 5, 's2': 3, 's3': 3, 'dropout': 0.26842441680215506, 'head_dropout': 0.24156224014025698, 'kernel_size': 5, 'decomposition': True, 'revin': False, 'affine': True}. Best is trial 7 with value: 0.6099476439790575.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[7/15] Train Loss: 0.7977, Val Loss: 0.8390, Val Acc: 0.4681\\n\",\r\n            \"[8/15] Train Loss: 0.7977, Val Loss: 0.8365, Val Acc: 0.4699\\n\",\r\n            \"[9/15] Train Loss: 0.7977, Val Loss: 0.8354, Val Acc: 0.4699\\n\",\r\n            \"[10/15] Train Loss: 0.7977, Val Loss: 0.8352, Val Acc: 0.4699\\n\",\r\n            \"[11/15] Train Loss: 0.7977, Val Loss: 0.8359, Val Acc: 0.4699\\n\",\r\n            \"[12/15] Train Loss: 0.7977, Val Loss: 0.8371, Val Acc: 0.4718\\n\",\r\n            \"[13/15] Train Loss: 0.7977, Val Loss: 0.8387, Val Acc: 0.4718\\n\",\r\n            \"[14/15] Train Loss: 0.7977, Val Loss: 0.8408, Val Acc: 0.4699\\n\",\r\n            \"[15/15] Train Loss: 0.7977, Val Loss: 0.8431, Val Acc: 0.4681\\n\",\r\n            \"[1/15] Train Loss: 0.7839, Val Loss: 0.7741, Val Acc: 0.4444\\n\",\r\n            \"[2/15] Train Loss: 0.7839, Val Loss: 0.7740, Val Acc: 0.4517\\n\",\r\n            \"[3/15] Train Loss: 0.7839, Val Loss: 0.7739, Val Acc: 0.4608\\n\",\r\n            \"[4/15] Train Loss: 0.7839, Val Loss: 0.7738, Val Acc: 0.4481\\n\",\r\n            \"[5/15] Train Loss: 0.7839, Val Loss: 0.7738, Val Acc: 0.4536\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:45,649] Trial 36 finished with value: 0.4874274661508704 and parameters: {'dim1': 8, 'dim2': 128, 'dim3': 32, 'k1': 3, 'k2': 5, 'k3': 3, 's1': 3, 's2': 3, 's3': 3, 'dropout': 0.2999258695641505, 'head_dropout': 0.08842621105651396, 'kernel_size': 31, 'decomposition': False, 'revin': True, 'affine': True}. Best is trial 7 with value: 0.6099476439790575.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[6/15] Train Loss: 0.7839, Val Loss: 0.7738, Val Acc: 0.4681\\n\",\r\n            \"[7/15] Train Loss: 0.7839, Val Loss: 0.7737, Val Acc: 0.4699\\n\",\r\n            \"[8/15] Train Loss: 0.7839, Val Loss: 0.7737, Val Acc: 0.4809\\n\",\r\n            \"[9/15] Train Loss: 0.7839, Val Loss: 0.7736, Val Acc: 0.4845\\n\",\r\n            \"[10/15] Train Loss: 0.7839, Val Loss: 0.7736, Val Acc: 0.4882\\n\",\r\n            \"[11/15] Train Loss: 0.7839, Val Loss: 0.7735, Val Acc: 0.5064\\n\",\r\n            \"[12/15] Train Loss: 0.7839, Val Loss: 0.7734, Val Acc: 0.5027\\n\",\r\n            \"[13/15] Train Loss: 0.7839, Val Loss: 0.7732, Val Acc: 0.5027\\n\",\r\n            \"[14/15] Train Loss: 0.7839, Val Loss: 0.7732, Val Acc: 0.5191\\n\",\r\n            \"[15/15] Train Loss: 0.7839, Val Loss: 0.7731, Val Acc: 0.5173\\n\",\r\n            \"[1/15] Train Loss: 0.7945, Val Loss: 1.0617, Val Acc: 0.4590\\n\",\r\n            \"[2/15] Train Loss: 0.7945, Val Loss: 0.9311, Val Acc: 0.4536\\n\",\r\n            \"[3/15] Train Loss: 0.7945, Val Loss: 0.8848, Val Acc: 0.4481\\n\",\r\n            \"[4/15] Train Loss: 0.7945, Val Loss: 0.8624, Val Acc: 0.4444\\n\",\r\n            \"[5/15] Train Loss: 0.7945, Val Loss: 0.8500, Val Acc: 0.4408\\n\",\r\n            \"[6/15] Train Loss: 0.7945, Val Loss: 0.8426, Val Acc: 0.4408\\n\",\r\n            \"[7/15] Train Loss: 0.7945, Val Loss: 0.8382, Val Acc: 0.4444\\n\",\r\n            \"[8/15] Train Loss: 0.7945, Val Loss: 0.8356, Val Acc: 0.4463\\n\",\r\n            \"[9/15] Train Loss: 0.7945, Val Loss: 0.8343, Val Acc: 0.4572\\n\",\r\n            \"[10/15] Train Loss: 0.7945, Val Loss: 0.8339, Val Acc: 0.4554\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:46,056] Trial 37 finished with value: 0.44972577696526506 and parameters: {'dim1': 16, 'dim2': 16, 'dim3': 256, 'k1': 9, 'k2': 7, 'k3': 7, 's1': 5, 's2': 3, 's3': 3, 'dropout': 0.13847363026122422, 'head_dropout': 0.1318539147167737, 'kernel_size': 11, 'decomposition': True, 'revin': False, 'affine': True}. Best is trial 7 with value: 0.6099476439790575.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[11/15] Train Loss: 0.7945, Val Loss: 0.8341, Val Acc: 0.4536\\n\",\r\n            \"[12/15] Train Loss: 0.7945, Val Loss: 0.8348, Val Acc: 0.4499\\n\",\r\n            \"[13/15] Train Loss: 0.7945, Val Loss: 0.8359, Val Acc: 0.4444\\n\",\r\n            \"[14/15] Train Loss: 0.7945, Val Loss: 0.8372, Val Acc: 0.4444\\n\",\r\n            \"[15/15] Train Loss: 0.7945, Val Loss: 0.8389, Val Acc: 0.4517\\n\",\r\n            \"[1/15] Train Loss: 0.7849, Val Loss: 0.7763, Val Acc: 0.5228\\n\",\r\n            \"[2/15] Train Loss: 0.7849, Val Loss: 0.7759, Val Acc: 0.5137\\n\",\r\n            \"[3/15] Train Loss: 0.7849, Val Loss: 0.7757, Val Acc: 0.5191\\n\",\r\n            \"[4/15] Train Loss: 0.7849, Val Loss: 0.7756, Val Acc: 0.5064\\n\",\r\n            \"[5/15] Train Loss: 0.7849, Val Loss: 0.7756, Val Acc: 0.5082\\n\",\r\n            \"[6/15] Train Loss: 0.7849, Val Loss: 0.7756, Val Acc: 0.5027\\n\",\r\n            \"[7/15] Train Loss: 0.7849, Val Loss: 0.7757, Val Acc: 0.4954\\n\",\r\n            \"[8/15] Train Loss: 0.7849, Val Loss: 0.7758, Val Acc: 0.5009\\n\",\r\n            \"[9/15] Train Loss: 0.7849, Val Loss: 0.7759, Val Acc: 0.5064\\n\",\r\n            \"[10/15] Train Loss: 0.7849, Val Loss: 0.7760, Val Acc: 0.5027\\n\",\r\n            \"[11/15] Train Loss: 0.7849, Val Loss: 0.7761, Val Acc: 0.4973\\n\",\r\n            \"[12/15] Train Loss: 0.7849, Val Loss: 0.7762, Val Acc: 0.4991\\n\",\r\n            \"[13/15] Train Loss: 0.7849, Val Loss: 0.7763, Val Acc: 0.5027\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:46,400] Trial 38 finished with value: 0.49162011173184356 and parameters: {'dim1': 32, 'dim2': 128, 'dim3': 32, 'k1': 3, 'k2': 9, 'k3': 7, 's1': 5, 's2': 3, 's3': 3, 'dropout': 0.23521536602081144, 'head_dropout': 0.17105895111545744, 'kernel_size': 31, 'decomposition': False, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[14/15] Train Loss: 0.7849, Val Loss: 0.7765, Val Acc: 0.5046\\n\",\r\n            \"[15/15] Train Loss: 0.7849, Val Loss: 0.7766, Val Acc: 0.5027\\n\",\r\n            \"[1/15] Train Loss: 0.7959, Val Loss: 1.1342, Val Acc: 0.4481\\n\",\r\n            \"[2/15] Train Loss: 0.7959, Val Loss: 0.9509, Val Acc: 0.4390\\n\",\r\n            \"[3/15] Train Loss: 0.7959, Val Loss: 0.8897, Val Acc: 0.4426\\n\",\r\n            \"[4/15] Train Loss: 0.7959, Val Loss: 0.8612, Val Acc: 0.4444\\n\",\r\n            \"[5/15] Train Loss: 0.7959, Val Loss: 0.8459, Val Acc: 0.4426\\n\",\r\n            \"[6/15] Train Loss: 0.7959, Val Loss: 0.8370, Val Acc: 0.4408\\n\",\r\n            \"[7/15] Train Loss: 0.7959, Val Loss: 0.8317, Val Acc: 0.4408\\n\",\r\n            \"[8/15] Train Loss: 0.7959, Val Loss: 0.8286, Val Acc: 0.4408\\n\",\r\n            \"[9/15] Train Loss: 0.7959, Val Loss: 0.8271, Val Acc: 0.4372\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:46,682] Trial 39 finished with value: 0.575 and parameters: {'dim1': 64, 'dim2': 32, 'dim3': 128, 'k1': 7, 'k2': 5, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.256891950192059, 'head_dropout': 0.27891600987785126, 'kernel_size': 5, 'decomposition': True, 'revin': False, 'affine': True}. Best is trial 7 with value: 0.6099476439790575.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[10/15] Train Loss: 0.7959, Val Loss: 0.8266, Val Acc: 0.4353\\n\",\r\n            \"[11/15] Train Loss: 0.7959, Val Loss: 0.8269, Val Acc: 0.4408\\n\",\r\n            \"[12/15] Train Loss: 0.7959, Val Loss: 0.8278, Val Acc: 0.4408\\n\",\r\n            \"[13/15] Train Loss: 0.7959, Val Loss: 0.8293, Val Acc: 0.4408\\n\",\r\n            \"[14/15] Train Loss: 0.7959, Val Loss: 0.8312, Val Acc: 0.4426\\n\",\r\n            \"[15/15] Train Loss: 0.7959, Val Loss: 0.8334, Val Acc: 0.4426\\n\",\r\n            \"[1/15] Train Loss: 0.7889, Val Loss: 0.7736, Val Acc: 0.5282\\n\",\r\n            \"[2/15] Train Loss: 0.7889, Val Loss: 0.7737, Val Acc: 0.5246\\n\",\r\n            \"[3/15] Train Loss: 0.7889, Val Loss: 0.7737, Val Acc: 0.5264\\n\",\r\n            \"[4/15] Train Loss: 0.7889, Val Loss: 0.7737, Val Acc: 0.5173\\n\",\r\n            \"[5/15] Train Loss: 0.7889, Val Loss: 0.7737, Val Acc: 0.5191\\n\",\r\n            \"[6/15] Train Loss: 0.7889, Val Loss: 0.7736, Val Acc: 0.5209\\n\",\r\n            \"[7/15] Train Loss: 0.7889, Val Loss: 0.7736, Val Acc: 0.5082\\n\",\r\n            \"[8/15] Train Loss: 0.7889, Val Loss: 0.7736, Val Acc: 0.5100\\n\",\r\n            \"[9/15] Train Loss: 0.7889, Val Loss: 0.7735, Val Acc: 0.5100\\n\",\r\n            \"[10/15] Train Loss: 0.7889, Val Loss: 0.7735, Val Acc: 0.5100\\n\",\r\n            \"[11/15] Train Loss: 0.7889, Val Loss: 0.7734, Val Acc: 0.5137\\n\",\r\n            \"[12/15] Train Loss: 0.7889, Val Loss: 0.7734, Val Acc: 0.5155\\n\",\r\n            \"[13/15] Train Loss: 0.7889, Val Loss: 0.7734, Val Acc: 0.5209\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:47,046] Trial 40 finished with value: 0.42316258351893093 and parameters: {'dim1': 8, 'dim2': 16, 'dim3': 256, 'k1': 5, 'k2': 7, 'k3': 3, 's1': 3, 's2': 1, 's3': 1, 'dropout': 0.021639038553566026, 'head_dropout': 0.2338370876859288, 'kernel_size': 15, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[14/15] Train Loss: 0.7889, Val Loss: 0.7733, Val Acc: 0.5246\\n\",\r\n            \"[15/15] Train Loss: 0.7889, Val Loss: 0.7733, Val Acc: 0.5282\\n\",\r\n            \"[1/15] Train Loss: 0.7814, Val Loss: 0.8668, Val Acc: 0.5392\\n\",\r\n            \"[2/15] Train Loss: 0.7814, Val Loss: 0.8197, Val Acc: 0.5373\\n\",\r\n            \"[3/15] Train Loss: 0.7814, Val Loss: 0.8045, Val Acc: 0.5373\\n\",\r\n            \"[4/15] Train Loss: 0.7814, Val Loss: 0.7974, Val Acc: 0.5392\\n\",\r\n            \"[5/15] Train Loss: 0.7814, Val Loss: 0.7936, Val Acc: 0.5319\\n\",\r\n            \"[6/15] Train Loss: 0.7814, Val Loss: 0.7915, Val Acc: 0.5355\\n\",\r\n            \"[7/15] Train Loss: 0.7814, Val Loss: 0.7903, Val Acc: 0.5355\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:47,370] Trial 41 finished with value: 0.4439746300211416 and parameters: {'dim1': 64, 'dim2': 32, 'dim3': 128, 'k1': 7, 'k2': 5, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.25438661276961566, 'head_dropout': 0.274553572779235, 'kernel_size': 5, 'decomposition': True, 'revin': False, 'affine': True}. Best is trial 7 with value: 0.6099476439790575.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[8/15] Train Loss: 0.7814, Val Loss: 0.7897, Val Acc: 0.5337\\n\",\r\n            \"[9/15] Train Loss: 0.7814, Val Loss: 0.7895, Val Acc: 0.5319\\n\",\r\n            \"[10/15] Train Loss: 0.7814, Val Loss: 0.7897, Val Acc: 0.5319\\n\",\r\n            \"[11/15] Train Loss: 0.7814, Val Loss: 0.7902, Val Acc: 0.5282\\n\",\r\n            \"[12/15] Train Loss: 0.7814, Val Loss: 0.7909, Val Acc: 0.5337\\n\",\r\n            \"[13/15] Train Loss: 0.7814, Val Loss: 0.7918, Val Acc: 0.5264\\n\",\r\n            \"[14/15] Train Loss: 0.7814, Val Loss: 0.7930, Val Acc: 0.5264\\n\",\r\n            \"[15/15] Train Loss: 0.7814, Val Loss: 0.7943, Val Acc: 0.5209\\n\",\r\n            \"[1/15] Train Loss: 0.8010, Val Loss: 1.2054, Val Acc: 0.4426\\n\",\r\n            \"[2/15] Train Loss: 0.8010, Val Loss: 1.0040, Val Acc: 0.4463\\n\",\r\n            \"[3/15] Train Loss: 0.8010, Val Loss: 0.9333, Val Acc: 0.4444\\n\",\r\n            \"[4/15] Train Loss: 0.8010, Val Loss: 0.8993, Val Acc: 0.4426\\n\",\r\n            \"[5/15] Train Loss: 0.8010, Val Loss: 0.8805, Val Acc: 0.4444\\n\",\r\n            \"[6/15] Train Loss: 0.8010, Val Loss: 0.8693, Val Acc: 0.4426\\n\",\r\n            \"[7/15] Train Loss: 0.8010, Val Loss: 0.8626, Val Acc: 0.4408\\n\",\r\n            \"[8/15] Train Loss: 0.8010, Val Loss: 0.8587, Val Acc: 0.4444\\n\",\r\n            \"[9/15] Train Loss: 0.8010, Val Loss: 0.8568, Val Acc: 0.4481\\n\",\r\n            \"[10/15] Train Loss: 0.8010, Val Loss: 0.8562, Val Acc: 0.4499\\n\",\r\n            \"[11/15] Train Loss: 0.8010, Val Loss: 0.8566, Val Acc: 0.4463\\n\",\r\n            \"[12/15] Train Loss: 0.8010, Val Loss: 0.8579, Val Acc: 0.4463\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:47,702] Trial 42 finished with value: 0.5863013698630137 and parameters: {'dim1': 64, 'dim2': 32, 'dim3': 128, 'k1': 7, 'k2': 5, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.2815590462500547, 'head_dropout': 0.2519157783971989, 'kernel_size': 5, 'decomposition': True, 'revin': False, 'affine': True}. Best is trial 7 with value: 0.6099476439790575.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[13/15] Train Loss: 0.8010, Val Loss: 0.8599, Val Acc: 0.4444\\n\",\r\n            \"[14/15] Train Loss: 0.8010, Val Loss: 0.8625, Val Acc: 0.4463\\n\",\r\n            \"[15/15] Train Loss: 0.8010, Val Loss: 0.8655, Val Acc: 0.4499\\n\",\r\n            \"[1/15] Train Loss: 0.7762, Val Loss: 0.9466, Val Acc: 0.5574\\n\",\r\n            \"[2/15] Train Loss: 0.7762, Val Loss: 0.8634, Val Acc: 0.5592\\n\",\r\n            \"[3/15] Train Loss: 0.7762, Val Loss: 0.8352, Val Acc: 0.5610\\n\",\r\n            \"[4/15] Train Loss: 0.7762, Val Loss: 0.8218, Val Acc: 0.5592\\n\",\r\n            \"[5/15] Train Loss: 0.7762, Val Loss: 0.8143, Val Acc: 0.5556\\n\",\r\n            \"[6/15] Train Loss: 0.7762, Val Loss: 0.8099, Val Acc: 0.5464\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:48,034] Trial 43 finished with value: 0.32891246684350134 and parameters: {'dim1': 64, 'dim2': 32, 'dim3': 128, 'k1': 7, 'k2': 5, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.27958438389274326, 'head_dropout': 0.2547783317527342, 'kernel_size': 5, 'decomposition': True, 'revin': False, 'affine': True}. Best is trial 7 with value: 0.6099476439790575.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[7/15] Train Loss: 0.7762, Val Loss: 0.8072, Val Acc: 0.5483\\n\",\r\n            \"[8/15] Train Loss: 0.7762, Val Loss: 0.8055, Val Acc: 0.5483\\n\",\r\n            \"[9/15] Train Loss: 0.7762, Val Loss: 0.8046, Val Acc: 0.5483\\n\",\r\n            \"[10/15] Train Loss: 0.7762, Val Loss: 0.8042, Val Acc: 0.5519\\n\",\r\n            \"[11/15] Train Loss: 0.7762, Val Loss: 0.8042, Val Acc: 0.5519\\n\",\r\n            \"[12/15] Train Loss: 0.7762, Val Loss: 0.8046, Val Acc: 0.5483\\n\",\r\n            \"[13/15] Train Loss: 0.7762, Val Loss: 0.8051, Val Acc: 0.5464\\n\",\r\n            \"[14/15] Train Loss: 0.7762, Val Loss: 0.8060, Val Acc: 0.5428\\n\",\r\n            \"[15/15] Train Loss: 0.7762, Val Loss: 0.8069, Val Acc: 0.5392\\n\",\r\n            \"[1/15] Train Loss: 0.8022, Val Loss: 1.5679, Val Acc: 0.5483\\n\",\r\n            \"[2/15] Train Loss: 0.8022, Val Loss: 1.2148, Val Acc: 0.5464\\n\",\r\n            \"[3/15] Train Loss: 0.8022, Val Loss: 1.0844, Val Acc: 0.5446\\n\",\r\n            \"[4/15] Train Loss: 0.8022, Val Loss: 1.0195, Val Acc: 0.5428\\n\",\r\n            \"[5/15] Train Loss: 0.8022, Val Loss: 0.9826, Val Acc: 0.5446\\n\",\r\n            \"[6/15] Train Loss: 0.8022, Val Loss: 0.9602, Val Acc: 0.5428\\n\",\r\n            \"[7/15] Train Loss: 0.8022, Val Loss: 0.9463, Val Acc: 0.5410\\n\",\r\n            \"[8/15] Train Loss: 0.8022, Val Loss: 0.9378, Val Acc: 0.5410\\n\",\r\n            \"[9/15] Train Loss: 0.8022, Val Loss: 0.9329, Val Acc: 0.5392\\n\",\r\n            \"[10/15] Train Loss: 0.8022, Val Loss: 0.9307, Val Acc: 0.5392\\n\",\r\n            \"[11/15] Train Loss: 0.8022, Val Loss: 0.9303, Val Acc: 0.5392\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:48,366] Trial 44 finished with value: 0.05303030303030303 and parameters: {'dim1': 64, 'dim2': 32, 'dim3': 128, 'k1': 7, 'k2': 5, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.28706130371147476, 'head_dropout': 0.2996400506490291, 'kernel_size': 11, 'decomposition': True, 'revin': False, 'affine': True}. Best is trial 7 with value: 0.6099476439790575.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[12/15] Train Loss: 0.8022, Val Loss: 0.9316, Val Acc: 0.5428\\n\",\r\n            \"[13/15] Train Loss: 0.8022, Val Loss: 0.9341, Val Acc: 0.5428\\n\",\r\n            \"[14/15] Train Loss: 0.8022, Val Loss: 0.9375, Val Acc: 0.5428\\n\",\r\n            \"[15/15] Train Loss: 0.8022, Val Loss: 0.9417, Val Acc: 0.5446\\n\",\r\n            \"[1/15] Train Loss: 0.7859, Val Loss: 0.9747, Val Acc: 0.4681\\n\",\r\n            \"[2/15] Train Loss: 0.7859, Val Loss: 0.8587, Val Acc: 0.4681\\n\",\r\n            \"[3/15] Train Loss: 0.7859, Val Loss: 0.8247, Val Acc: 0.4699\\n\",\r\n            \"[4/15] Train Loss: 0.7859, Val Loss: 0.8103, Val Acc: 0.4699\\n\",\r\n            \"[5/15] Train Loss: 0.7859, Val Loss: 0.8030, Val Acc: 0.4754\\n\",\r\n            \"[6/15] Train Loss: 0.7859, Val Loss: 0.7990, Val Acc: 0.4754\\n\",\r\n            \"[7/15] Train Loss: 0.7859, Val Loss: 0.7969, Val Acc: 0.4791\\n\",\r\n            \"[8/15] Train Loss: 0.7859, Val Loss: 0.7957, Val Acc: 0.4809\\n\",\r\n            \"[9/15] Train Loss: 0.7859, Val Loss: 0.7951, Val Acc: 0.4809\\n\",\r\n            \"[10/15] Train Loss: 0.7859, Val Loss: 0.7949, Val Acc: 0.4863\\n\",\r\n            \"[11/15] Train Loss: 0.7859, Val Loss: 0.7951, Val Acc: 0.4900\\n\",\r\n            \"[12/15] Train Loss: 0.7859, Val Loss: 0.7956, Val Acc: 0.4845\\n\",\r\n            \"[13/15] Train Loss: 0.7859, Val Loss: 0.7962, Val Acc: 0.4754\\n\",\r\n            \"[14/15] Train Loss: 0.7859, Val Loss: 0.7971, Val Acc: 0.4809\\n\",\r\n            \"[15/15] Train Loss: 0.7859, Val Loss: 0.7981, Val Acc: 0.4827\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:48,727] Trial 45 finished with value: 0.5 and parameters: {'dim1': 64, 'dim2': 32, 'dim3': 128, 'k1': 9, 'k2': 9, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.26902528879003557, 'head_dropout': 0.200551722543649, 'kernel_size': 5, 'decomposition': False, 'revin': False, 'affine': True}. Best is trial 7 with value: 0.6099476439790575.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[1/15] Train Loss: 0.7913, Val Loss: 0.8491, Val Acc: 0.5100\\n\",\r\n            \"[2/15] Train Loss: 0.7913, Val Loss: 0.8054, Val Acc: 0.5118\\n\",\r\n            \"[3/15] Train Loss: 0.7913, Val Loss: 0.7927, Val Acc: 0.5064\\n\",\r\n            \"[4/15] Train Loss: 0.7913, Val Loss: 0.7876, Val Acc: 0.5082\\n\",\r\n            \"[5/15] Train Loss: 0.7913, Val Loss: 0.7853, Val Acc: 0.5137\\n\",\r\n            \"[6/15] Train Loss: 0.7913, Val Loss: 0.7841, Val Acc: 0.5118\\n\",\r\n            \"[7/15] Train Loss: 0.7913, Val Loss: 0.7835, Val Acc: 0.5173\\n\",\r\n            \"[8/15] Train Loss: 0.7913, Val Loss: 0.7833, Val Acc: 0.5118\\n\",\r\n            \"[9/15] Train Loss: 0.7913, Val Loss: 0.7834, Val Acc: 0.5118\\n\",\r\n            \"[10/15] Train Loss: 0.7913, Val Loss: 0.7839, Val Acc: 0.5118\\n\",\r\n            \"[11/15] Train Loss: 0.7913, Val Loss: 0.7846, Val Acc: 0.5082\\n\",\r\n            \"[12/15] Train Loss: 0.7913, Val Loss: 0.7853, Val Acc: 0.5155\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:49,027] Trial 46 finished with value: 0.548885077186964 and parameters: {'dim1': 8, 'dim2': 128, 'dim3': 32, 'k1': 7, 'k2': 3, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.22533306494045258, 'head_dropout': 0.2471239945755956, 'kernel_size': 31, 'decomposition': True, 'revin': False, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[13/15] Train Loss: 0.7913, Val Loss: 0.7863, Val Acc: 0.5155\\n\",\r\n            \"[14/15] Train Loss: 0.7913, Val Loss: 0.7874, Val Acc: 0.5209\\n\",\r\n            \"[15/15] Train Loss: 0.7913, Val Loss: 0.7886, Val Acc: 0.5209\\n\",\r\n            \"[1/15] Train Loss: 0.7858, Val Loss: 0.7737, Val Acc: 0.4900\\n\",\r\n            \"[2/15] Train Loss: 0.7858, Val Loss: 0.7737, Val Acc: 0.4863\\n\",\r\n            \"[3/15] Train Loss: 0.7858, Val Loss: 0.7737, Val Acc: 0.4845\\n\",\r\n            \"[4/15] Train Loss: 0.7858, Val Loss: 0.7738, Val Acc: 0.4845\\n\",\r\n            \"[5/15] Train Loss: 0.7858, Val Loss: 0.7739, Val Acc: 0.4772\\n\",\r\n            \"[6/15] Train Loss: 0.7858, Val Loss: 0.7739, Val Acc: 0.4681\\n\",\r\n            \"[7/15] Train Loss: 0.7858, Val Loss: 0.7738, Val Acc: 0.4754\\n\",\r\n            \"[8/15] Train Loss: 0.7858, Val Loss: 0.7738, Val Acc: 0.4754\\n\",\r\n            \"[9/15] Train Loss: 0.7858, Val Loss: 0.7738, Val Acc: 0.4791\\n\",\r\n            \"[10/15] Train Loss: 0.7858, Val Loss: 0.7737, Val Acc: 0.4754\\n\",\r\n            \"[11/15] Train Loss: 0.7858, Val Loss: 0.7737, Val Acc: 0.4754\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:49,848] Trial 47 finished with value: 0.5585023400936038 and parameters: {'dim1': 16, 'dim2': 64, 'dim3': 256, 'k1': 3, 'k2': 5, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.24786540869650164, 'head_dropout': 0.22854516895153715, 'kernel_size': 5, 'decomposition': True, 'revin': True, 'affine': True}. Best is trial 7 with value: 0.6099476439790575.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[12/15] Train Loss: 0.7858, Val Loss: 0.7736, Val Acc: 0.4809\\n\",\r\n            \"[13/15] Train Loss: 0.7858, Val Loss: 0.7735, Val Acc: 0.4845\\n\",\r\n            \"[14/15] Train Loss: 0.7858, Val Loss: 0.7735, Val Acc: 0.4791\\n\",\r\n            \"[15/15] Train Loss: 0.7858, Val Loss: 0.7735, Val Acc: 0.4845\\n\",\r\n            \"[1/15] Train Loss: 0.7960, Val Loss: 0.7757, Val Acc: 0.4499\\n\",\r\n            \"[2/15] Train Loss: 0.7960, Val Loss: 0.7758, Val Acc: 0.4536\\n\",\r\n            \"[3/15] Train Loss: 0.7960, Val Loss: 0.7759, Val Acc: 0.4554\\n\",\r\n            \"[4/15] Train Loss: 0.7960, Val Loss: 0.7761, Val Acc: 0.4536\\n\",\r\n            \"[5/15] Train Loss: 0.7960, Val Loss: 0.7762, Val Acc: 0.4517\\n\",\r\n            \"[6/15] Train Loss: 0.7960, Val Loss: 0.7763, Val Acc: 0.4499\\n\",\r\n            \"[7/15] Train Loss: 0.7960, Val Loss: 0.7764, Val Acc: 0.4499\\n\",\r\n            \"[8/15] Train Loss: 0.7960, Val Loss: 0.7764, Val Acc: 0.4517\\n\",\r\n            \"[9/15] Train Loss: 0.7960, Val Loss: 0.7765, Val Acc: 0.4572\\n\",\r\n            \"[10/15] Train Loss: 0.7960, Val Loss: 0.7767, Val Acc: 0.4608\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:50,255] Trial 48 finished with value: 0.5625 and parameters: {'dim1': 64, 'dim2': 16, 'dim3': 64, 'k1': 7, 'k2': 9, 'k3': 7, 's1': 3, 's2': 3, 's3': 3, 'dropout': 0.2087542335606744, 'head_dropout': 0.12073612337038966, 'kernel_size': 15, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[11/15] Train Loss: 0.7960, Val Loss: 0.7768, Val Acc: 0.4554\\n\",\r\n            \"[12/15] Train Loss: 0.7960, Val Loss: 0.7770, Val Acc: 0.4572\\n\",\r\n            \"[13/15] Train Loss: 0.7960, Val Loss: 0.7772, Val Acc: 0.4517\\n\",\r\n            \"[14/15] Train Loss: 0.7960, Val Loss: 0.7774, Val Acc: 0.4590\\n\",\r\n            \"[15/15] Train Loss: 0.7960, Val Loss: 0.7777, Val Acc: 0.4645\\n\",\r\n            \"[1/15] Train Loss: 0.7928, Val Loss: 0.8299, Val Acc: 0.4718\\n\",\r\n            \"[2/15] Train Loss: 0.7928, Val Loss: 0.8068, Val Acc: 0.4663\\n\",\r\n            \"[3/15] Train Loss: 0.7928, Val Loss: 0.7999, Val Acc: 0.4572\\n\",\r\n            \"[4/15] Train Loss: 0.7928, Val Loss: 0.7967, Val Acc: 0.4517\\n\",\r\n            \"[5/15] Train Loss: 0.7928, Val Loss: 0.7951, Val Acc: 0.4517\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stderr\",\r\n          \"text\": [\r\n            \"[I 2025-05-05 09:48:50,469] Trial 49 finished with value: 0.4925619834710744 and parameters: {'dim1': 32, 'dim2': 16, 'dim3': 32, 'k1': 9, 'k2': 7, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.188281187380417, 'head_dropout': 0.21855434672217192, 'kernel_size': 31, 'decomposition': False, 'revin': False, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[6/15] Train Loss: 0.7928, Val Loss: 0.7945, Val Acc: 0.4499\\n\",\r\n            \"[7/15] Train Loss: 0.7928, Val Loss: 0.7943, Val Acc: 0.4444\\n\",\r\n            \"[8/15] Train Loss: 0.7928, Val Loss: 0.7945, Val Acc: 0.4426\\n\",\r\n            \"[9/15] Train Loss: 0.7928, Val Loss: 0.7951, Val Acc: 0.4408\\n\",\r\n            \"[10/15] Train Loss: 0.7928, Val Loss: 0.7957, Val Acc: 0.4444\\n\",\r\n            \"[11/15] Train Loss: 0.7928, Val Loss: 0.7966, Val Acc: 0.4426\\n\",\r\n            \"[12/15] Train Loss: 0.7928, Val Loss: 0.7976, Val Acc: 0.4426\\n\",\r\n            \"[13/15] Train Loss: 0.7928, Val Loss: 0.7988, Val Acc: 0.4408\\n\",\r\n            \"[14/15] Train Loss: 0.7928, Val Loss: 0.8002, Val Acc: 0.4335\\n\",\r\n            \"[15/15] Train Loss: 0.7928, Val Loss: 0.8017, Val Acc: 0.4408\\n\",\r\n            \"✅ Best Trial:\\n\",\r\n            \"{'dim1': 8, 'dim2': 16, 'dim3': 32, 'k1': 7, 'k2': 5, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.23580595312520866, 'head_dropout': 0.2414528024642886, 'kernel_size': 31, 'decomposition': True, 'revin': True, 'affine': False}\\n\"\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"cell_type\": \"markdown\",\r\n      \"source\": [\r\n        \"###시각화 코드\"\r\n      ],\r\n      \"metadata\": {\r\n        \"id\": \"Rg-yp_utuBji\"\r\n      }\r\n    },\r\n    {\r\n      \"cell_type\": \"code\",\r\n      \"source\": [\r\n        \"def visualize_training(train_losses, val_losses, val_accs):\\n\",\r\n        \"    plt.figure(figsize=(12,4))\\n\",\r\n        \"    plt.subplot(1,2,1)\\n\",\r\n        \"    plt.plot(train_losses, label='Train Loss')\\n\",\r\n        \"    plt.plot(val_losses, label='Val Loss')\\n\",\r\n        \"    plt.legend(); plt.title(\\\"Loss over Epochs\\\")\\n\",\r\n        \"\\n\",\r\n        \"    plt.subplot(1,2,2)\\n\",\r\n        \"    plt.plot(val_accs, label='Val Accuracy')\\n\",\r\n        \"    plt.legend(); plt.title(\\\"Validation Accuracy\\\")\\n\",\r\n        \"    plt.show()\\n\",\r\n        \"\\n\",\r\n        \"def visualize_prediction(pred_probs, true_labels):\\n\",\r\n        \"    plt.figure(figsize=(10,4))\\n\",\r\n        \"    plt.plot(true_labels, label='True')\\n\",\r\n        \"    plt.plot(pred_probs, label='Pred (sigmoid)', alpha=0.7)\\n\",\r\n        \"    plt.legend(); plt.title(\\\"Prediction vs True\\\")\\n\",\r\n        \"    plt.show()\\n\",\r\n        \"\\n\",\r\n        \"def visualize_cumulative_return(pred_probs, true_labels, prices):\\n\",\r\n        \"    signal = (pred_probs > 0.5).astype(int)\\n\",\r\n        \"    returns = (prices[1:] / prices[:-1]) - 1\\n\",\r\n        \"    strategy_returns = returns * signal[:-1]  # 예측한 시점의 다음날 수익\\n\",\r\n        \"\\n\",\r\n        \"    cumulative = (strategy_returns + 1).cumprod()\\n\",\r\n        \"    market = (returns + 1).cumprod()\\n\",\r\n        \"\\n\",\r\n        \"    plt.plot(cumulative, label='Strategy')\\n\",\r\n        \"    plt.plot(market, label='Market (buy & hold)')\\n\",\r\n        \"    plt.legend(); plt.title(\\\"Cumulative Return\\\")\\n\",\r\n        \"    plt.show()\\n\"\r\n      ],\r\n      \"metadata\": {\r\n        \"id\": \"NRsQNf3tuBNM\"\r\n      },\r\n      \"execution_count\": 77,\r\n      \"outputs\": []\r\n    },\r\n    {\r\n      \"cell_type\": \"code\",\r\n      \"source\": [\r\n        \"import numpy as np\\n\",\r\n        \"import random\\n\",\r\n        \"def set_seed(seed=42):\\n\",\r\n        \"    random.seed(seed)\\n\",\r\n        \"    np.random.seed(seed)\\n\",\r\n        \"    torch.manual_seed(seed)\\n\",\r\n        \"    torch.cuda.manual_seed_all(seed)\\n\",\r\n        \"    torch.backends.cudnn.deterministic = True\\n\",\r\n        \"    torch.backends.cudnn.benchmark = False\\n\",\r\n        \"    torch.use_deterministic_algorithms(True)\\n\",\r\n        \"set_seed(42)\\n\",\r\n        \"\\n\",\r\n        \"# 1. 라벨 생성\\n\",\r\n        \"close_prices = data[f'prccd_{company_name}'].values\\n\",\r\n        \"returns = (close_prices[1:] / close_prices[:-1]) - 1\\n\",\r\n        \"labels = np.where(returns > 0.003, 1, 0)  # 0.3% 초과만 1로\\n\",\r\n        \"labels = torch.tensor(labels, dtype=torch.float32)\\n\",\r\n        \"\\n\",\r\n        \"# 2. GAT 임베딩 → TCN 입력 형태로 변환\\n\",\r\n        \"embeddings = embeddings[:-1]  # 라벨과 길이 맞춤\\n\",\r\n        \"tcn_input = embeddings.unsqueeze(0)  # [1, T, C]\\n\",\r\n        \"\\n\",\r\n        \"# ✅ 3. 길이 맞춰주기 (가장 중요)\\n\",\r\n        \"min_len = min(tcn_input.shape[1], labels.shape[0])\\n\",\r\n        \"tcn_input = tcn_input[:, :min_len, :]\\n\",\r\n        \"labels = labels[:min_len]\\n\",\r\n        \"\\n\",\r\n        \"# 3. 학습/검증 데이터 분할\\n\",\r\n        \"seq_len = tcn_input.shape[1]\\n\",\r\n        \"split = int(seq_len * 0.8)\\n\",\r\n        \"X_train = tcn_input[:, :split, :]\\n\",\r\n        \"X_val   = tcn_input[:, split:, :]\\n\",\r\n        \"y_train = labels[:split]\\n\",\r\n        \"y_val   = labels[split:]\\n\",\r\n        \"\\n\",\r\n        \"class BestConfig:\\n\",\r\n        \"    def __init__(self):\\n\",\r\n        \"        self.enc_in = X_train.shape[2]\\n\",\r\n        \"        self.dims = [best_params['dim1'], best_params['dim2'], best_params['dim3']]\\n\",\r\n        \"        self.large_size = [best_params['k1'], best_params['k2'], best_params['k3']]\\n\",\r\n        \"        self.small_size = [best_params['s1'], best_params['s2'], best_params['s3']]\\n\",\r\n        \"        self.small_kernel_merged = False\\n\",\r\n        \"        self.dropout = best_params['dropout']\\n\",\r\n        \"        self.head_dropout = best_params['head_dropout']\\n\",\r\n        \"        self.revin = best_params['revin']\\n\",\r\n        \"        self.affine = best_params['affine']\\n\",\r\n        \"        self.decomposition = best_params['decomposition']\\n\",\r\n        \"        self.kernel_size = best_params['kernel_size']\\n\",\r\n        \"\\n\",\r\n        \"# 4. 모델 생성 및 학습\\n\",\r\n        \"model = ModernTCN(BestConfig())\\n\",\r\n        \"\\n\",\r\n        \"train_losses, val_losses, val_accs = train_model(model,\\n\",\r\n        \"X_train, y_train, X_val, y_val, epochs=100,lr=1e-2)\\n\",\r\n        \"\\n\",\r\n        \"# 5. 예측 및 시각화\\n\",\r\n        \"model.eval()\\n\",\r\n        \"with torch.no_grad():\\n\",\r\n        \"    pred_logits = model(X_val).squeeze(0)  # [1, T] → [T]\\n\",\r\n        \"    pred_probs = torch.sigmoid(pred_logits).cpu().numpy()\\n\",\r\n        \"    pred_labels = (pred_probs > 0.5).astype(int)\\n\",\r\n        \"\\n\",\r\n        \"\\n\",\r\n        \"from sklearn.metrics import precision_recall_curve, f1_score\\n\",\r\n        \"\\n\",\r\n        \"\\\"\\\"\\\"\\n\",\r\n        \"# 1. 실제 라벨\\n\",\r\n        \"true_labels = y_val.cpu().numpy()\\n\",\r\n        \"\\n\",\r\n        \"# 2. 다양한 threshold에 대해 f1-score 측정\\n\",\r\n        \"precisions, recalls, thresholds = precision_recall_curve(true_labels, pred_probs)\\n\",\r\n        \"\\n\",\r\n        \"f1s = 2 * (precisions * recalls) / (precisions + recalls + 1e-8)  # f1-score 계산\\n\",\r\n        \"best_idx = np.argmax(f1s)\\n\",\r\n        \"best_threshold = thresholds[best_idx]\\n\",\r\n        \"\\n\",\r\n        \"print(f\\\"✅ Best threshold by F1-score: {best_threshold:.4f}, F1: {f1s[best_idx]:.4f}\\\")\\n\",\r\n        \"\\n\",\r\n        \"# 3. 최적 threshold로 예측 라벨 생성\\n\",\r\n        \"pred_labels = (pred_probs > best_threshold).astype(int)\\n\",\r\n        \"# 6. 누적 수익률 (선택)\\n\",\r\n        \"# future_prices = close_prices[split+1:]  # 실제 수익률 계산용\\n\",\r\n        \"# visualize_cumulative_return(pred_probs, y_val.cpu().numpy(), future_prices)\\n\",\r\n        \"\\\"\\\"\\\"\\n\",\r\n        \"\\n\",\r\n        \"visualize_training(train_losses, val_losses, val_accs)\\n\",\r\n        \"visualize_prediction(pred_probs, y_val.cpu().numpy())\\n\"\r\n      ],\r\n      \"metadata\": {\r\n        \"colab\": {\r\n          \"base_uri\": \"https://localhost:8080/\",\r\n          \"height\": 1000\r\n        },\r\n        \"id\": \"UCzrQgDimtsc\",\r\n        \"outputId\": \"c1bbea0f-9c47-419e-c12f-f2779cb67478\"\r\n      },\r\n      \"execution_count\": 151,\r\n      \"outputs\": [\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"[1/100] Train Loss: 0.6948, Val Loss: 0.6915, Val Acc: 0.5523\\n\",\r\n            \"[2/100] Train Loss: 0.6948, Val Loss: 0.6916, Val Acc: 0.5505\\n\",\r\n            \"[3/100] Train Loss: 0.6948, Val Loss: 0.6918, Val Acc: 0.5468\\n\",\r\n            \"[4/100] Train Loss: 0.6948, Val Loss: 0.6920, Val Acc: 0.5468\\n\",\r\n            \"[5/100] Train Loss: 0.6948, Val Loss: 0.6923, Val Acc: 0.5431\\n\",\r\n            \"[6/100] Train Loss: 0.6948, Val Loss: 0.6926, Val Acc: 0.5431\\n\",\r\n            \"[7/100] Train Loss: 0.6948, Val Loss: 0.6929, Val Acc: 0.5450\\n\",\r\n            \"[8/100] Train Loss: 0.6948, Val Loss: 0.6932, Val Acc: 0.5468\\n\",\r\n            \"[9/100] Train Loss: 0.6948, Val Loss: 0.6936, Val Acc: 0.5486\\n\",\r\n            \"[10/100] Train Loss: 0.6948, Val Loss: 0.6940, Val Acc: 0.5468\\n\",\r\n            \"[11/100] Train Loss: 0.6948, Val Loss: 0.6945, Val Acc: 0.5394\\n\",\r\n            \"[12/100] Train Loss: 0.6948, Val Loss: 0.6950, Val Acc: 0.5321\\n\",\r\n            \"[13/100] Train Loss: 0.6948, Val Loss: 0.6956, Val Acc: 0.5284\\n\",\r\n            \"[14/100] Train Loss: 0.6948, Val Loss: 0.6963, Val Acc: 0.5211\\n\",\r\n            \"[15/100] Train Loss: 0.6948, Val Loss: 0.6971, Val Acc: 0.5193\\n\",\r\n            \"[16/100] Train Loss: 0.6948, Val Loss: 0.6980, Val Acc: 0.5138\\n\",\r\n            \"[17/100] Train Loss: 0.6948, Val Loss: 0.6990, Val Acc: 0.5083\\n\",\r\n            \"[18/100] Train Loss: 0.6948, Val Loss: 0.7001, Val Acc: 0.5119\\n\",\r\n            \"[19/100] Train Loss: 0.6948, Val Loss: 0.7013, Val Acc: 0.5119\\n\",\r\n            \"[20/100] Train Loss: 0.6948, Val Loss: 0.7027, Val Acc: 0.5138\\n\",\r\n            \"[21/100] Train Loss: 0.6948, Val Loss: 0.7041, Val Acc: 0.5156\\n\",\r\n            \"[22/100] Train Loss: 0.6948, Val Loss: 0.7057, Val Acc: 0.5174\\n\",\r\n            \"[23/100] Train Loss: 0.6948, Val Loss: 0.7074, Val Acc: 0.5211\\n\",\r\n            \"[24/100] Train Loss: 0.6948, Val Loss: 0.7091, Val Acc: 0.5211\\n\",\r\n            \"[25/100] Train Loss: 0.6948, Val Loss: 0.7109, Val Acc: 0.5174\\n\",\r\n            \"[26/100] Train Loss: 0.6948, Val Loss: 0.7127, Val Acc: 0.5174\\n\",\r\n            \"[27/100] Train Loss: 0.6948, Val Loss: 0.7147, Val Acc: 0.5211\\n\",\r\n            \"[28/100] Train Loss: 0.6948, Val Loss: 0.7167, Val Acc: 0.5248\\n\",\r\n            \"[29/100] Train Loss: 0.6948, Val Loss: 0.7186, Val Acc: 0.5211\\n\",\r\n            \"[30/100] Train Loss: 0.6948, Val Loss: 0.7206, Val Acc: 0.5193\\n\",\r\n            \"[31/100] Train Loss: 0.6948, Val Loss: 0.7226, Val Acc: 0.5248\\n\",\r\n            \"[32/100] Train Loss: 0.6948, Val Loss: 0.7245, Val Acc: 0.5248\\n\",\r\n            \"[33/100] Train Loss: 0.6948, Val Loss: 0.7263, Val Acc: 0.5284\\n\",\r\n            \"[34/100] Train Loss: 0.6948, Val Loss: 0.7281, Val Acc: 0.5303\\n\",\r\n            \"[35/100] Train Loss: 0.6948, Val Loss: 0.7299, Val Acc: 0.5303\\n\",\r\n            \"[36/100] Train Loss: 0.6948, Val Loss: 0.7316, Val Acc: 0.5303\\n\",\r\n            \"[37/100] Train Loss: 0.6948, Val Loss: 0.7333, Val Acc: 0.5321\\n\",\r\n            \"[38/100] Train Loss: 0.6948, Val Loss: 0.7348, Val Acc: 0.5358\\n\",\r\n            \"[39/100] Train Loss: 0.6948, Val Loss: 0.7363, Val Acc: 0.5358\\n\",\r\n            \"[40/100] Train Loss: 0.6948, Val Loss: 0.7377, Val Acc: 0.5339\\n\",\r\n            \"[41/100] Train Loss: 0.6948, Val Loss: 0.7390, Val Acc: 0.5339\\n\",\r\n            \"[42/100] Train Loss: 0.6948, Val Loss: 0.7403, Val Acc: 0.5321\\n\",\r\n            \"[43/100] Train Loss: 0.6948, Val Loss: 0.7414, Val Acc: 0.5321\\n\",\r\n            \"[44/100] Train Loss: 0.6948, Val Loss: 0.7425, Val Acc: 0.5321\\n\",\r\n            \"[45/100] Train Loss: 0.6948, Val Loss: 0.7435, Val Acc: 0.5321\\n\",\r\n            \"[46/100] Train Loss: 0.6948, Val Loss: 0.7444, Val Acc: 0.5321\\n\",\r\n            \"[47/100] Train Loss: 0.6948, Val Loss: 0.7452, Val Acc: 0.5321\\n\",\r\n            \"[48/100] Train Loss: 0.6948, Val Loss: 0.7460, Val Acc: 0.5321\\n\",\r\n            \"[49/100] Train Loss: 0.6948, Val Loss: 0.7467, Val Acc: 0.5321\\n\",\r\n            \"[50/100] Train Loss: 0.6948, Val Loss: 0.7474, Val Acc: 0.5321\\n\",\r\n            \"[51/100] Train Loss: 0.6948, Val Loss: 0.7480, Val Acc: 0.5321\\n\",\r\n            \"[52/100] Train Loss: 0.6948, Val Loss: 0.7485, Val Acc: 0.5321\\n\",\r\n            \"[53/100] Train Loss: 0.6948, Val Loss: 0.7490, Val Acc: 0.5321\\n\",\r\n            \"[54/100] Train Loss: 0.6948, Val Loss: 0.7495, Val Acc: 0.5321\\n\",\r\n            \"[55/100] Train Loss: 0.6948, Val Loss: 0.7499, Val Acc: 0.5321\\n\",\r\n            \"[56/100] Train Loss: 0.6948, Val Loss: 0.7503, Val Acc: 0.5321\\n\",\r\n            \"[57/100] Train Loss: 0.6948, Val Loss: 0.7506, Val Acc: 0.5321\\n\",\r\n            \"[58/100] Train Loss: 0.6948, Val Loss: 0.7509, Val Acc: 0.5321\\n\",\r\n            \"[59/100] Train Loss: 0.6948, Val Loss: 0.7512, Val Acc: 0.5321\\n\",\r\n            \"[60/100] Train Loss: 0.6948, Val Loss: 0.7515, Val Acc: 0.5321\\n\",\r\n            \"[61/100] Train Loss: 0.6948, Val Loss: 0.7517, Val Acc: 0.5321\\n\",\r\n            \"[62/100] Train Loss: 0.6948, Val Loss: 0.7519, Val Acc: 0.5321\\n\",\r\n            \"[63/100] Train Loss: 0.6948, Val Loss: 0.7521, Val Acc: 0.5321\\n\",\r\n            \"[64/100] Train Loss: 0.6948, Val Loss: 0.7523, Val Acc: 0.5321\\n\",\r\n            \"[65/100] Train Loss: 0.6948, Val Loss: 0.7525, Val Acc: 0.5321\\n\",\r\n            \"[66/100] Train Loss: 0.6948, Val Loss: 0.7526, Val Acc: 0.5321\\n\",\r\n            \"[67/100] Train Loss: 0.6948, Val Loss: 0.7527, Val Acc: 0.5321\\n\",\r\n            \"[68/100] Train Loss: 0.6948, Val Loss: 0.7528, Val Acc: 0.5321\\n\",\r\n            \"[69/100] Train Loss: 0.6948, Val Loss: 0.7529, Val Acc: 0.5321\\n\",\r\n            \"[70/100] Train Loss: 0.6948, Val Loss: 0.7530, Val Acc: 0.5321\\n\",\r\n            \"[71/100] Train Loss: 0.6948, Val Loss: 0.7531, Val Acc: 0.5321\\n\",\r\n            \"[72/100] Train Loss: 0.6948, Val Loss: 0.7532, Val Acc: 0.5321\\n\",\r\n            \"[73/100] Train Loss: 0.6948, Val Loss: 0.7533, Val Acc: 0.5321\\n\",\r\n            \"[74/100] Train Loss: 0.6948, Val Loss: 0.7533, Val Acc: 0.5321\\n\",\r\n            \"[75/100] Train Loss: 0.6948, Val Loss: 0.7534, Val Acc: 0.5321\\n\",\r\n            \"[76/100] Train Loss: 0.6948, Val Loss: 0.7534, Val Acc: 0.5321\\n\",\r\n            \"[77/100] Train Loss: 0.6948, Val Loss: 0.7535, Val Acc: 0.5321\\n\",\r\n            \"[78/100] Train Loss: 0.6948, Val Loss: 0.7535, Val Acc: 0.5321\\n\",\r\n            \"[79/100] Train Loss: 0.6948, Val Loss: 0.7535, Val Acc: 0.5321\\n\",\r\n            \"[80/100] Train Loss: 0.6948, Val Loss: 0.7536, Val Acc: 0.5321\\n\",\r\n            \"[81/100] Train Loss: 0.6948, Val Loss: 0.7536, Val Acc: 0.5321\\n\",\r\n            \"[82/100] Train Loss: 0.6948, Val Loss: 0.7536, Val Acc: 0.5321\\n\",\r\n            \"[83/100] Train Loss: 0.6948, Val Loss: 0.7537, Val Acc: 0.5321\\n\",\r\n            \"[84/100] Train Loss: 0.6948, Val Loss: 0.7537, Val Acc: 0.5321\\n\",\r\n            \"[85/100] Train Loss: 0.6948, Val Loss: 0.7537, Val Acc: 0.5321\\n\",\r\n            \"[86/100] Train Loss: 0.6948, Val Loss: 0.7537, Val Acc: 0.5321\\n\",\r\n            \"[87/100] Train Loss: 0.6948, Val Loss: 0.7537, Val Acc: 0.5321\\n\",\r\n            \"[88/100] Train Loss: 0.6948, Val Loss: 0.7537, Val Acc: 0.5321\\n\",\r\n            \"[89/100] Train Loss: 0.6948, Val Loss: 0.7538, Val Acc: 0.5321\\n\",\r\n            \"[90/100] Train Loss: 0.6948, Val Loss: 0.7538, Val Acc: 0.5321\\n\",\r\n            \"[91/100] Train Loss: 0.6948, Val Loss: 0.7538, Val Acc: 0.5321\\n\",\r\n            \"[92/100] Train Loss: 0.6948, Val Loss: 0.7538, Val Acc: 0.5321\\n\",\r\n            \"[93/100] Train Loss: 0.6948, Val Loss: 0.7538, Val Acc: 0.5321\\n\",\r\n            \"[94/100] Train Loss: 0.6948, Val Loss: 0.7538, Val Acc: 0.5321\\n\",\r\n            \"[95/100] Train Loss: 0.6948, Val Loss: 0.7538, Val Acc: 0.5321\\n\",\r\n            \"[96/100] Train Loss: 0.6948, Val Loss: 0.7538, Val Acc: 0.5321\\n\",\r\n            \"[97/100] Train Loss: 0.6948, Val Loss: 0.7538, Val Acc: 0.5321\\n\",\r\n            \"[98/100] Train Loss: 0.6948, Val Loss: 0.7538, Val Acc: 0.5321\\n\",\r\n            \"[99/100] Train Loss: 0.6948, Val Loss: 0.7538, Val Acc: 0.5321\\n\",\r\n            \"[100/100] Train Loss: 0.6948, Val Loss: 0.7538, Val Acc: 0.5321\\n\"\r\n          ]\r\n        },\r\n        {\r\n          \"output_type\": \"display_data\",\r\n          \"data\": {\r\n            \"text/plain\": [\r\n              \"<Figure size 1200x400 with 2 Axes>\"\r\n            ],\r\n            \"image/png\": \"\\n\"\r\n          },\r\n          \"metadata\": {}\r\n        },\r\n        {\r\n          \"output_type\": \"display_data\",\r\n          \"data\": {\r\n            \"text/plain\": [\r\n              \"<Figure size 1000x400 with 1 Axes>\"\r\n            ],\r\n            \"image/png\": \"\\n\"\r\n          },\r\n          \"metadata\": {}\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"cell_type\": \"code\",\r\n      \"source\": [\r\n        \"#정확도 기반\\n\",\r\n        \"from sklearn.metrics import classification_report, confusion_matrix\\n\",\r\n        \"print(classification_report(y_val.cpu(), pred_labels))\\n\",\r\n        \"print(confusion_matrix(y_val.cpu(), pred_labels))\\n\"\r\n      ],\r\n      \"metadata\": {\r\n        \"colab\": {\r\n          \"base_uri\": \"https://localhost:8080/\"\r\n        },\r\n        \"id\": \"dFx060ibp0FO\",\r\n        \"outputId\": \"0ca39b7e-6e35-416c-8c5f-c3bfaee96307\"\r\n      },\r\n      \"execution_count\": 82,\r\n      \"outputs\": [\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"              precision    recall  f1-score   support\\n\",\r\n            \"\\n\",\r\n            \"         0.0       0.59      0.41      0.48       306\\n\",\r\n            \"         1.0       0.46      0.65      0.54       243\\n\",\r\n            \"\\n\",\r\n            \"    accuracy                           0.51       549\\n\",\r\n            \"   macro avg       0.53      0.53      0.51       549\\n\",\r\n            \"weighted avg       0.54      0.51      0.51       549\\n\",\r\n            \"\\n\",\r\n            \"[[125 181]\\n\",\r\n            \" [ 86 157]]\\n\"\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"cell_type\": \"code\",\r\n      \"source\": [\r\n        \"#f1 score 기반\\n\",\r\n        \"from sklearn.metrics import classification_report, confusion_matrix\\n\",\r\n        \"print(classification_report(y_val.cpu(), pred_labels))\\n\",\r\n        \"print(confusion_matrix(y_val.cpu(), pred_labels))\\n\"\r\n      ],\r\n      \"metadata\": {\r\n        \"colab\": {\r\n          \"base_uri\": \"https://localhost:8080/\"\r\n        },\r\n        \"id\": \"9gLZn6L2wV4s\",\r\n        \"outputId\": \"9b454dfc-6de4-4c27-807d-bbc3b7715c56\"\r\n      },\r\n      \"execution_count\": 152,\r\n      \"outputs\": [\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"              precision    recall  f1-score   support\\n\",\r\n            \"\\n\",\r\n            \"         0.0       0.55      0.81      0.66       301\\n\",\r\n            \"         1.0       0.45      0.19      0.27       244\\n\",\r\n            \"\\n\",\r\n            \"    accuracy                           0.53       545\\n\",\r\n            \"   macro avg       0.50      0.50      0.46       545\\n\",\r\n            \"weighted avg       0.51      0.53      0.48       545\\n\",\r\n            \"\\n\",\r\n            \"[[243  58]\\n\",\r\n            \" [197  47]]\\n\"\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"cell_type\": \"code\",\r\n      \"source\": [\r\n        \"unique, counts = np.unique(labels.numpy(), return_counts=True)\\n\",\r\n        \"print(dict(zip(unique, counts)))\\n\"\r\n      ],\r\n      \"metadata\": {\r\n        \"colab\": {\r\n          \"base_uri\": \"https://localhost:8080/\"\r\n        },\r\n        \"id\": \"V74w7Uqz3k2i\",\r\n        \"outputId\": \"ac3053d3-fc94-4d0f-e9c2-6561d6e2019e\"\r\n      },\r\n      \"execution_count\": 142,\r\n      \"outputs\": [\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"name\": \"stdout\",\r\n          \"text\": [\r\n            \"{np.float32(0.0): np.int64(1520), np.float32(1.0): np.int64(1207)}\\n\"\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}
===================================================================
diff --git a/RISK_ESTIMATION/GAT__TCN.ipynb b/RISK_ESTIMATION/GAT__TCN.ipynb
--- a/RISK_ESTIMATION/GAT__TCN.ipynb	(revision ea995ad8d35c69f05dff6bd5f1c78523c5a37b7d)
+++ b/RISK_ESTIMATION/GAT__TCN.ipynb	(date 1746616972509)
@@ -1,3850 +1,532 @@
-{
-  "nbformat": 4,
-  "nbformat_minor": 0,
-  "metadata": {
-    "colab": {
-      "provenance": []
-    },
-    "kernelspec": {
-      "name": "python3",
-      "display_name": "Python 3"
-    },
-    "language_info": {
-      "name": "python"
-    }
-  },
-  "cells": [
-    {
-      "cell_type": "markdown",
-      "source": [
-        "# 실행 준비"
-      ],
-      "metadata": {
-        "id": "uSGwEK8Rl8nu"
-      }
-    },
-    {
-      "cell_type": "code",
-      "execution_count": null,
-      "metadata": {
-        "id": "poEZQtkOdvnF"
-      },
-      "outputs": [],
-      "source": [
-        "#from google.colab import drive\n",
-        "#drive.mount('/content/drive')"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "source": [
-        "import pandas as pd"
-      ],
-      "metadata": {
-        "id": "DSgYsaX5g5s9"
-      },
-      "execution_count": 2,
-      "outputs": []
-    },
-    {
-      "cell_type": "code",
-      "source": [
-        "file_path = '/content/daily_all.csv'\n",
-        "df = pd.read_csv(file_path, engine='pyarrow')"
-      ],
-      "metadata": {
-        "id": "-vyn0-Vqghaa"
-      },
-      "execution_count": 3,
-      "outputs": []
-    },
-    {
-      "cell_type": "code",
-      "source": [
-        "df = pd.read_csv(\"daily_all.csv\")"
-      ],
-      "metadata": {
-        "id": "i2zflSUtie6r"
-      },
-      "execution_count": 4,
-      "outputs": []
-    },
-    {
-      "cell_type": "code",
-      "source": [
-        "df"
-      ],
-      "metadata": {
-        "colab": {
-          "base_uri": "https://localhost:8080/",
-          "height": 617
-        },
-        "id": "24-DKqOjhCyk",
-        "outputId": "74670461-cca7-4e0e-dc2b-c5523b9a55c9"
-      },
-      "execution_count": 5,
-      "outputs": [
-        {
-          "output_type": "execute_result",
-          "data": {
-            "text/plain": [
-              "        datadate  cshtrd_TSLA  prccd_TSLA  cshtrd_NVDA  prccd_NVDA  \\\n",
-              "0     2014-03-27      9493537      207.32     13450390       17.79   \n",
-              "1     2014-03-28      9666658      212.37      9970437       17.90   \n",
-              "2     2014-03-31      8367389      208.45      6835058       17.91   \n",
-              "3     2014-04-01      7353574      216.97     16406760       18.65   \n",
-              "4     2014-04-02     10738310      230.29      5998666       18.53   \n",
-              "...          ...          ...         ...          ...         ...   \n",
-              "2759  2025-03-17    111192700      238.01    254465500      119.53   \n",
-              "2760  2025-03-18    110243300      225.31    297843800      115.43   \n",
-              "2761  2025-03-19    111022100      235.86    271117700      117.52   \n",
-              "2762  2025-03-20     98542130      236.26    247168100      118.53   \n",
-              "2763  2025-03-21    131675100      248.71    265810400      117.70   \n",
-              "\n",
-              "      cshtrd_MSFT  prccd_MSFT  cshtrd_GOOG  prccd_GOOG  cshtrd_AAPL  ...  \\\n",
-              "0        35215570       39.36        13052      558.46      7904344  ...   \n",
-              "1        43414400       40.30        41003      559.99      7100433  ...   \n",
-              "2        46840570       40.99        10772      556.97      5969709  ...   \n",
-              "3        32604260       41.42         7932      567.16      7152806  ...   \n",
-              "4        28614590       41.35       146697      567.00      6400542  ...   \n",
-              "...           ...         ...          ...         ...          ...  ...   \n",
-              "2759     22456210      388.70     17812050      166.57     48031700  ...   \n",
-              "2760     18691680      383.52     24576840      162.67     42380710  ...   \n",
-              "2761     18960900      387.82     24921470      166.28     54327250  ...   \n",
-              "2762     18451340      386.84     19714890      165.05     48781470  ...   \n",
-              "2763     38785710      391.26     29843810      166.25     93876130  ...   \n",
-              "\n",
-              "      sent_AMZN  sent_AAPL  sent_CRM  sent_DIS  sent_GOOG  sent_INTC  \\\n",
-              "0           NaN        NaN       NaN       NaN        NaN        NaN   \n",
-              "1           NaN        NaN       NaN       NaN        NaN        NaN   \n",
-              "2           NaN        NaN  0.166667       NaN        NaN        NaN   \n",
-              "3           NaN        NaN  0.333333       NaN        NaN        NaN   \n",
-              "4           NaN        NaN -0.166667       NaN        NaN        NaN   \n",
-              "...         ...        ...       ...       ...        ...        ...   \n",
-              "2759        NaN        NaN       NaN       NaN        NaN        NaN   \n",
-              "2760        NaN        NaN       NaN       NaN        NaN        NaN   \n",
-              "2761        NaN        NaN       NaN       NaN        NaN        NaN   \n",
-              "2762        NaN        NaN       NaN       NaN        NaN        NaN   \n",
-              "2763        NaN        NaN       NaN       NaN        NaN        NaN   \n",
-              "\n",
-              "      sent_MSFT  sent_NVDA  sent_TSLA  sent_XOM  \n",
-              "0           NaN        NaN        NaN       NaN  \n",
-              "1           NaN        NaN        NaN       NaN  \n",
-              "2           NaN        NaN        NaN       NaN  \n",
-              "3           NaN        0.0        NaN       NaN  \n",
-              "4           NaN        NaN        NaN       NaN  \n",
-              "...         ...        ...        ...       ...  \n",
-              "2759        NaN        NaN        NaN       NaN  \n",
-              "2760        NaN        NaN        NaN       NaN  \n",
-              "2761        NaN        NaN        NaN       NaN  \n",
-              "2762        NaN        NaN        NaN       NaN  \n",
-              "2763        NaN        NaN        NaN       NaN  \n",
-              "\n",
-              "[2764 rows x 31 columns]"
-            ],
-            "text/html": [
-              "\n",
-              "  <div id=\"df-f9415af3-a9bc-40a5-92d2-d23338b380a1\" class=\"colab-df-container\">\n",
-              "    <div>\n",
-              "<style scoped>\n",
-              "    .dataframe tbody tr th:only-of-type {\n",
-              "        vertical-align: middle;\n",
-              "    }\n",
-              "\n",
-              "    .dataframe tbody tr th {\n",
-              "        vertical-align: top;\n",
-              "    }\n",
-              "\n",
-              "    .dataframe thead th {\n",
-              "        text-align: right;\n",
-              "    }\n",
-              "</style>\n",
-              "<table border=\"1\" class=\"dataframe\">\n",
-              "  <thead>\n",
-              "    <tr style=\"text-align: right;\">\n",
-              "      <th></th>\n",
-              "      <th>datadate</th>\n",
-              "      <th>cshtrd_TSLA</th>\n",
-              "      <th>prccd_TSLA</th>\n",
-              "      <th>cshtrd_NVDA</th>\n",
-              "      <th>prccd_NVDA</th>\n",
-              "      <th>cshtrd_MSFT</th>\n",
-              "      <th>prccd_MSFT</th>\n",
-              "      <th>cshtrd_GOOG</th>\n",
-              "      <th>prccd_GOOG</th>\n",
-              "      <th>cshtrd_AAPL</th>\n",
-              "      <th>...</th>\n",
-              "      <th>sent_AMZN</th>\n",
-              "      <th>sent_AAPL</th>\n",
-              "      <th>sent_CRM</th>\n",
-              "      <th>sent_DIS</th>\n",
-              "      <th>sent_GOOG</th>\n",
-              "      <th>sent_INTC</th>\n",
-              "      <th>sent_MSFT</th>\n",
-              "      <th>sent_NVDA</th>\n",
-              "      <th>sent_TSLA</th>\n",
-              "      <th>sent_XOM</th>\n",
-              "    </tr>\n",
-              "  </thead>\n",
-              "  <tbody>\n",
-              "    <tr>\n",
-              "      <th>0</th>\n",
-              "      <td>2014-03-27</td>\n",
-              "      <td>9493537</td>\n",
-              "      <td>207.32</td>\n",
-              "      <td>13450390</td>\n",
-              "      <td>17.79</td>\n",
-              "      <td>35215570</td>\n",
-              "      <td>39.36</td>\n",
-              "      <td>13052</td>\n",
-              "      <td>558.46</td>\n",
-              "      <td>7904344</td>\n",
-              "      <td>...</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "    </tr>\n",
-              "    <tr>\n",
-              "      <th>1</th>\n",
-              "      <td>2014-03-28</td>\n",
-              "      <td>9666658</td>\n",
-              "      <td>212.37</td>\n",
-              "      <td>9970437</td>\n",
-              "      <td>17.90</td>\n",
-              "      <td>43414400</td>\n",
-              "      <td>40.30</td>\n",
-              "      <td>41003</td>\n",
-              "      <td>559.99</td>\n",
-              "      <td>7100433</td>\n",
-              "      <td>...</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "    </tr>\n",
-              "    <tr>\n",
-              "      <th>2</th>\n",
-              "      <td>2014-03-31</td>\n",
-              "      <td>8367389</td>\n",
-              "      <td>208.45</td>\n",
-              "      <td>6835058</td>\n",
-              "      <td>17.91</td>\n",
-              "      <td>46840570</td>\n",
-              "      <td>40.99</td>\n",
-              "      <td>10772</td>\n",
-              "      <td>556.97</td>\n",
-              "      <td>5969709</td>\n",
-              "      <td>...</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>0.166667</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "    </tr>\n",
-              "    <tr>\n",
-              "      <th>3</th>\n",
-              "      <td>2014-04-01</td>\n",
-              "      <td>7353574</td>\n",
-              "      <td>216.97</td>\n",
-              "      <td>16406760</td>\n",
-              "      <td>18.65</td>\n",
-              "      <td>32604260</td>\n",
-              "      <td>41.42</td>\n",
-              "      <td>7932</td>\n",
-              "      <td>567.16</td>\n",
-              "      <td>7152806</td>\n",
-              "      <td>...</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>0.333333</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>0.0</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "    </tr>\n",
-              "    <tr>\n",
-              "      <th>4</th>\n",
-              "      <td>2014-04-02</td>\n",
-              "      <td>10738310</td>\n",
-              "      <td>230.29</td>\n",
-              "      <td>5998666</td>\n",
-              "      <td>18.53</td>\n",
-              "      <td>28614590</td>\n",
-              "      <td>41.35</td>\n",
-              "      <td>146697</td>\n",
-              "      <td>567.00</td>\n",
-              "      <td>6400542</td>\n",
-              "      <td>...</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>-0.166667</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "    </tr>\n",
-              "    <tr>\n",
-              "      <th>...</th>\n",
-              "      <td>...</td>\n",
-              "      <td>...</td>\n",
-              "      <td>...</td>\n",
-              "      <td>...</td>\n",
-              "      <td>...</td>\n",
-              "      <td>...</td>\n",
-              "      <td>...</td>\n",
-              "      <td>...</td>\n",
-              "      <td>...</td>\n",
-              "      <td>...</td>\n",
-              "      <td>...</td>\n",
-              "      <td>...</td>\n",
-              "      <td>...</td>\n",
-              "      <td>...</td>\n",
-              "      <td>...</td>\n",
-              "      <td>...</td>\n",
-              "      <td>...</td>\n",
-              "      <td>...</td>\n",
-              "      <td>...</td>\n",
-              "      <td>...</td>\n",
-              "      <td>...</td>\n",
-              "    </tr>\n",
-              "    <tr>\n",
-              "      <th>2759</th>\n",
-              "      <td>2025-03-17</td>\n",
-              "      <td>111192700</td>\n",
-              "      <td>238.01</td>\n",
-              "      <td>254465500</td>\n",
-              "      <td>119.53</td>\n",
-              "      <td>22456210</td>\n",
-              "      <td>388.70</td>\n",
-              "      <td>17812050</td>\n",
-              "      <td>166.57</td>\n",
-              "      <td>48031700</td>\n",
-              "      <td>...</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "    </tr>\n",
-              "    <tr>\n",
-              "      <th>2760</th>\n",
-              "      <td>2025-03-18</td>\n",
-              "      <td>110243300</td>\n",
-              "      <td>225.31</td>\n",
-              "      <td>297843800</td>\n",
-              "      <td>115.43</td>\n",
-              "      <td>18691680</td>\n",
-              "      <td>383.52</td>\n",
-              "      <td>24576840</td>\n",
-              "      <td>162.67</td>\n",
-              "      <td>42380710</td>\n",
-              "      <td>...</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "    </tr>\n",
-              "    <tr>\n",
-              "      <th>2761</th>\n",
-              "      <td>2025-03-19</td>\n",
-              "      <td>111022100</td>\n",
-              "      <td>235.86</td>\n",
-              "      <td>271117700</td>\n",
-              "      <td>117.52</td>\n",
-              "      <td>18960900</td>\n",
-              "      <td>387.82</td>\n",
-              "      <td>24921470</td>\n",
-              "      <td>166.28</td>\n",
-              "      <td>54327250</td>\n",
-              "      <td>...</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "    </tr>\n",
-              "    <tr>\n",
-              "      <th>2762</th>\n",
-              "      <td>2025-03-20</td>\n",
-              "      <td>98542130</td>\n",
-              "      <td>236.26</td>\n",
-              "      <td>247168100</td>\n",
-              "      <td>118.53</td>\n",
-              "      <td>18451340</td>\n",
-              "      <td>386.84</td>\n",
-              "      <td>19714890</td>\n",
-              "      <td>165.05</td>\n",
-              "      <td>48781470</td>\n",
-              "      <td>...</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "    </tr>\n",
-              "    <tr>\n",
-              "      <th>2763</th>\n",
-              "      <td>2025-03-21</td>\n",
-              "      <td>131675100</td>\n",
-              "      <td>248.71</td>\n",
-              "      <td>265810400</td>\n",
-              "      <td>117.70</td>\n",
-              "      <td>38785710</td>\n",
-              "      <td>391.26</td>\n",
-              "      <td>29843810</td>\n",
-              "      <td>166.25</td>\n",
-              "      <td>93876130</td>\n",
-              "      <td>...</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "      <td>NaN</td>\n",
-              "    </tr>\n",
-              "  </tbody>\n",
-              "</table>\n",
-              "<p>2764 rows × 31 columns</p>\n",
-              "</div>\n",
-              "    <div class=\"colab-df-buttons\">\n",
-              "\n",
-              "  <div class=\"colab-df-container\">\n",
-              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f9415af3-a9bc-40a5-92d2-d23338b380a1')\"\n",
-              "            title=\"Convert this dataframe to an interactive table.\"\n",
-              "            style=\"display:none;\">\n",
-              "\n",
-              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
-              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
-              "  </svg>\n",
-              "    </button>\n",
-              "\n",
-              "  <style>\n",
-              "    .colab-df-container {\n",
-              "      display:flex;\n",
-              "      gap: 12px;\n",
-              "    }\n",
-              "\n",
-              "    .colab-df-convert {\n",
-              "      background-color: #E8F0FE;\n",
-              "      border: none;\n",
-              "      border-radius: 50%;\n",
-              "      cursor: pointer;\n",
-              "      display: none;\n",
-              "      fill: #1967D2;\n",
-              "      height: 32px;\n",
-              "      padding: 0 0 0 0;\n",
-              "      width: 32px;\n",
-              "    }\n",
-              "\n",
-              "    .colab-df-convert:hover {\n",
-              "      background-color: #E2EBFA;\n",
-              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
-              "      fill: #174EA6;\n",
-              "    }\n",
-              "\n",
-              "    .colab-df-buttons div {\n",
-              "      margin-bottom: 4px;\n",
-              "    }\n",
-              "\n",
-              "    [theme=dark] .colab-df-convert {\n",
-              "      background-color: #3B4455;\n",
-              "      fill: #D2E3FC;\n",
-              "    }\n",
-              "\n",
-              "    [theme=dark] .colab-df-convert:hover {\n",
-              "      background-color: #434B5C;\n",
-              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
-              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
-              "      fill: #FFFFFF;\n",
-              "    }\n",
-              "  </style>\n",
-              "\n",
-              "    <script>\n",
-              "      const buttonEl =\n",
-              "        document.querySelector('#df-f9415af3-a9bc-40a5-92d2-d23338b380a1 button.colab-df-convert');\n",
-              "      buttonEl.style.display =\n",
-              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
-              "\n",
-              "      async function convertToInteractive(key) {\n",
-              "        const element = document.querySelector('#df-f9415af3-a9bc-40a5-92d2-d23338b380a1');\n",
-              "        const dataTable =\n",
-              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
-              "                                                    [key], {});\n",
-              "        if (!dataTable) return;\n",
-              "\n",
-              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
-              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
-              "          + ' to learn more about interactive tables.';\n",
-              "        element.innerHTML = '';\n",
-              "        dataTable['output_type'] = 'display_data';\n",
-              "        await google.colab.output.renderOutput(dataTable, element);\n",
-              "        const docLink = document.createElement('div');\n",
-              "        docLink.innerHTML = docLinkHtml;\n",
-              "        element.appendChild(docLink);\n",
-              "      }\n",
-              "    </script>\n",
-              "  </div>\n",
-              "\n",
-              "\n",
-              "    <div id=\"df-f369e2c4-36d9-43b2-9a86-10edbde5a057\">\n",
-              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f369e2c4-36d9-43b2-9a86-10edbde5a057')\"\n",
-              "                title=\"Suggest charts\"\n",
-              "                style=\"display:none;\">\n",
-              "\n",
-              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
-              "     width=\"24px\">\n",
-              "    <g>\n",
-              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
-              "    </g>\n",
-              "</svg>\n",
-              "      </button>\n",
-              "\n",
-              "<style>\n",
-              "  .colab-df-quickchart {\n",
-              "      --bg-color: #E8F0FE;\n",
-              "      --fill-color: #1967D2;\n",
-              "      --hover-bg-color: #E2EBFA;\n",
-              "      --hover-fill-color: #174EA6;\n",
-              "      --disabled-fill-color: #AAA;\n",
-              "      --disabled-bg-color: #DDD;\n",
-              "  }\n",
-              "\n",
-              "  [theme=dark] .colab-df-quickchart {\n",
-              "      --bg-color: #3B4455;\n",
-              "      --fill-color: #D2E3FC;\n",
-              "      --hover-bg-color: #434B5C;\n",
-              "      --hover-fill-color: #FFFFFF;\n",
-              "      --disabled-bg-color: #3B4455;\n",
-              "      --disabled-fill-color: #666;\n",
-              "  }\n",
-              "\n",
-              "  .colab-df-quickchart {\n",
-              "    background-color: var(--bg-color);\n",
-              "    border: none;\n",
-              "    border-radius: 50%;\n",
-              "    cursor: pointer;\n",
-              "    display: none;\n",
-              "    fill: var(--fill-color);\n",
-              "    height: 32px;\n",
-              "    padding: 0;\n",
-              "    width: 32px;\n",
-              "  }\n",
-              "\n",
-              "  .colab-df-quickchart:hover {\n",
-              "    background-color: var(--hover-bg-color);\n",
-              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
-              "    fill: var(--button-hover-fill-color);\n",
-              "  }\n",
-              "\n",
-              "  .colab-df-quickchart-complete:disabled,\n",
-              "  .colab-df-quickchart-complete:disabled:hover {\n",
-              "    background-color: var(--disabled-bg-color);\n",
-              "    fill: var(--disabled-fill-color);\n",
-              "    box-shadow: none;\n",
-              "  }\n",
-              "\n",
-              "  .colab-df-spinner {\n",
-              "    border: 2px solid var(--fill-color);\n",
-              "    border-color: transparent;\n",
-              "    border-bottom-color: var(--fill-color);\n",
-              "    animation:\n",
-              "      spin 1s steps(1) infinite;\n",
-              "  }\n",
-              "\n",
-              "  @keyframes spin {\n",
-              "    0% {\n",
-              "      border-color: transparent;\n",
-              "      border-bottom-color: var(--fill-color);\n",
-              "      border-left-color: var(--fill-color);\n",
-              "    }\n",
-              "    20% {\n",
-              "      border-color: transparent;\n",
-              "      border-left-color: var(--fill-color);\n",
-              "      border-top-color: var(--fill-color);\n",
-              "    }\n",
-              "    30% {\n",
-              "      border-color: transparent;\n",
-              "      border-left-color: var(--fill-color);\n",
-              "      border-top-color: var(--fill-color);\n",
-              "      border-right-color: var(--fill-color);\n",
-              "    }\n",
-              "    40% {\n",
-              "      border-color: transparent;\n",
-              "      border-right-color: var(--fill-color);\n",
-              "      border-top-color: var(--fill-color);\n",
-              "    }\n",
-              "    60% {\n",
-              "      border-color: transparent;\n",
-              "      border-right-color: var(--fill-color);\n",
-              "    }\n",
-              "    80% {\n",
-              "      border-color: transparent;\n",
-              "      border-right-color: var(--fill-color);\n",
-              "      border-bottom-color: var(--fill-color);\n",
-              "    }\n",
-              "    90% {\n",
-              "      border-color: transparent;\n",
-              "      border-bottom-color: var(--fill-color);\n",
-              "    }\n",
-              "  }\n",
-              "</style>\n",
-              "\n",
-              "      <script>\n",
-              "        async function quickchart(key) {\n",
-              "          const quickchartButtonEl =\n",
-              "            document.querySelector('#' + key + ' button');\n",
-              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
-              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
-              "          try {\n",
-              "            const charts = await google.colab.kernel.invokeFunction(\n",
-              "                'suggestCharts', [key], {});\n",
-              "          } catch (error) {\n",
-              "            console.error('Error during call to suggestCharts:', error);\n",
-              "          }\n",
-              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
-              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
-              "        }\n",
-              "        (() => {\n",
-              "          let quickchartButtonEl =\n",
-              "            document.querySelector('#df-f369e2c4-36d9-43b2-9a86-10edbde5a057 button');\n",
-              "          quickchartButtonEl.style.display =\n",
-              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
-              "        })();\n",
-              "      </script>\n",
-              "    </div>\n",
-              "\n",
-              "  <div id=\"id_3cc3d105-8330-4527-83e6-f6ba5e409bad\">\n",
-              "    <style>\n",
-              "      .colab-df-generate {\n",
-              "        background-color: #E8F0FE;\n",
-              "        border: none;\n",
-              "        border-radius: 50%;\n",
-              "        cursor: pointer;\n",
-              "        display: none;\n",
-              "        fill: #1967D2;\n",
-              "        height: 32px;\n",
-              "        padding: 0 0 0 0;\n",
-              "        width: 32px;\n",
-              "      }\n",
-              "\n",
-              "      .colab-df-generate:hover {\n",
-              "        background-color: #E2EBFA;\n",
-              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
-              "        fill: #174EA6;\n",
-              "      }\n",
-              "\n",
-              "      [theme=dark] .colab-df-generate {\n",
-              "        background-color: #3B4455;\n",
-              "        fill: #D2E3FC;\n",
-              "      }\n",
-              "\n",
-              "      [theme=dark] .colab-df-generate:hover {\n",
-              "        background-color: #434B5C;\n",
-              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
-              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
-              "        fill: #FFFFFF;\n",
-              "      }\n",
-              "    </style>\n",
-              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
-              "            title=\"Generate code using this dataframe.\"\n",
-              "            style=\"display:none;\">\n",
-              "\n",
-              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
-              "       width=\"24px\">\n",
-              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
-              "  </svg>\n",
-              "    </button>\n",
-              "    <script>\n",
-              "      (() => {\n",
-              "      const buttonEl =\n",
-              "        document.querySelector('#id_3cc3d105-8330-4527-83e6-f6ba5e409bad button.colab-df-generate');\n",
-              "      buttonEl.style.display =\n",
-              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
-              "\n",
-              "      buttonEl.onclick = () => {\n",
-              "        google.colab.notebook.generateWithVariable('df');\n",
-              "      }\n",
-              "      })();\n",
-              "    </script>\n",
-              "  </div>\n",
-              "\n",
-              "    </div>\n",
-              "  </div>\n"
-            ],
-            "application/vnd.google.colaboratory.intrinsic+json": {
-              "type": "dataframe",
-              "variable_name": "df"
-            }
-          },
-          "metadata": {},
-          "execution_count": 5
-        }
-      ]
-    },
-    {
-      "cell_type": "markdown",
-      "source": [
-        "# 데이터셋 로드"
-      ],
-      "metadata": {
-        "id": "ng-ZikeSl_o9"
-      }
-    },
-    {
-      "cell_type": "markdown",
-      "source": [
-        "- 피처 선택"
-      ],
-      "metadata": {
-        "id": "ssYDGmrLq16F"
-      }
-    },
-    {
-      "cell_type": "code",
-      "source": [
-        "company_name = \"AMZN\"  # 예측할 회사 선택\n",
-        "\n",
-        "# 데이터 선택: 종가는 모든 회사에 대해, 거래량과 감정분석은 예측할 회사만\n",
-        "data = df[[f'prccd_{company}' for company in ['TSLA', 'NVDA', 'MSFT', 'GOOG', 'AAPL', 'DIS', 'XOM', 'CRM', 'INTC', 'AMZN']] +\n",
-        "          [f'cshtrd_{company_name}', f'sent_{company_name}', 'datadate']].copy()\n",
-        "data.set_index('datadate', inplace=True)\n",
-        "\n",
-        "# 예측 회사의 상승/하락 결과 (1: 상승, 0: 하락) : GAT에서 사용 X\n",
-        "# data.loc[:, 'y'] = (df[f'prccd_{company_name}'] > df[f'prccd_{company_name}'].shift(1)).astype(int)\n",
-        "# data = data[1:] # 첫 번째 행은 상승/하락 정보를 알 수 없으므로 제거\n",
-        "\n",
-        "# 감정분석 결측값을 0으로 채움\n",
-        "data.fillna(0, inplace=True)  # 기존 sent에는 NaN이 너무 많음; 임베딩도 NaN으로 출력됨\n",
-        "\n",
-        "# 결과 출력\n",
-        "data"
-      ],
-      "metadata": {
-        "colab": {
-          "base_uri": "https://localhost:8080/",
-          "height": 455
-        },
-        "id": "NvkAcJ2yd59z",
-        "outputId": "b103f9e4-61c5-4589-86a2-7eb065d836f4"
-      },
-      "execution_count": 6,
-      "outputs": [
-        {
-          "output_type": "execute_result",
-          "data": {
-            "text/plain": [
-              "            prccd_TSLA  prccd_NVDA  prccd_MSFT  prccd_GOOG  prccd_AAPL  \\\n",
-              "datadate                                                                 \n",
-              "2014-03-27      207.32       17.79       39.36      558.46      537.46   \n",
-              "2014-03-28      212.37       17.90       40.30      559.99      536.86   \n",
-              "2014-03-31      208.45       17.91       40.99      556.97      536.74   \n",
-              "2014-04-01      216.97       18.65       41.42      567.16      541.65   \n",
-              "2014-04-02      230.29       18.53       41.35      567.00      542.55   \n",
-              "...                ...         ...         ...         ...         ...   \n",
-              "2025-03-17      238.01      119.53      388.70      166.57      214.00   \n",
-              "2025-03-18      225.31      115.43      383.52      162.67      212.69   \n",
-              "2025-03-19      235.86      117.52      387.82      166.28      215.24   \n",
-              "2025-03-20      236.26      118.53      386.84      165.05      214.10   \n",
-              "2025-03-21      248.71      117.70      391.26      166.25      218.27   \n",
-              "\n",
-              "            prccd_DIS  prccd_XOM  prccd_CRM  prccd_INTC  prccd_AMZN  \\\n",
-              "datadate                                                              \n",
-              "2014-03-27      78.48      96.24      55.97      25.310     338.470   \n",
-              "2014-03-28      78.99      97.70      55.75      25.620     338.290   \n",
-              "2014-03-31      80.07      97.68      57.09      25.814     336.365   \n",
-              "2014-04-01      81.57      97.73      58.80      25.990     342.990   \n",
-              "2014-04-02      81.67      97.95      58.15      25.890     341.960   \n",
-              "...               ...        ...        ...         ...         ...   \n",
-              "2025-03-17      99.36     113.76     280.75      25.690     195.740   \n",
-              "2025-03-18      99.35     113.64     278.73      25.920     192.820   \n",
-              "2025-03-19     100.29     115.41     279.39      24.120     195.540   \n",
-              "2025-03-20      98.86     115.90     279.03      23.960     194.950   \n",
-              "2025-03-21      99.46     115.50     280.62      24.260     196.210   \n",
-              "\n",
-              "            cshtrd_AMZN  sent_AMZN  \n",
-              "datadate                            \n",
-              "2014-03-27      5761711        0.0  \n",
-              "2014-03-28      3976769        0.0  \n",
-              "2014-03-31      4276550        0.0  \n",
-              "2014-04-01      3599779        0.0  \n",
-              "2014-04-02      4465927        0.0  \n",
-              "...                 ...        ...  \n",
-              "2025-03-17     47256830        0.0  \n",
-              "2025-03-18     40331650        0.0  \n",
-              "2025-03-19     39283570        0.0  \n",
-              "2025-03-20     38840620        0.0  \n",
-              "2025-03-21     59988490        0.0  \n",
-              "\n",
-              "[2764 rows x 12 columns]"
-            ],
-            "text/html": [
-              "\n",
-              "  <div id=\"df-aa455aaf-4a55-42c6-aaeb-06da7f759ac9\" class=\"colab-df-container\">\n",
-              "    <div>\n",
-              "<style scoped>\n",
-              "    .dataframe tbody tr th:only-of-type {\n",
-              "        vertical-align: middle;\n",
-              "    }\n",
-              "\n",
-              "    .dataframe tbody tr th {\n",
-              "        vertical-align: top;\n",
-              "    }\n",
-              "\n",
-              "    .dataframe thead th {\n",
-              "        text-align: right;\n",
-              "    }\n",
-              "</style>\n",
-              "<table border=\"1\" class=\"dataframe\">\n",
-              "  <thead>\n",
-              "    <tr style=\"text-align: right;\">\n",
-              "      <th></th>\n",
-              "      <th>prccd_TSLA</th>\n",
-              "      <th>prccd_NVDA</th>\n",
-              "      <th>prccd_MSFT</th>\n",
-              "      <th>prccd_GOOG</th>\n",
-              "      <th>prccd_AAPL</th>\n",
-              "      <th>prccd_DIS</th>\n",
-              "      <th>prccd_XOM</th>\n",
-              "      <th>prccd_CRM</th>\n",
-              "      <th>prccd_INTC</th>\n",
-              "      <th>prccd_AMZN</th>\n",
-              "      <th>cshtrd_AMZN</th>\n",
-              "      <th>sent_AMZN</th>\n",
-              "    </tr>\n",
-              "    <tr>\n",
-              "      <th>datadate</th>\n",
-              "      <th></th>\n",
-              "      <th></th>\n",
-              "      <th></th>\n",
-              "      <th></th>\n",
-              "      <th></th>\n",
-              "      <th></th>\n",
-              "      <th></th>\n",
-              "      <th></th>\n",
-              "      <th></th>\n",
-              "      <th></th>\n",
-              "      <th></th>\n",
-              "      <th></th>\n",
-              "    </tr>\n",
-              "  </thead>\n",
-              "  <tbody>\n",
-              "    <tr>\n",
-              "      <th>2014-03-27</th>\n",
-              "      <td>207.32</td>\n",
-              "      <td>17.79</td>\n",
-              "      <td>39.36</td>\n",
-              "      <td>558.46</td>\n",
-              "      <td>537.46</td>\n",
-              "      <td>78.48</td>\n",
-              "      <td>96.24</td>\n",
-              "      <td>55.97</td>\n",
-              "      <td>25.310</td>\n",
-              "      <td>338.470</td>\n",
-              "      <td>5761711</td>\n",
-              "      <td>0.0</td>\n",
-              "    </tr>\n",
-              "    <tr>\n",
-              "      <th>2014-03-28</th>\n",
-              "      <td>212.37</td>\n",
-              "      <td>17.90</td>\n",
-              "      <td>40.30</td>\n",
-              "      <td>559.99</td>\n",
-              "      <td>536.86</td>\n",
-              "      <td>78.99</td>\n",
-              "      <td>97.70</td>\n",
-              "      <td>55.75</td>\n",
-              "      <td>25.620</td>\n",
-              "      <td>338.290</td>\n",
-              "      <td>3976769</td>\n",
-              "      <td>0.0</td>\n",
-              "    </tr>\n",
-              "    <tr>\n",
-              "      <th>2014-03-31</th>\n",
-              "      <td>208.45</td>\n",
-              "      <td>17.91</td>\n",
-              "      <td>40.99</td>\n",
-              "      <td>556.97</td>\n",
-              "      <td>536.74</td>\n",
-              "      <td>80.07</td>\n",
-              "      <td>97.68</td>\n",
-              "      <td>57.09</td>\n",
-              "      <td>25.814</td>\n",
-              "      <td>336.365</td>\n",
-              "      <td>4276550</td>\n",
-              "      <td>0.0</td>\n",
-              "    </tr>\n",
-              "    <tr>\n",
-              "      <th>2014-04-01</th>\n",
-              "      <td>216.97</td>\n",
-              "      <td>18.65</td>\n",
-              "      <td>41.42</td>\n",
-              "      <td>567.16</td>\n",
-              "      <td>541.65</td>\n",
-              "      <td>81.57</td>\n",
-              "      <td>97.73</td>\n",
-              "      <td>58.80</td>\n",
-              "      <td>25.990</td>\n",
-              "      <td>342.990</td>\n",
-              "      <td>3599779</td>\n",
-              "      <td>0.0</td>\n",
-              "    </tr>\n",
-              "    <tr>\n",
-              "      <th>2014-04-02</th>\n",
-              "      <td>230.29</td>\n",
-              "      <td>18.53</td>\n",
-              "      <td>41.35</td>\n",
-              "      <td>567.00</td>\n",
-              "      <td>542.55</td>\n",
-              "      <td>81.67</td>\n",
-              "      <td>97.95</td>\n",
-              "      <td>58.15</td>\n",
-              "      <td>25.890</td>\n",
-              "      <td>341.960</td>\n",
-              "      <td>4465927</td>\n",
-              "      <td>0.0</td>\n",
-              "    </tr>\n",
-              "    <tr>\n",
-              "      <th>...</th>\n",
-              "      <td>...</td>\n",
-              "      <td>...</td>\n",
-              "      <td>...</td>\n",
-              "      <td>...</td>\n",
-              "      <td>...</td>\n",
-              "      <td>...</td>\n",
-              "      <td>...</td>\n",
-              "      <td>...</td>\n",
-              "      <td>...</td>\n",
-              "      <td>...</td>\n",
-              "      <td>...</td>\n",
-              "      <td>...</td>\n",
-              "    </tr>\n",
-              "    <tr>\n",
-              "      <th>2025-03-17</th>\n",
-              "      <td>238.01</td>\n",
-              "      <td>119.53</td>\n",
-              "      <td>388.70</td>\n",
-              "      <td>166.57</td>\n",
-              "      <td>214.00</td>\n",
-              "      <td>99.36</td>\n",
-              "      <td>113.76</td>\n",
-              "      <td>280.75</td>\n",
-              "      <td>25.690</td>\n",
-              "      <td>195.740</td>\n",
-              "      <td>47256830</td>\n",
-              "      <td>0.0</td>\n",
-              "    </tr>\n",
-              "    <tr>\n",
-              "      <th>2025-03-18</th>\n",
-              "      <td>225.31</td>\n",
-              "      <td>115.43</td>\n",
-              "      <td>383.52</td>\n",
-              "      <td>162.67</td>\n",
-              "      <td>212.69</td>\n",
-              "      <td>99.35</td>\n",
-              "      <td>113.64</td>\n",
-              "      <td>278.73</td>\n",
-              "      <td>25.920</td>\n",
-              "      <td>192.820</td>\n",
-              "      <td>40331650</td>\n",
-              "      <td>0.0</td>\n",
-              "    </tr>\n",
-              "    <tr>\n",
-              "      <th>2025-03-19</th>\n",
-              "      <td>235.86</td>\n",
-              "      <td>117.52</td>\n",
-              "      <td>387.82</td>\n",
-              "      <td>166.28</td>\n",
-              "      <td>215.24</td>\n",
-              "      <td>100.29</td>\n",
-              "      <td>115.41</td>\n",
-              "      <td>279.39</td>\n",
-              "      <td>24.120</td>\n",
-              "      <td>195.540</td>\n",
-              "      <td>39283570</td>\n",
-              "      <td>0.0</td>\n",
-              "    </tr>\n",
-              "    <tr>\n",
-              "      <th>2025-03-20</th>\n",
-              "      <td>236.26</td>\n",
-              "      <td>118.53</td>\n",
-              "      <td>386.84</td>\n",
-              "      <td>165.05</td>\n",
-              "      <td>214.10</td>\n",
-              "      <td>98.86</td>\n",
-              "      <td>115.90</td>\n",
-              "      <td>279.03</td>\n",
-              "      <td>23.960</td>\n",
-              "      <td>194.950</td>\n",
-              "      <td>38840620</td>\n",
-              "      <td>0.0</td>\n",
-              "    </tr>\n",
-              "    <tr>\n",
-              "      <th>2025-03-21</th>\n",
-              "      <td>248.71</td>\n",
-              "      <td>117.70</td>\n",
-              "      <td>391.26</td>\n",
-              "      <td>166.25</td>\n",
-              "      <td>218.27</td>\n",
-              "      <td>99.46</td>\n",
-              "      <td>115.50</td>\n",
-              "      <td>280.62</td>\n",
-              "      <td>24.260</td>\n",
-              "      <td>196.210</td>\n",
-              "      <td>59988490</td>\n",
-              "      <td>0.0</td>\n",
-              "    </tr>\n",
-              "  </tbody>\n",
-              "</table>\n",
-              "<p>2764 rows × 12 columns</p>\n",
-              "</div>\n",
-              "    <div class=\"colab-df-buttons\">\n",
-              "\n",
-              "  <div class=\"colab-df-container\">\n",
-              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-aa455aaf-4a55-42c6-aaeb-06da7f759ac9')\"\n",
-              "            title=\"Convert this dataframe to an interactive table.\"\n",
-              "            style=\"display:none;\">\n",
-              "\n",
-              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
-              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
-              "  </svg>\n",
-              "    </button>\n",
-              "\n",
-              "  <style>\n",
-              "    .colab-df-container {\n",
-              "      display:flex;\n",
-              "      gap: 12px;\n",
-              "    }\n",
-              "\n",
-              "    .colab-df-convert {\n",
-              "      background-color: #E8F0FE;\n",
-              "      border: none;\n",
-              "      border-radius: 50%;\n",
-              "      cursor: pointer;\n",
-              "      display: none;\n",
-              "      fill: #1967D2;\n",
-              "      height: 32px;\n",
-              "      padding: 0 0 0 0;\n",
-              "      width: 32px;\n",
-              "    }\n",
-              "\n",
-              "    .colab-df-convert:hover {\n",
-              "      background-color: #E2EBFA;\n",
-              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
-              "      fill: #174EA6;\n",
-              "    }\n",
-              "\n",
-              "    .colab-df-buttons div {\n",
-              "      margin-bottom: 4px;\n",
-              "    }\n",
-              "\n",
-              "    [theme=dark] .colab-df-convert {\n",
-              "      background-color: #3B4455;\n",
-              "      fill: #D2E3FC;\n",
-              "    }\n",
-              "\n",
-              "    [theme=dark] .colab-df-convert:hover {\n",
-              "      background-color: #434B5C;\n",
-              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
-              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
-              "      fill: #FFFFFF;\n",
-              "    }\n",
-              "  </style>\n",
-              "\n",
-              "    <script>\n",
-              "      const buttonEl =\n",
-              "        document.querySelector('#df-aa455aaf-4a55-42c6-aaeb-06da7f759ac9 button.colab-df-convert');\n",
-              "      buttonEl.style.display =\n",
-              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
-              "\n",
-              "      async function convertToInteractive(key) {\n",
-              "        const element = document.querySelector('#df-aa455aaf-4a55-42c6-aaeb-06da7f759ac9');\n",
-              "        const dataTable =\n",
-              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
-              "                                                    [key], {});\n",
-              "        if (!dataTable) return;\n",
-              "\n",
-              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
-              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
-              "          + ' to learn more about interactive tables.';\n",
-              "        element.innerHTML = '';\n",
-              "        dataTable['output_type'] = 'display_data';\n",
-              "        await google.colab.output.renderOutput(dataTable, element);\n",
-              "        const docLink = document.createElement('div');\n",
-              "        docLink.innerHTML = docLinkHtml;\n",
-              "        element.appendChild(docLink);\n",
-              "      }\n",
-              "    </script>\n",
-              "  </div>\n",
-              "\n",
-              "\n",
-              "    <div id=\"df-0172de52-16bd-4712-94a9-f5b657175c00\">\n",
-              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0172de52-16bd-4712-94a9-f5b657175c00')\"\n",
-              "                title=\"Suggest charts\"\n",
-              "                style=\"display:none;\">\n",
-              "\n",
-              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
-              "     width=\"24px\">\n",
-              "    <g>\n",
-              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
-              "    </g>\n",
-              "</svg>\n",
-              "      </button>\n",
-              "\n",
-              "<style>\n",
-              "  .colab-df-quickchart {\n",
-              "      --bg-color: #E8F0FE;\n",
-              "      --fill-color: #1967D2;\n",
-              "      --hover-bg-color: #E2EBFA;\n",
-              "      --hover-fill-color: #174EA6;\n",
-              "      --disabled-fill-color: #AAA;\n",
-              "      --disabled-bg-color: #DDD;\n",
-              "  }\n",
-              "\n",
-              "  [theme=dark] .colab-df-quickchart {\n",
-              "      --bg-color: #3B4455;\n",
-              "      --fill-color: #D2E3FC;\n",
-              "      --hover-bg-color: #434B5C;\n",
-              "      --hover-fill-color: #FFFFFF;\n",
-              "      --disabled-bg-color: #3B4455;\n",
-              "      --disabled-fill-color: #666;\n",
-              "  }\n",
-              "\n",
-              "  .colab-df-quickchart {\n",
-              "    background-color: var(--bg-color);\n",
-              "    border: none;\n",
-              "    border-radius: 50%;\n",
-              "    cursor: pointer;\n",
-              "    display: none;\n",
-              "    fill: var(--fill-color);\n",
-              "    height: 32px;\n",
-              "    padding: 0;\n",
-              "    width: 32px;\n",
-              "  }\n",
-              "\n",
-              "  .colab-df-quickchart:hover {\n",
-              "    background-color: var(--hover-bg-color);\n",
-              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
-              "    fill: var(--button-hover-fill-color);\n",
-              "  }\n",
-              "\n",
-              "  .colab-df-quickchart-complete:disabled,\n",
-              "  .colab-df-quickchart-complete:disabled:hover {\n",
-              "    background-color: var(--disabled-bg-color);\n",
-              "    fill: var(--disabled-fill-color);\n",
-              "    box-shadow: none;\n",
-              "  }\n",
-              "\n",
-              "  .colab-df-spinner {\n",
-              "    border: 2px solid var(--fill-color);\n",
-              "    border-color: transparent;\n",
-              "    border-bottom-color: var(--fill-color);\n",
-              "    animation:\n",
-              "      spin 1s steps(1) infinite;\n",
-              "  }\n",
-              "\n",
-              "  @keyframes spin {\n",
-              "    0% {\n",
-              "      border-color: transparent;\n",
-              "      border-bottom-color: var(--fill-color);\n",
-              "      border-left-color: var(--fill-color);\n",
-              "    }\n",
-              "    20% {\n",
-              "      border-color: transparent;\n",
-              "      border-left-color: var(--fill-color);\n",
-              "      border-top-color: var(--fill-color);\n",
-              "    }\n",
-              "    30% {\n",
-              "      border-color: transparent;\n",
-              "      border-left-color: var(--fill-color);\n",
-              "      border-top-color: var(--fill-color);\n",
-              "      border-right-color: var(--fill-color);\n",
-              "    }\n",
-              "    40% {\n",
-              "      border-color: transparent;\n",
-              "      border-right-color: var(--fill-color);\n",
-              "      border-top-color: var(--fill-color);\n",
-              "    }\n",
-              "    60% {\n",
-              "      border-color: transparent;\n",
-              "      border-right-color: var(--fill-color);\n",
-              "    }\n",
-              "    80% {\n",
-              "      border-color: transparent;\n",
-              "      border-right-color: var(--fill-color);\n",
-              "      border-bottom-color: var(--fill-color);\n",
-              "    }\n",
-              "    90% {\n",
-              "      border-color: transparent;\n",
-              "      border-bottom-color: var(--fill-color);\n",
-              "    }\n",
-              "  }\n",
-              "</style>\n",
-              "\n",
-              "      <script>\n",
-              "        async function quickchart(key) {\n",
-              "          const quickchartButtonEl =\n",
-              "            document.querySelector('#' + key + ' button');\n",
-              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
-              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
-              "          try {\n",
-              "            const charts = await google.colab.kernel.invokeFunction(\n",
-              "                'suggestCharts', [key], {});\n",
-              "          } catch (error) {\n",
-              "            console.error('Error during call to suggestCharts:', error);\n",
-              "          }\n",
-              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
-              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
-              "        }\n",
-              "        (() => {\n",
-              "          let quickchartButtonEl =\n",
-              "            document.querySelector('#df-0172de52-16bd-4712-94a9-f5b657175c00 button');\n",
-              "          quickchartButtonEl.style.display =\n",
-              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
-              "        })();\n",
-              "      </script>\n",
-              "    </div>\n",
-              "\n",
-              "  <div id=\"id_68b40e53-06a4-4ddd-bce3-dfedca850499\">\n",
-              "    <style>\n",
-              "      .colab-df-generate {\n",
-              "        background-color: #E8F0FE;\n",
-              "        border: none;\n",
-              "        border-radius: 50%;\n",
-              "        cursor: pointer;\n",
-              "        display: none;\n",
-              "        fill: #1967D2;\n",
-              "        height: 32px;\n",
-              "        padding: 0 0 0 0;\n",
-              "        width: 32px;\n",
-              "      }\n",
-              "\n",
-              "      .colab-df-generate:hover {\n",
-              "        background-color: #E2EBFA;\n",
-              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
-              "        fill: #174EA6;\n",
-              "      }\n",
-              "\n",
-              "      [theme=dark] .colab-df-generate {\n",
-              "        background-color: #3B4455;\n",
-              "        fill: #D2E3FC;\n",
-              "      }\n",
-              "\n",
-              "      [theme=dark] .colab-df-generate:hover {\n",
-              "        background-color: #434B5C;\n",
-              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
-              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
-              "        fill: #FFFFFF;\n",
-              "      }\n",
-              "    </style>\n",
-              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data')\"\n",
-              "            title=\"Generate code using this dataframe.\"\n",
-              "            style=\"display:none;\">\n",
-              "\n",
-              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
-              "       width=\"24px\">\n",
-              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
-              "  </svg>\n",
-              "    </button>\n",
-              "    <script>\n",
-              "      (() => {\n",
-              "      const buttonEl =\n",
-              "        document.querySelector('#id_68b40e53-06a4-4ddd-bce3-dfedca850499 button.colab-df-generate');\n",
-              "      buttonEl.style.display =\n",
-              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
-              "\n",
-              "      buttonEl.onclick = () => {\n",
-              "        google.colab.notebook.generateWithVariable('data');\n",
-              "      }\n",
-              "      })();\n",
-              "    </script>\n",
-              "  </div>\n",
-              "\n",
-              "    </div>\n",
-              "  </div>\n"
-            ],
-            "application/vnd.google.colaboratory.intrinsic+json": {
-              "type": "dataframe",
-              "variable_name": "data",
-              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 2764,\n  \"fields\": [\n    {\n      \"column\": \"datadate\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 2764,\n        \"samples\": [\n          \"2022-02-16\",\n          \"2019-01-25\",\n          \"2019-09-26\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"prccd_TSLA\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 278.23144861343263,\n        \"min\": 108.1,\n        \"max\": 2238.75,\n        \"num_unique_values\": 2656,\n        \"samples\": [\n          348.05,\n          245.26,\n          424.23\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"prccd_NVDA\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 203.0253020561452,\n        \"min\": 16.785,\n        \"max\": 1224.4,\n        \"num_unique_values\": 2609,\n        \"samples\": [\n          418.62,\n          272.47,\n          21.06\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"prccd_MSFT\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 127.02823369325104,\n        \"min\": 39.06,\n        \"max\": 467.56,\n        \"num_unique_values\": 2568,\n        \"samples\": [\n          411.46,\n          95.82,\n          138.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"prccd_GOOG\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 762.4237845252198,\n        \"min\": 83.49,\n        \"max\": 3014.18,\n        \"num_unique_values\": 2718,\n        \"samples\": [\n          108.21,\n          700.56,\n          1299.19\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"prccd_AAPL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 81.0907297819937,\n        \"min\": 90.28,\n        \"max\": 647.35,\n        \"num_unique_values\": 2532,\n        \"samples\": [\n          173.31,\n          150.82,\n          109.25\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"prccd_DIS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25.677768944728097,\n        \"min\": 77.01,\n        \"max\": 201.91,\n        \"num_unique_values\": 2197,\n        \"samples\": [\n          94.02,\n          101.72,\n          106.59\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"prccd_XOM\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 20.535404346961304,\n        \"min\": 31.45,\n        \"max\": 125.37,\n        \"num_unique_values\": 2204,\n        \"samples\": [\n          75.74,\n          83.65,\n          112.93\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"prccd_CRM\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 77.59967101861768,\n        \"min\": 49.13,\n        \"max\": 367.87,\n        \"num_unique_values\": 2566,\n        \"samples\": [\n          141.76,\n          183.8,\n          152.74\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"prccd_INTC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.122598668834152,\n        \"min\": 18.89,\n        \"max\": 68.47,\n        \"num_unique_values\": 1932,\n        \"samples\": [\n          58.95,\n          29.51,\n          24.05\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"prccd_AMZN\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1109.418847975065,\n        \"min\": 81.82,\n        \"max\": 3731.41,\n        \"num_unique_values\": 2723,\n        \"samples\": [\n          1776.66,\n          695.27,\n          2351.26\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cshtrd_AMZN\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24412667,\n        \"min\": 881337,\n        \"max\": 222689600,\n        \"num_unique_values\": 2764,\n        \"samples\": [\n          2619429,\n          4933434,\n          3567955\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sent_AMZN\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12211000310378821,\n        \"min\": -0.25,\n        \"max\": 0.785714286,\n        \"num_unique_values\": 162,\n        \"samples\": [\n          0.429824561,\n          0.608974359,\n          0.268817204\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
-            }
-          },
-          "metadata": {},
-          "execution_count": 6
-        }
-      ]
-    },
-    {
-      "cell_type": "code",
-      "source": [
-        "data.isna().sum()"
-      ],
-      "metadata": {
-        "id": "0h0OYum5RzC6",
-        "outputId": "75c4f819-1ca2-4541-d3ad-3fe72e048c2f",
-        "colab": {
-          "base_uri": "https://localhost:8080/",
-          "height": 460
-        }
-      },
-      "execution_count": 7,
-      "outputs": [
-        {
-          "output_type": "execute_result",
-          "data": {
-            "text/plain": [
-              "prccd_TSLA     0\n",
-              "prccd_NVDA     0\n",
-              "prccd_MSFT     0\n",
-              "prccd_GOOG     0\n",
-              "prccd_AAPL     0\n",
-              "prccd_DIS      0\n",
-              "prccd_XOM      0\n",
-              "prccd_CRM      0\n",
-              "prccd_INTC     0\n",
-              "prccd_AMZN     0\n",
-              "cshtrd_AMZN    0\n",
-              "sent_AMZN      0\n",
-              "dtype: int64"
-            ],
-            "text/html": [
-              "<div>\n",
-              "<style scoped>\n",
-              "    .dataframe tbody tr th:only-of-type {\n",
-              "        vertical-align: middle;\n",
-              "    }\n",
-              "\n",
-              "    .dataframe tbody tr th {\n",
-              "        vertical-align: top;\n",
-              "    }\n",
-              "\n",
-              "    .dataframe thead th {\n",
-              "        text-align: right;\n",
-              "    }\n",
-              "</style>\n",
-              "<table border=\"1\" class=\"dataframe\">\n",
-              "  <thead>\n",
-              "    <tr style=\"text-align: right;\">\n",
-              "      <th></th>\n",
-              "      <th>0</th>\n",
-              "    </tr>\n",
-              "  </thead>\n",
-              "  <tbody>\n",
-              "    <tr>\n",
-              "      <th>prccd_TSLA</th>\n",
-              "      <td>0</td>\n",
-              "    </tr>\n",
-              "    <tr>\n",
-              "      <th>prccd_NVDA</th>\n",
-              "      <td>0</td>\n",
-              "    </tr>\n",
-              "    <tr>\n",
-              "      <th>prccd_MSFT</th>\n",
-              "      <td>0</td>\n",
-              "    </tr>\n",
-              "    <tr>\n",
-              "      <th>prccd_GOOG</th>\n",
-              "      <td>0</td>\n",
-              "    </tr>\n",
-              "    <tr>\n",
-              "      <th>prccd_AAPL</th>\n",
-              "      <td>0</td>\n",
-              "    </tr>\n",
-              "    <tr>\n",
-              "      <th>prccd_DIS</th>\n",
-              "      <td>0</td>\n",
-              "    </tr>\n",
-              "    <tr>\n",
-              "      <th>prccd_XOM</th>\n",
-              "      <td>0</td>\n",
-              "    </tr>\n",
-              "    <tr>\n",
-              "      <th>prccd_CRM</th>\n",
-              "      <td>0</td>\n",
-              "    </tr>\n",
-              "    <tr>\n",
-              "      <th>prccd_INTC</th>\n",
-              "      <td>0</td>\n",
-              "    </tr>\n",
-              "    <tr>\n",
-              "      <th>prccd_AMZN</th>\n",
-              "      <td>0</td>\n",
-              "    </tr>\n",
-              "    <tr>\n",
-              "      <th>cshtrd_AMZN</th>\n",
-              "      <td>0</td>\n",
-              "    </tr>\n",
-              "    <tr>\n",
-              "      <th>sent_AMZN</th>\n",
-              "      <td>0</td>\n",
-              "    </tr>\n",
-              "  </tbody>\n",
-              "</table>\n",
-              "</div><br><label><b>dtype:</b> int64</label>"
-            ]
-          },
-          "metadata": {},
-          "execution_count": 7
-        }
-      ]
-    },
-    {
-      "cell_type": "markdown",
-      "source": [
-        "# GAT"
-      ],
-      "metadata": {
-        "id": "c3a9pQD5FCYz"
-      }
-    },
-    {
-      "cell_type": "markdown",
-      "source": [
-        "- 노드 : 각 시점\n",
-        "- 피처 : 10개 주식 종가 + 예측 기업 감정분석\n",
-        "- GAT의 역할 : 피처들의 관계(회사 간의 관계 등)을 파악해 **시점별** 임베딩 생성;  다른 시점과의 연관성을 반영    \n",
-        "(ex. 1~10일 전과 연결이 되어있는 상태에서, 1일 전 정보는 얼마나 중요하고 10일 전 정보는 얼마나 중요한지 판단)"
-      ],
-      "metadata": {
-        "id": "ZyPD4n10nlku"
-      }
-    },
-    {
-      "cell_type": "code",
-      "source": [
-        "# PyTorch Geometric 설치\n",
-        "!pip install torch-geometric\n",
-        "!pip install pyg-lib torch-scatter torch-sparse torch-cluster torch-spline-conv -f https://data.pyg.org/whl/torch-2.3.0+cpu.html"
-      ],
-      "metadata": {
-        "id": "zcWtyQhmENfe",
-        "colab": {
-          "base_uri": "https://localhost:8080/"
-        },
-        "collapsed": true,
-        "outputId": "23fe19b7-0e16-4b58-cfa0-231956c66a69"
-      },
-      "execution_count": 9,
-      "outputs": [
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "Collecting torch-geometric\n",
-            "  Downloading torch_geometric-2.6.1-py3-none-any.whl.metadata (63 kB)\n",
-            "\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/63.1 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m63.1/63.1 kB\u001b[0m \u001b[31m1.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
-            "\u001b[?25hRequirement already satisfied: aiohttp in /usr/local/lib/python3.11/dist-packages (from torch-geometric) (3.11.15)\n",
-            "Requirement already satisfied: fsspec in /usr/local/lib/python3.11/dist-packages (from torch-geometric) (2025.3.2)\n",
-            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch-geometric) (3.1.6)\n",
-            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from torch-geometric) (2.0.2)\n",
-            "Requirement already satisfied: psutil>=5.8.0 in /usr/local/lib/python3.11/dist-packages (from torch-geometric) (5.9.5)\n",
-            "Requirement already satisfied: pyparsing in /usr/local/lib/python3.11/dist-packages (from torch-geometric) (3.2.3)\n",
-            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from torch-geometric) (2.32.3)\n",
-            "Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from torch-geometric) (4.67.1)\n",
-            "Requirement already satisfied: aiohappyeyeballs>=2.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->torch-geometric) (2.6.1)\n",
-            "Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from aiohttp->torch-geometric) (1.3.2)\n",
-            "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->torch-geometric) (25.3.0)\n",
-            "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from aiohttp->torch-geometric) (1.6.0)\n",
-            "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.11/dist-packages (from aiohttp->torch-geometric) (6.4.3)\n",
-            "Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->torch-geometric) (0.3.1)\n",
-            "Requirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->torch-geometric) (1.20.0)\n",
-            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch-geometric) (3.0.2)\n",
-            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->torch-geometric) (3.4.1)\n",
-            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->torch-geometric) (3.10)\n",
-            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->torch-geometric) (2.4.0)\n",
-            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->torch-geometric) (2025.4.26)\n",
-            "Downloading torch_geometric-2.6.1-py3-none-any.whl (1.1 MB)\n",
-            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.1/1.1 MB\u001b[0m \u001b[31m18.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
-            "\u001b[?25hInstalling collected packages: torch-geometric\n",
-            "Successfully installed torch-geometric-2.6.1\n",
-            "Looking in links: https://data.pyg.org/whl/torch-2.3.0+cpu.html\n",
-            "Collecting pyg-lib\n",
-            "  Downloading https://data.pyg.org/whl/torch-2.3.0%2Bcpu/pyg_lib-0.4.0%2Bpt23cpu-cp311-cp311-linux_x86_64.whl (1.3 MB)\n",
-            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.3/1.3 MB\u001b[0m \u001b[31m12.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
-            "\u001b[?25hCollecting torch-scatter\n",
-            "  Downloading https://data.pyg.org/whl/torch-2.3.0%2Bcpu/torch_scatter-2.1.2%2Bpt23cpu-cp311-cp311-linux_x86_64.whl (515 kB)\n",
-            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m515.4/515.4 kB\u001b[0m \u001b[31m23.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
-            "\u001b[?25hCollecting torch-sparse\n",
-            "  Downloading https://data.pyg.org/whl/torch-2.3.0%2Bcpu/torch_sparse-0.6.18%2Bpt23cpu-cp311-cp311-linux_x86_64.whl (1.2 MB)\n",
-            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.2/1.2 MB\u001b[0m \u001b[31m34.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
-            "\u001b[?25hCollecting torch-cluster\n",
-            "  Downloading https://data.pyg.org/whl/torch-2.3.0%2Bcpu/torch_cluster-1.6.3%2Bpt23cpu-cp311-cp311-linux_x86_64.whl (785 kB)\n",
-            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m785.3/785.3 kB\u001b[0m \u001b[31m43.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
-            "\u001b[?25hCollecting torch-spline-conv\n",
-            "  Downloading https://data.pyg.org/whl/torch-2.3.0%2Bcpu/torch_spline_conv-1.2.2%2Bpt23cpu-cp311-cp311-linux_x86_64.whl (217 kB)\n",
-            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m217.6/217.6 kB\u001b[0m \u001b[31m14.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
-            "\u001b[?25hRequirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from torch-sparse) (1.15.2)\n",
-            "Requirement already satisfied: numpy<2.5,>=1.23.5 in /usr/local/lib/python3.11/dist-packages (from scipy->torch-sparse) (2.0.2)\n",
-            "Installing collected packages: torch-spline-conv, torch-scatter, pyg-lib, torch-sparse, torch-cluster\n",
-            "Successfully installed pyg-lib-0.4.0+pt23cpu torch-cluster-1.6.3+pt23cpu torch-scatter-2.1.2+pt23cpu torch-sparse-0.6.18+pt23cpu torch-spline-conv-1.2.2+pt23cpu\n"
-          ]
-        }
-      ]
-    },
-    {
-      "cell_type": "code",
-      "source": [
-        "# import 문\n",
-        "import torch\n",
-        "import torch.nn as nn\n",
-        "from torch_geometric.nn import GATv2Conv"
-      ],
-      "metadata": {
-        "id": "hKYw4OJfKP-A",
-        "colab": {
-          "base_uri": "https://localhost:8080/"
-        },
-        "collapsed": true,
-        "outputId": "b8c7e34f-c825-4e62-9f01-2d54658bed35"
-      },
-      "execution_count": 10,
-      "outputs": [
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "/usr/local/lib/python3.11/dist-packages/torch_geometric/typing.py:68: UserWarning: An issue occurred while importing 'pyg-lib'. Disabling its usage. Stacktrace: /usr/local/lib/python3.11/dist-packages/libpyg.so: undefined symbol: _ZN3c1010Dispatcher17runRecordFunctionERN2at14RecordFunctionESt17reference_wrapperIKNS_14FunctionSchemaEENS_11DispatchKeyE\n",
-            "  warnings.warn(f\"An issue occurred while importing 'pyg-lib'. \"\n",
-            "/usr/local/lib/python3.11/dist-packages/torch_geometric/typing.py:86: UserWarning: An issue occurred while importing 'torch-scatter'. Disabling its usage. Stacktrace: /usr/local/lib/python3.11/dist-packages/torch_scatter/_version_cpu.so: undefined symbol: _ZN5torch3jit17parseSchemaOrNameERKSs\n",
-            "  warnings.warn(f\"An issue occurred while importing 'torch-scatter'. \"\n",
-            "/usr/local/lib/python3.11/dist-packages/torch_geometric/typing.py:97: UserWarning: An issue occurred while importing 'torch-cluster'. Disabling its usage. Stacktrace: /usr/local/lib/python3.11/dist-packages/torch_cluster/_version_cpu.so: undefined symbol: _ZN5torch3jit17parseSchemaOrNameERKSs\n",
-            "  warnings.warn(f\"An issue occurred while importing 'torch-cluster'. \"\n",
-            "/usr/local/lib/python3.11/dist-packages/torch_geometric/typing.py:113: UserWarning: An issue occurred while importing 'torch-spline-conv'. Disabling its usage. Stacktrace: /usr/local/lib/python3.11/dist-packages/torch_spline_conv/_version_cpu.so: undefined symbol: _ZN5torch3jit17parseSchemaOrNameERKSs\n",
-            "  warnings.warn(\n",
-            "/usr/local/lib/python3.11/dist-packages/torch_geometric/typing.py:124: UserWarning: An issue occurred while importing 'torch-sparse'. Disabling its usage. Stacktrace: /usr/local/lib/python3.11/dist-packages/torch_sparse/_version_cpu.so: undefined symbol: _ZN5torch3jit17parseSchemaOrNameERKSs\n",
-            "  warnings.warn(f\"An issue occurred while importing 'torch-sparse'. \"\n"
-          ]
-        }
-      ]
-    },
-    {
-      "cell_type": "code",
-      "source": [
-        "# GAT 레이어 정의\n",
-        "class GATLayer(nn.Module):\n",
-        "    def __init__(self, in_features, out_features, heads=4):\n",
-        "        super().__init__()\n",
-        "        self.gat = GATv2Conv(in_features, out_features, heads=heads, concat=False) # 선형 변환 : concat이 True이면 결합, False이면 평균\n",
-        "                                                                                   # GATv2Conv 내부에서 어텐션 계산이 수행됨\n",
-        "\n",
-        "    def forward(self, x, edge_index):\n",
-        "        return self.gat(x, edge_index)"
-      ],
-      "metadata": {
-        "id": "OeUAFsolD3_n"
-      },
-      "execution_count": 11,
-      "outputs": []
-    },
-    {
-      "cell_type": "code",
-      "source": [
-        "# 데이터 준비\n",
-        "node_features = data.values  # shape: [날짜 수, feature 수]\n",
-        "n_nodes = node_features.shape[0] # 노드 수 (==날짜 수)\n",
-        "\n",
-        "# 그래프 형태로 변환 : 엣지 생성 (시점 간 연결)\n",
-        "edge_list = []\n",
-        "for i in range(n_nodes):\n",
-        "    for j in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]: # 이후 시점들에 단방향 연결; (휴장 같은 것은 생각하지 않음.... 시점 기준)\n",
-        "        if i + j < n_nodes:\n",
-        "            edge_list.append([i, i + j])\n",
-        "edge_index = torch.tensor(edge_list).t()"
-      ],
-      "metadata": {
-        "id": "q8GV9ihbilPA"
-      },
-      "execution_count": 12,
-      "outputs": []
-    },
-    {
-      "cell_type": "code",
-      "source": [
-        "edge_index # 출력 결과의 첫째행이 출발노드, 둘째행이 도착노드!"
-      ],
-      "metadata": {
-        "colab": {
-          "base_uri": "https://localhost:8080/"
-        },
-        "id": "CoPQPC7lqhYP",
-        "outputId": "f4422a70-13fd-4966-e6ba-664c8e8354f7"
-      },
-      "execution_count": 13,
-      "outputs": [
-        {
-          "output_type": "execute_result",
-          "data": {
-            "text/plain": [
-              "tensor([[   0,    0,    0,  ..., 2761, 2761, 2762],\n",
-              "        [   1,    2,    3,  ..., 2762, 2763, 2763]])"
-            ]
-          },
-          "metadata": {},
-          "execution_count": 13
-        }
-      ]
-    },
-    {
-      "cell_type": "code",
-      "source": [
-        "# GAT 입력 형태로 변환\n",
-        "x = torch.tensor(node_features, dtype=torch.float)"
-      ],
-      "metadata": {
-        "id": "QHYMVczGi_Ey"
-      },
-      "execution_count": 14,
-      "outputs": []
-    },
-    {
-      "cell_type": "code",
-      "source": [
-        "# GAT 모델 생성 및 실행\n",
-        "gat_model = GATLayer(in_features=data.shape[1], out_features=8) # 결과: 각 시점(노드)에 대한 (output_features)차원 임베딩\n",
-        "embeddings = gat_model(x, edge_index)  # shape: [날짜 수, 설정한 out_features 수]"
-      ],
-      "metadata": {
-        "id": "fjZPQBOtDDlR"
-      },
-      "execution_count": 15,
-      "outputs": []
-    },
-    {
-      "cell_type": "code",
-      "source": [
-        "embeddings"
-      ],
-      "metadata": {
-        "colab": {
-          "base_uri": "https://localhost:8080/"
-        },
-        "id": "y20jeOXzKiQE",
-        "outputId": "492af6b7-4c9a-436a-d480-50b904f861ad"
-      },
-      "execution_count": 16,
-      "outputs": [
-        {
-          "output_type": "execute_result",
-          "data": {
-            "text/plain": [
-              "tensor([[   65129.2148,  -482026.8750,   -86618.8984,  ...,\n",
-              "           739839.6250,  -458352.7500,   438598.1562],\n",
-              "        [  124705.3594,  -421653.4688,  -105195.8516,  ...,\n",
-              "           699307.2500,  -454739.8125,   407343.6562],\n",
-              "        [   99830.0469,  -444466.2188,  -111441.1016,  ...,\n",
-              "           695413.3750,  -454175.0625,   403961.0312],\n",
-              "        ...,\n",
-              "        [ 1162427.0000, -4682110.5000, -1264119.6250,  ...,\n",
-              "          7362709.0000, -4873425.0000,  4253154.0000],\n",
-              "        [ 1162427.0000, -4682110.5000, -1264119.6250,  ...,\n",
-              "          7362709.0000, -4873425.0000,  4253154.0000],\n",
-              "        [ -490411.5625, -6197898.0000, -1679043.7500,  ...,\n",
-              "          7103988.0000, -4835910.5000,  4028366.2500]], grad_fn=<AddBackward0>)"
-            ]
-          },
-          "metadata": {},
-          "execution_count": 16
-        }
-      ]
-    },
-    {
-      "cell_type": "markdown",
-      "source": [
-        "# csv로 저장"
-      ],
-      "metadata": {
-        "id": "6Qc2aXFfaIms"
-      }
-    },
-    {
-      "cell_type": "code",
-      "source": [
-        "embeddings_np = embeddings.detach().cpu().numpy()\n",
-        "\n",
-        "# DataFrame으로 변환\n",
-        "df_embeddings = pd.DataFrame(embeddings_np)\n",
-        "\n",
-        "# data의 인덱스(datadate)를 가져와서 추가 (data는 이미 set_index로 datadate를 인덱스로 설정했음)\n",
-        "df_embeddings['datadate'] = data.index.values\n",
-        "\n",
-        "# 컬럼 이름 설정\n",
-        "column_names = [f'emb_{i}' for i in range(embeddings_np.shape[1])]\n",
-        "df_embeddings.columns = column_names + ['datadate']\n",
-        "\n",
-        "# datadate를 첫 번째 컬럼으로 이동\n",
-        "df_embeddings = df_embeddings[['datadate'] + column_names]\n",
-        "\n",
-        "# 결과 확인\n",
-        "print(\"Embeddings with datadate:\")\n",
-        "print(df_embeddings.head())"
-      ],
-      "metadata": {
-        "id": "L1bGXzBpaJtx",
-        "colab": {
-          "base_uri": "https://localhost:8080/"
-        },
-        "outputId": "4a9c94e5-49ab-4827-efa3-6089c3edf7ae"
-      },
-      "execution_count": null,
-      "outputs": [
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "Embeddings with datadate:\n",
-            "     datadate          emb_0        emb_1         emb_2         emb_3  \\\n",
-            "0  2014-03-27  169624.406250 -770829.3750  19808.710938  446523.03125   \n",
-            "1  2014-03-28  182473.953125 -535715.4375 -23719.695312  315364.93750   \n",
-            "2  2014-03-31  182473.953125 -535715.4375 -23719.695312  315364.93750   \n",
-            "3  2014-04-01  185187.531250 -486059.7500 -32913.710938  287665.75000   \n",
-            "4  2014-04-02  185187.531250 -486059.7500 -32913.710938  287665.75000   \n",
-            "\n",
-            "        emb_4       emb_5         emb_6        emb_7  \n",
-            "0  787846.625 -1391239.25  209081.28125 -848305.6875  \n",
-            "1  674911.750 -1090780.75  165395.59375 -615559.8750  \n",
-            "2  674911.750 -1090780.75  165395.59375 -615559.8750  \n",
-            "3  651060.375 -1027323.25  156170.31250 -566401.6250  \n",
-            "4  651060.375 -1027323.25  156170.31250 -566401.6250  \n"
-          ]
-        }
-      ]
-    },
-    {
-      "cell_type": "code",
-      "source": [
-        "# CSV로 저장\n",
-        "df_embeddings.to_csv(f'embeddings_{company_name}.csv', index=False)"
-      ],
-      "metadata": {
-        "id": "QdlV3Fhjs0mb"
-      },
-      "execution_count": null,
-      "outputs": []
-    },
-    {
-      "cell_type": "code",
-      "source": [
-        "!pip install optuna"
-      ],
-      "metadata": {
-        "colab": {
-          "base_uri": "https://localhost:8080/"
-        },
-        "collapsed": true,
-        "id": "iBDOkaCDuMsI",
-        "outputId": "43349298-cdff-4b98-fc36-3d32e345734c"
-      },
-      "execution_count": 70,
-      "outputs": [
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "Collecting optuna\n",
-            "  Downloading optuna-4.3.0-py3-none-any.whl.metadata (17 kB)\n",
-            "Collecting alembic>=1.5.0 (from optuna)\n",
-            "  Downloading alembic-1.15.2-py3-none-any.whl.metadata (7.3 kB)\n",
-            "Collecting colorlog (from optuna)\n",
-            "  Downloading colorlog-6.9.0-py3-none-any.whl.metadata (10 kB)\n",
-            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from optuna) (2.0.2)\n",
-            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from optuna) (24.2)\n",
-            "Requirement already satisfied: sqlalchemy>=1.4.2 in /usr/local/lib/python3.11/dist-packages (from optuna) (2.0.40)\n",
-            "Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from optuna) (4.67.1)\n",
-            "Requirement already satisfied: PyYAML in /usr/local/lib/python3.11/dist-packages (from optuna) (6.0.2)\n",
-            "Requirement already satisfied: Mako in /usr/lib/python3/dist-packages (from alembic>=1.5.0->optuna) (1.1.3)\n",
-            "Requirement already satisfied: typing-extensions>=4.12 in /usr/local/lib/python3.11/dist-packages (from alembic>=1.5.0->optuna) (4.13.2)\n",
-            "Requirement already satisfied: greenlet>=1 in /usr/local/lib/python3.11/dist-packages (from sqlalchemy>=1.4.2->optuna) (3.2.1)\n",
-            "Downloading optuna-4.3.0-py3-none-any.whl (386 kB)\n",
-            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m386.6/386.6 kB\u001b[0m \u001b[31m7.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
-            "\u001b[?25hDownloading alembic-1.15.2-py3-none-any.whl (231 kB)\n",
-            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m231.9/231.9 kB\u001b[0m \u001b[31m15.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
-            "\u001b[?25hDownloading colorlog-6.9.0-py3-none-any.whl (11 kB)\n",
-            "Installing collected packages: colorlog, alembic, optuna\n",
-            "Successfully installed alembic-1.15.2 colorlog-6.9.0 optuna-4.3.0\n"
-          ]
-        }
-      ]
-    },
-    {
-      "cell_type": "markdown",
-      "source": [
-        "###TCN 시작"
-      ],
-      "metadata": {
-        "id": "Yu936WwLjWyW"
-      }
-    },
-    {
-      "cell_type": "code",
-      "source": [
-        "import torch\n",
-        "import torch.nn as nn\n",
-        "import torch.nn.functional as F\n",
-        "import matplotlib.pyplot as plt\n",
-        "import optuna\n",
-        "# --- 유틸 함수 ---\n",
-        "def get_conv1d(in_channels, out_channels, kernel_size, stride, padding, dilation, groups, bias):\n",
-        "    return nn.Conv1d(in_channels=in_channels, out_channels=out_channels,\n",
-        "                     kernel_size=kernel_size, stride=stride,\n",
-        "                     padding=padding, dilation=dilation,\n",
-        "                     groups=groups, bias=bias)\n",
-        "\n",
-        "def get_bn(channels):\n",
-        "    return nn.BatchNorm1d(channels)\n",
-        "\n",
-        "def conv_bn(in_channels, out_channels, kernel_size, stride, padding, groups, dilation=1, bias=False):\n",
-        "    if padding is None:\n",
-        "        padding = kernel_size // 2\n",
-        "    result = nn.Sequential()\n",
-        "    result.add_module('conv', get_conv1d(in_channels, out_channels, kernel_size, stride, padding, dilation, groups, bias))\n",
-        "    result.add_module('bn', get_bn(out_channels))\n",
-        "    return result\n",
-        "\n",
-        "# --- RevIN ---\n",
-        "class RevIN(nn.Module):\n",
-        "    def __init__(self, num_features: int, eps=1e-5, affine=True, subtract_last=False):\n",
-        "        super().__init__()\n",
-        "        self.num_features = num_features\n",
-        "        self.eps = eps\n",
-        "        self.affine = affine\n",
-        "        self.subtract_last = subtract_last\n",
-        "        if self.affine:\n",
-        "            self._init_params()\n",
-        "\n",
-        "    def _init_params(self):\n",
-        "        self.affine_weight = nn.Parameter(torch.ones(self.num_features))\n",
-        "        self.affine_bias = nn.Parameter(torch.zeros(self.num_features))\n",
-        "\n",
-        "    def forward(self, x, mode: str):\n",
-        "        if mode == 'norm':\n",
-        "            self._get_statistics(x)\n",
-        "            x = self._normalize(x)\n",
-        "        elif mode == 'denorm':\n",
-        "            x = self._denormalize(x)\n",
-        "        return x\n",
-        "\n",
-        "    def _get_statistics(self, x):\n",
-        "        dim2reduce = tuple(range(1, x.ndim - 1))\n",
-        "        if self.subtract_last:\n",
-        "            self.last = x[:, -1:, :].unsqueeze(1)\n",
-        "        else:\n",
-        "            self.mean = torch.mean(x, dim=dim2reduce, keepdim=True).detach()\n",
-        "        self.stdev = torch.sqrt(torch.var(x, dim=dim2reduce, keepdim=True, unbiased=False) + self.eps).detach()\n",
-        "\n",
-        "    def _normalize(self, x):\n",
-        "        x = (x - self.mean) / self.stdev\n",
-        "        if self.affine:\n",
-        "            x = x * self.affine_weight[None, None, :] + self.affine_bias[None, None, :]\n",
-        "        return x\n",
-        "\n",
-        "    def _denormalize(self, x):\n",
-        "        if self.affine:\n",
-        "            x = (x - self.affine_bias[None, None, :]) / self.affine_weight[None, None, :]\n",
-        "        x = x * self.stdev + self.mean\n",
-        "        return x\n",
-        "\n",
-        "# --- 시계열 분해 ---\n",
-        "class moving_avg(nn.Module):\n",
-        "    def __init__(self, kernel_size, stride):\n",
-        "        super().__init__()\n",
-        "        self.kernel_size = kernel_size\n",
-        "        self.avg = nn.AvgPool1d(kernel_size=kernel_size, stride=stride, padding=0)\n",
-        "\n",
-        "    def forward(self, x):\n",
-        "        front = x[:, 0:1, :].repeat(1, (self.kernel_size - 1) // 2, 1)\n",
-        "        end = x[:, -1:, :].repeat(1, (self.kernel_size - 1) // 2, 1)\n",
-        "        x = torch.cat([front, x, end], dim=1)\n",
-        "        x = self.avg(x.permute(0, 2, 1))\n",
-        "        return x.permute(0, 2, 1)\n",
-        "\n",
-        "class series_decomp(nn.Module):\n",
-        "    def __init__(self, kernel_size):\n",
-        "        super().__init__()\n",
-        "        self.moving_avg = moving_avg(kernel_size, stride=1)\n",
-        "\n",
-        "    def forward(self, x):\n",
-        "        moving_mean = self.moving_avg(x)\n",
-        "        return x - moving_mean, moving_mean\n",
-        "\n",
-        "# --- 커스텀 커널 ---\n",
-        "class ReparamLargeKernelConv(nn.Module):\n",
-        "    def __init__(self, in_channels, out_channels, kernel_size, stride, groups, small_kernel, small_kernel_merged=False):\n",
-        "        super().__init__()\n",
-        "        self.kernel_size = kernel_size\n",
-        "        self.small_kernel = small_kernel\n",
-        "        padding = kernel_size // 2\n",
-        "        if small_kernel_merged:\n",
-        "            self.lkb_reparam = nn.Conv1d(in_channels, out_channels, kernel_size, stride, padding, groups=groups, bias=True)\n",
-        "        else:\n",
-        "            self.lkb_origin = conv_bn(in_channels, out_channels, kernel_size, stride, padding, groups)\n",
-        "            if small_kernel is not None:\n",
-        "                self.small_conv = conv_bn(in_channels, out_channels, small_kernel, stride, small_kernel // 2, groups)\n",
-        "\n",
-        "    def forward(self, x):\n",
-        "        if hasattr(self, 'lkb_reparam'):\n",
-        "            return self.lkb_reparam(x)\n",
-        "        out = self.lkb_origin(x)\n",
-        "        if hasattr(self, 'small_conv'):\n",
-        "            out += self.small_conv(x)\n",
-        "        return out\n",
-        "\n",
-        "# --- 출력층 ---\n",
-        "class Flatten_Head(nn.Module):\n",
-        "    def __init__(self, d_model):\n",
-        "        super().__init__()\n",
-        "        self.linear = nn.Linear(d_model, 1)\n",
-        "\n",
-        "    def forward(self, x):         # x: [B, C, T]\n",
-        "        x = x.permute(0, 2, 1)    # → [B, T, C]\n",
-        "        x = self.linear(x)        # → [B, T, 1]\n",
-        "        return x.squeeze(-1)     # → [B, T]\n",
-        "\n",
-        "# --- ModernTCN 모델 ---\n",
-        "class ModernTCN(nn.Module):\n",
-        "    def __init__(self, configs):\n",
-        "        super().__init__()\n",
-        "        self.revin = RevIN(configs.enc_in, affine=configs.affine) if configs.revin else None\n",
-        "        self.decomp = series_decomp(configs.kernel_size) if configs.decomposition else None\n",
-        "\n",
-        "        self.conv_layers = nn.ModuleList()\n",
-        "        self.norm_layers = nn.ModuleList()\n",
-        "\n",
-        "        c_in = configs.enc_in\n",
-        "        for i in range(len(configs.dims)):\n",
-        "            conv = ReparamLargeKernelConv(c_in, configs.dims[i],\n",
-        "                                          kernel_size=configs.large_size[i],\n",
-        "                                          stride=1,\n",
-        "                                          groups=1,\n",
-        "                                          small_kernel=configs.small_size[i],\n",
-        "                                          small_kernel_merged=configs.small_kernel_merged)\n",
-        "            self.conv_layers.append(conv)\n",
-        "            self.norm_layers.append(nn.BatchNorm1d(configs.dims[i]))\n",
-        "            c_in = configs.dims[i]\n",
-        "\n",
-        "        self.head = Flatten_Head(configs.dims[-1])\n",
-        "\n",
-        "    def forward(self, x):  # x: [B, T, C]\n",
-        "        if self.revin:\n",
-        "            x = self.revin(x, 'norm')\n",
-        "        if self.decomp:\n",
-        "            x, _ = self.decomp(x)\n",
-        "        x = x.permute(0, 2, 1)  # [B, C, T]\n",
-        "        for conv, norm in zip(self.conv_layers, self.norm_layers):\n",
-        "            x = conv(x)\n",
-        "            x = norm(x)\n",
-        "            x = F.relu(x)\n",
-        "        out = self.head(x)  # [B, T]\n",
-        "        return out\n",
-        "\n",
-        "# --- Config 클래스 ---\n",
-        "class Configs:\n",
-        "    def __init__(self, enc_in):\n",
-        "        self.enc_in = enc_in\n",
-        "        self.dims = [8,16, 32]\n",
-        "        self.large_size = [5, 5, 3]\n",
-        "        self.small_size = [5, 3, 3]\n",
-        "        self.small_kernel_merged = False\n",
-        "        self.dropout = 0.1\n",
-        "        self.head_dropout = 0.2\n",
-        "        self.revin = True\n",
-        "        self.affine = True\n",
-        "        self.decomposition = True\n",
-        "        self.kernel_size = 25\n"
-      ],
-      "metadata": {
-        "id": "SGY079rGizbs"
-      },
-      "execution_count": 72,
-      "outputs": []
-    },
-    {
-      "cell_type": "markdown",
-      "source": [
-        "###학습 및 OPTUNA"
-      ],
-      "metadata": {
-        "id": "LyXr4lYwuEJW"
-      }
-    },
-    {
-      "cell_type": "code",
-      "source": [
-        "import matplotlib.pyplot as plt\n",
-        "from sklearn.metrics import f1_score # Import f1_score\n",
-        "def train_model(model, X_train, y_train, X_val, y_val, epochs=30, lr=1e-3,pos_weight=None):\n",
-        "    optimizer = torch.optim.Adam(model.parameters(), lr=lr)\n",
-        "    #criterion = nn.BCEWithLogitsLoss()\n",
-        "    criterion = nn.BCEWithLogitsLoss(pos_weight=pos_weight) if pos_weight is not None else nn.BCEWithLogitsLoss()\n",
-        "    train_losses, val_losses, val_accs = [], [], []\n",
-        "\n",
-        "    for epoch in range(epochs):\n",
-        "        # 1. 학습 단계\n",
-        "        model.train()\n",
-        "        optimizer.zero_grad()\n",
-        "        train_output = model(X_train).squeeze(0)  # → [T]\n",
-        "        train_output = train_output.detach().clone().requires_grad_(True)  # detach + clone + requires_grad 복구\n",
-        "        loss = criterion(train_output, y_train.float())\n",
-        "        loss.backward()\n",
-        "        optimizer.step()\n",
-        "\n",
-        "        train_losses.append(loss.item())\n",
-        "\n",
-        "        # 2. 검증 단계\n",
-        "        model.eval()\n",
-        "        with torch.no_grad():\n",
-        "            val_output = model(X_val).squeeze(0)\n",
-        "            val_loss = criterion(val_output, y_val.float()).item()\n",
-        "            pred = (torch.sigmoid(val_output) > 0.5).int()\n",
-        "            acc = (pred == y_val).float().mean().item()\n",
-        "\n",
-        "        val_losses.append(val_loss)\n",
-        "        val_accs.append(acc)\n",
-        "\n",
-        "        print(f\"[{epoch+1}/{epochs}] Train Loss: {loss.item():.4f}, Val Loss: {val_loss:.4f}, Val Acc: {acc:.4f}\")\n",
-        "\n",
-        "    return train_losses, val_losses, val_accs"
-      ],
-      "metadata": {
-        "collapsed": true,
-        "id": "QQZdcTXzmrGn"
-      },
-      "execution_count": 98,
-      "outputs": []
-    },
-    {
-      "cell_type": "code",
-      "source": [
-        "# Config class 내부를 trial 기반으로 생성\n",
-        "def objective(trial):\n",
-        "    dims = [\n",
-        "        trial.suggest_categorical(\"dim1\", [8, 16, 32, 64]),\n",
-        "        trial.suggest_categorical(\"dim2\", [16, 32, 64, 128]),\n",
-        "        trial.suggest_categorical(\"dim3\", [32, 64, 128, 256])\n",
-        "    ]\n",
-        "    large_size = [\n",
-        "        trial.suggest_categorical(\"k1\", [3, 5, 7, 9, 11]),\n",
-        "        trial.suggest_categorical(\"k2\", [3, 5, 7, 9]),\n",
-        "        trial.suggest_categorical(\"k3\", [3, 5, 7])\n",
-        "    ]\n",
-        "    small_size = [\n",
-        "        trial.suggest_categorical(\"s1\", [1, 3, 5]),\n",
-        "        trial.suggest_categorical(\"s2\", [1, 3]),\n",
-        "        trial.suggest_categorical(\"s3\", [1, 3])\n",
-        "    ]\n",
-        "    dropout = trial.suggest_float(\"dropout\", 0.0, 0.3)\n",
-        "    head_dropout = trial.suggest_float(\"head_dropout\", 0.0, 0.3)\n",
-        "    kernel_size = trial.suggest_categorical(\"kernel_size\", [5, 11, 15, 25, 31])\n",
-        "    decomposition = trial.suggest_categorical(\"decomposition\", [True, False])\n",
-        "    revin = trial.suggest_categorical(\"revin\", [True, False])\n",
-        "    affine = trial.suggest_categorical(\"affine\", [True, False])\n",
-        "\n",
-        "    class TrialConfig:\n",
-        "        def __init__(self):\n",
-        "            self.enc_in = X_train.shape[2]\n",
-        "            self.dims = dims\n",
-        "            self.large_size = large_size\n",
-        "            self.small_size = small_size\n",
-        "            self.small_kernel_merged = False\n",
-        "            self.dropout = dropout\n",
-        "            self.head_dropout = head_dropout\n",
-        "            self.revin = revin\n",
-        "            self.affine = affine\n",
-        "            self.decomposition = decomposition\n",
-        "            self.kernel_size = kernel_size\n",
-        "\n",
-        "    model = ModernTCN(TrialConfig())\n",
-        "    #_, _, val_accs = train_model(model, X_train, y_train, X_val, y_val, epochs=15)\n",
-        "    #return max(val_accs)  # Accuracy 기준 최적화\n",
-        "\n",
-        "   #pos_weight 계산 (불균형 데이터 보정)\n",
-        "    pos_weight = torch.tensor([(y_train == 0).sum() / (y_train == 1).sum()]).to(y_train.device)\n",
-        "\n",
-        "    #모델 학습 (loss에 pos_weight 반영됨)\n",
-        "    train_model(model, X_train, y_train, X_val, y_val, epochs=15, pos_weight=pos_weight)\n",
-        "\n",
-        "    model.eval()\n",
-        "    with torch.no_grad():\n",
-        "        pred = model(X_val).squeeze(0)\n",
-        "        probs = torch.sigmoid(pred).cpu().numpy()\n",
-        "        preds = (probs > 0.5).astype(int)\n",
-        "\n",
-        "    y_true = y_val.cpu().numpy()\n",
-        "    return f1_score(y_true, preds)\n",
-        "\n",
-        "\n",
-        "# Optuna 튜닝 실행\n",
-        "study = optuna.create_study(direction=\"maximize\")\n",
-        "study.optimize(objective, n_trials=50)\n",
-        "\n",
-        "# 최적 하이퍼파라미터 출력\n",
-        "print(\"✅ Best Trial:\")\n",
-        "print(study.best_trial.params)\n",
-        "best_params = study.best_trial.params"
-      ],
-      "metadata": {
-        "colab": {
-          "base_uri": "https://localhost:8080/"
-        },
-        "id": "UzU3cvtAz1Bl",
-        "outputId": "95b76a16-5918-43f7-84af-b493f4c42865"
-      },
-      "execution_count": 99,
-      "outputs": [
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:36,190] A new study created in memory with name: no-name-3f4b9f02-361f-4454-b190-641dec04d8a3\n",
-            "[I 2025-05-05 09:48:36,390] Trial 0 finished with value: 0.41014799154334036 and parameters: {'dim1': 8, 'dim2': 32, 'dim3': 128, 'k1': 9, 'k2': 7, 'k3': 3, 's1': 1, 's2': 1, 's3': 1, 'dropout': 0.163185304613254, 'head_dropout': 0.07072651447104997, 'kernel_size': 5, 'decomposition': False, 'revin': False, 'affine': False}. Best is trial 0 with value: 0.41014799154334036.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[1/15] Train Loss: 0.7982, Val Loss: 0.8268, Val Acc: 0.5373\n",
-            "[2/15] Train Loss: 0.7982, Val Loss: 0.7984, Val Acc: 0.5282\n",
-            "[3/15] Train Loss: 0.7982, Val Loss: 0.7901, Val Acc: 0.5246\n",
-            "[4/15] Train Loss: 0.7982, Val Loss: 0.7863, Val Acc: 0.5100\n",
-            "[5/15] Train Loss: 0.7982, Val Loss: 0.7843, Val Acc: 0.4973\n",
-            "[6/15] Train Loss: 0.7982, Val Loss: 0.7832, Val Acc: 0.4973\n",
-            "[7/15] Train Loss: 0.7982, Val Loss: 0.7828, Val Acc: 0.4863\n",
-            "[8/15] Train Loss: 0.7982, Val Loss: 0.7827, Val Acc: 0.4845\n",
-            "[9/15] Train Loss: 0.7982, Val Loss: 0.7826, Val Acc: 0.4918\n",
-            "[10/15] Train Loss: 0.7982, Val Loss: 0.7828, Val Acc: 0.4991\n",
-            "[11/15] Train Loss: 0.7982, Val Loss: 0.7832, Val Acc: 0.4954\n",
-            "[12/15] Train Loss: 0.7982, Val Loss: 0.7837, Val Acc: 0.4936\n",
-            "[13/15] Train Loss: 0.7982, Val Loss: 0.7843, Val Acc: 0.4918\n",
-            "[14/15] Train Loss: 0.7982, Val Loss: 0.7850, Val Acc: 0.4936\n",
-            "[15/15] Train Loss: 0.7982, Val Loss: 0.7859, Val Acc: 0.4918\n",
-            "[1/15] Train Loss: 0.7986, Val Loss: 0.8743, Val Acc: 0.5738\n",
-            "[2/15] Train Loss: 0.7986, Val Loss: 0.8244, Val Acc: 0.5610\n",
-            "[3/15] Train Loss: 0.7986, Val Loss: 0.8087, Val Acc: 0.5574\n",
-            "[4/15] Train Loss: 0.7986, Val Loss: 0.8017, Val Acc: 0.5574\n",
-            "[5/15] Train Loss: 0.7986, Val Loss: 0.7983, Val Acc: 0.5592\n",
-            "[6/15] Train Loss: 0.7986, Val Loss: 0.7965, Val Acc: 0.5592\n",
-            "[7/15] Train Loss: 0.7986, Val Loss: 0.7957, Val Acc: 0.5592\n",
-            "[8/15] Train Loss: 0.7986, Val Loss: 0.7956, Val Acc: 0.5592\n",
-            "[9/15] Train Loss: 0.7986, Val Loss: 0.7959, Val Acc: 0.5610\n",
-            "[10/15] Train Loss: 0.7986, Val Loss: 0.7966, Val Acc: 0.5610\n",
-            "[11/15] Train Loss: 0.7986, Val Loss: 0.7977, Val Acc: 0.5610\n",
-            "[12/15] Train Loss: 0.7986, Val Loss: 0.7990, Val Acc: 0.5592\n",
-            "[13/15] Train Loss: 0.7986, Val Loss: 0.8006, Val Acc: 0.5610\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:36,663] Trial 1 finished with value: 0.1111111111111111 and parameters: {'dim1': 64, 'dim2': 32, 'dim3': 32, 'k1': 5, 'k2': 5, 'k3': 7, 's1': 5, 's2': 3, 's3': 3, 'dropout': 0.008354699057682113, 'head_dropout': 0.2324016107426237, 'kernel_size': 31, 'decomposition': False, 'revin': False, 'affine': True}. Best is trial 0 with value: 0.41014799154334036.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[14/15] Train Loss: 0.7986, Val Loss: 0.8025, Val Acc: 0.5610\n",
-            "[15/15] Train Loss: 0.7986, Val Loss: 0.8048, Val Acc: 0.5628\n",
-            "[1/15] Train Loss: 0.7877, Val Loss: 0.7852, Val Acc: 0.5319\n",
-            "[2/15] Train Loss: 0.7877, Val Loss: 0.7790, Val Acc: 0.5137\n",
-            "[3/15] Train Loss: 0.7877, Val Loss: 0.7771, Val Acc: 0.5264\n",
-            "[4/15] Train Loss: 0.7877, Val Loss: 0.7763, Val Acc: 0.5209\n",
-            "[5/15] Train Loss: 0.7877, Val Loss: 0.7759, Val Acc: 0.5228\n",
-            "[6/15] Train Loss: 0.7877, Val Loss: 0.7757, Val Acc: 0.5301\n",
-            "[7/15] Train Loss: 0.7877, Val Loss: 0.7756, Val Acc: 0.5209\n",
-            "[8/15] Train Loss: 0.7877, Val Loss: 0.7756, Val Acc: 0.5228\n",
-            "[9/15] Train Loss: 0.7877, Val Loss: 0.7757, Val Acc: 0.5301\n",
-            "[10/15] Train Loss: 0.7877, Val Loss: 0.7757, Val Acc: 0.5319\n",
-            "[11/15] Train Loss: 0.7877, Val Loss: 0.7757, Val Acc: 0.5410\n",
-            "[12/15] Train Loss: 0.7877, Val Loss: 0.7759, Val Acc: 0.5355\n",
-            "[13/15] Train Loss: 0.7877, Val Loss: 0.7761, Val Acc: 0.5319\n",
-            "[14/15] Train Loss: 0.7877, Val Loss: 0.7765, Val Acc: 0.5264\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:37,552] Trial 2 finished with value: 0.4 and parameters: {'dim1': 16, 'dim2': 128, 'dim3': 256, 'k1': 5, 'k2': 5, 'k3': 5, 's1': 5, 's2': 3, 's3': 1, 'dropout': 0.2735150744945485, 'head_dropout': 0.16496355396833284, 'kernel_size': 5, 'decomposition': False, 'revin': False, 'affine': False}. Best is trial 0 with value: 0.41014799154334036.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[15/15] Train Loss: 0.7877, Val Loss: 0.7770, Val Acc: 0.5246\n",
-            "[1/15] Train Loss: 0.7817, Val Loss: 1.0330, Val Acc: 0.4262\n",
-            "[2/15] Train Loss: 0.7817, Val Loss: 0.9172, Val Acc: 0.4281\n",
-            "[3/15] Train Loss: 0.7817, Val Loss: 0.8759, Val Acc: 0.4281\n",
-            "[4/15] Train Loss: 0.7817, Val Loss: 0.8555, Val Acc: 0.4390\n",
-            "[5/15] Train Loss: 0.7817, Val Loss: 0.8441, Val Acc: 0.4390\n",
-            "[6/15] Train Loss: 0.7817, Val Loss: 0.8372, Val Acc: 0.4353\n",
-            "[7/15] Train Loss: 0.7817, Val Loss: 0.8329, Val Acc: 0.4372\n",
-            "[8/15] Train Loss: 0.7817, Val Loss: 0.8302, Val Acc: 0.4536\n",
-            "[9/15] Train Loss: 0.7817, Val Loss: 0.8287, Val Acc: 0.4554\n",
-            "[10/15] Train Loss: 0.7817, Val Loss: 0.8281, Val Acc: 0.4536\n",
-            "[11/15] Train Loss: 0.7817, Val Loss: 0.8280, Val Acc: 0.4536\n",
-            "[12/15] Train Loss: 0.7817, Val Loss: 0.8284, Val Acc: 0.4554\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:38,039] Trial 3 finished with value: 0.42994241842610365 and parameters: {'dim1': 32, 'dim2': 32, 'dim3': 256, 'k1': 5, 'k2': 9, 'k3': 3, 's1': 3, 's2': 1, 's3': 3, 'dropout': 0.05755296075005734, 'head_dropout': 0.10656704741835861, 'kernel_size': 11, 'decomposition': True, 'revin': False, 'affine': False}. Best is trial 3 with value: 0.42994241842610365.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[13/15] Train Loss: 0.7817, Val Loss: 0.8292, Val Acc: 0.4627\n",
-            "[14/15] Train Loss: 0.7817, Val Loss: 0.8303, Val Acc: 0.4572\n",
-            "[15/15] Train Loss: 0.7817, Val Loss: 0.8317, Val Acc: 0.4590\n",
-            "[1/15] Train Loss: 0.7887, Val Loss: 0.9329, Val Acc: 0.4335\n",
-            "[2/15] Train Loss: 0.7887, Val Loss: 0.8517, Val Acc: 0.4335\n",
-            "[3/15] Train Loss: 0.7887, Val Loss: 0.8259, Val Acc: 0.4335\n",
-            "[4/15] Train Loss: 0.7887, Val Loss: 0.8143, Val Acc: 0.4244\n",
-            "[5/15] Train Loss: 0.7887, Val Loss: 0.8083, Val Acc: 0.4171\n",
-            "[6/15] Train Loss: 0.7887, Val Loss: 0.8049, Val Acc: 0.4135\n",
-            "[7/15] Train Loss: 0.7887, Val Loss: 0.8030, Val Acc: 0.4317\n",
-            "[8/15] Train Loss: 0.7887, Val Loss: 0.8019, Val Acc: 0.4317\n",
-            "[9/15] Train Loss: 0.7887, Val Loss: 0.8016, Val Acc: 0.4426\n",
-            "[10/15] Train Loss: 0.7887, Val Loss: 0.8019, Val Acc: 0.4444\n",
-            "[11/15] Train Loss: 0.7887, Val Loss: 0.8024, Val Acc: 0.4463\n",
-            "[12/15] Train Loss: 0.7887, Val Loss: 0.8032, Val Acc: 0.4554\n",
-            "[13/15] Train Loss: 0.7887, Val Loss: 0.8044, Val Acc: 0.4536\n",
-            "[14/15] Train Loss: 0.7887, Val Loss: 0.8058, Val Acc: 0.4517\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:39,055] Trial 4 finished with value: 0.488135593220339 and parameters: {'dim1': 8, 'dim2': 128, 'dim3': 256, 'k1': 9, 'k2': 9, 'k3': 5, 's1': 1, 's2': 3, 's3': 3, 'dropout': 0.1553895048760333, 'head_dropout': 0.17488347216364408, 'kernel_size': 5, 'decomposition': False, 'revin': False, 'affine': True}. Best is trial 4 with value: 0.488135593220339.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[15/15] Train Loss: 0.7887, Val Loss: 0.8072, Val Acc: 0.4499\n",
-            "[1/15] Train Loss: 0.7832, Val Loss: 0.9006, Val Acc: 0.4572\n",
-            "[2/15] Train Loss: 0.7832, Val Loss: 0.8414, Val Acc: 0.4517\n",
-            "[3/15] Train Loss: 0.7832, Val Loss: 0.8223, Val Acc: 0.4499\n",
-            "[4/15] Train Loss: 0.7832, Val Loss: 0.8138, Val Acc: 0.4463\n",
-            "[5/15] Train Loss: 0.7832, Val Loss: 0.8095, Val Acc: 0.4481\n",
-            "[6/15] Train Loss: 0.7832, Val Loss: 0.8073, Val Acc: 0.4444\n",
-            "[7/15] Train Loss: 0.7832, Val Loss: 0.8062, Val Acc: 0.4426\n",
-            "[8/15] Train Loss: 0.7832, Val Loss: 0.8059, Val Acc: 0.4426\n",
-            "[9/15] Train Loss: 0.7832, Val Loss: 0.8062, Val Acc: 0.4372\n",
-            "[10/15] Train Loss: 0.7832, Val Loss: 0.8070, Val Acc: 0.4335\n",
-            "[11/15] Train Loss: 0.7832, Val Loss: 0.8080, Val Acc: 0.4299\n",
-            "[12/15] Train Loss: 0.7832, Val Loss: 0.8095, Val Acc: 0.4281\n",
-            "[13/15] Train Loss: 0.7832, Val Loss: 0.8112, Val Acc: 0.4262\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:39,814] Trial 5 finished with value: 0.5631067961165048 and parameters: {'dim1': 64, 'dim2': 128, 'dim3': 256, 'k1': 3, 'k2': 9, 'k3': 5, 's1': 1, 's2': 1, 's3': 1, 'dropout': 0.2520036240043335, 'head_dropout': 0.26443356829754716, 'kernel_size': 25, 'decomposition': False, 'revin': False, 'affine': False}. Best is trial 5 with value: 0.5631067961165048.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[14/15] Train Loss: 0.7832, Val Loss: 0.8131, Val Acc: 0.4244\n",
-            "[15/15] Train Loss: 0.7832, Val Loss: 0.8152, Val Acc: 0.4262\n",
-            "[1/15] Train Loss: 0.7894, Val Loss: 0.9113, Val Acc: 0.4627\n",
-            "[2/15] Train Loss: 0.7894, Val Loss: 0.8379, Val Acc: 0.4663\n",
-            "[3/15] Train Loss: 0.7894, Val Loss: 0.8143, Val Acc: 0.4754\n",
-            "[4/15] Train Loss: 0.7894, Val Loss: 0.8034, Val Acc: 0.4754\n",
-            "[5/15] Train Loss: 0.7894, Val Loss: 0.7976, Val Acc: 0.4827\n",
-            "[6/15] Train Loss: 0.7894, Val Loss: 0.7943, Val Acc: 0.4900\n",
-            "[7/15] Train Loss: 0.7894, Val Loss: 0.7923, Val Acc: 0.4918\n",
-            "[8/15] Train Loss: 0.7894, Val Loss: 0.7912, Val Acc: 0.4936\n",
-            "[9/15] Train Loss: 0.7894, Val Loss: 0.7907, Val Acc: 0.4918\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:40,054] Trial 6 finished with value: 0.5517241379310345 and parameters: {'dim1': 64, 'dim2': 16, 'dim3': 128, 'k1': 9, 'k2': 5, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.2365025611661018, 'head_dropout': 0.2400102539100597, 'kernel_size': 25, 'decomposition': True, 'revin': False, 'affine': False}. Best is trial 5 with value: 0.5631067961165048.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[10/15] Train Loss: 0.7894, Val Loss: 0.7906, Val Acc: 0.5027\n",
-            "[11/15] Train Loss: 0.7894, Val Loss: 0.7908, Val Acc: 0.5027\n",
-            "[12/15] Train Loss: 0.7894, Val Loss: 0.7913, Val Acc: 0.5009\n",
-            "[13/15] Train Loss: 0.7894, Val Loss: 0.7919, Val Acc: 0.5027\n",
-            "[14/15] Train Loss: 0.7894, Val Loss: 0.7928, Val Acc: 0.5009\n",
-            "[15/15] Train Loss: 0.7894, Val Loss: 0.7938, Val Acc: 0.5027\n",
-            "[1/15] Train Loss: 0.8246, Val Loss: 0.7798, Val Acc: 0.4426\n",
-            "[2/15] Train Loss: 0.8246, Val Loss: 0.7790, Val Acc: 0.4426\n",
-            "[3/15] Train Loss: 0.8246, Val Loss: 0.7786, Val Acc: 0.4426\n",
-            "[4/15] Train Loss: 0.8246, Val Loss: 0.7783, Val Acc: 0.4444\n",
-            "[5/15] Train Loss: 0.8246, Val Loss: 0.7781, Val Acc: 0.4481\n",
-            "[6/15] Train Loss: 0.8246, Val Loss: 0.7781, Val Acc: 0.4499\n",
-            "[7/15] Train Loss: 0.8246, Val Loss: 0.7781, Val Acc: 0.4517\n",
-            "[8/15] Train Loss: 0.8246, Val Loss: 0.7782, Val Acc: 0.4499\n",
-            "[9/15] Train Loss: 0.8246, Val Loss: 0.7784, Val Acc: 0.4499\n",
-            "[10/15] Train Loss: 0.8246, Val Loss: 0.7786, Val Acc: 0.4481\n",
-            "[11/15] Train Loss: 0.8246, Val Loss: 0.7790, Val Acc: 0.4481\n",
-            "[12/15] Train Loss: 0.8246, Val Loss: 0.7795, Val Acc: 0.4499\n",
-            "[13/15] Train Loss: 0.8246, Val Loss: 0.7800, Val Acc: 0.4499\n",
-            "[14/15] Train Loss: 0.8246, Val Loss: 0.7807, Val Acc: 0.4554\n",
-            "[15/15] Train Loss: 0.8246, Val Loss: 0.7815, Val Acc: 0.4572\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:40,175] Trial 7 finished with value: 0.6099476439790575 and parameters: {'dim1': 8, 'dim2': 16, 'dim3': 32, 'k1': 7, 'k2': 5, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.23580595312520866, 'head_dropout': 0.2414528024642886, 'kernel_size': 31, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\n",
-            "[I 2025-05-05 09:48:40,365] Trial 8 finished with value: 0.48722986247544203 and parameters: {'dim1': 16, 'dim2': 16, 'dim3': 128, 'k1': 7, 'k2': 9, 'k3': 3, 's1': 3, 's2': 1, 's3': 1, 'dropout': 0.061880911129755356, 'head_dropout': 0.0363608624795552, 'kernel_size': 11, 'decomposition': False, 'revin': True, 'affine': True}. Best is trial 7 with value: 0.6099476439790575.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[1/15] Train Loss: 0.7806, Val Loss: 0.7743, Val Acc: 0.5574\n",
-            "[2/15] Train Loss: 0.7806, Val Loss: 0.7743, Val Acc: 0.5501\n",
-            "[3/15] Train Loss: 0.7806, Val Loss: 0.7743, Val Acc: 0.5464\n",
-            "[4/15] Train Loss: 0.7806, Val Loss: 0.7743, Val Acc: 0.5556\n",
-            "[5/15] Train Loss: 0.7806, Val Loss: 0.7742, Val Acc: 0.5428\n",
-            "[6/15] Train Loss: 0.7806, Val Loss: 0.7742, Val Acc: 0.5428\n",
-            "[7/15] Train Loss: 0.7806, Val Loss: 0.7741, Val Acc: 0.5355\n",
-            "[8/15] Train Loss: 0.7806, Val Loss: 0.7741, Val Acc: 0.5373\n",
-            "[9/15] Train Loss: 0.7806, Val Loss: 0.7741, Val Acc: 0.5319\n",
-            "[10/15] Train Loss: 0.7806, Val Loss: 0.7741, Val Acc: 0.5337\n",
-            "[11/15] Train Loss: 0.7806, Val Loss: 0.7742, Val Acc: 0.5355\n",
-            "[12/15] Train Loss: 0.7806, Val Loss: 0.7742, Val Acc: 0.5301\n",
-            "[13/15] Train Loss: 0.7806, Val Loss: 0.7743, Val Acc: 0.5228\n",
-            "[14/15] Train Loss: 0.7806, Val Loss: 0.7745, Val Acc: 0.5246\n",
-            "[15/15] Train Loss: 0.7806, Val Loss: 0.7746, Val Acc: 0.5246\n",
-            "[1/15] Train Loss: 0.7896, Val Loss: 0.7809, Val Acc: 0.4171\n",
-            "[2/15] Train Loss: 0.7896, Val Loss: 0.7808, Val Acc: 0.4262\n",
-            "[3/15] Train Loss: 0.7896, Val Loss: 0.7808, Val Acc: 0.4098\n",
-            "[4/15] Train Loss: 0.7896, Val Loss: 0.7808, Val Acc: 0.4062\n",
-            "[5/15] Train Loss: 0.7896, Val Loss: 0.7811, Val Acc: 0.4044\n",
-            "[6/15] Train Loss: 0.7896, Val Loss: 0.7815, Val Acc: 0.3971\n",
-            "[7/15] Train Loss: 0.7896, Val Loss: 0.7820, Val Acc: 0.4044\n",
-            "[8/15] Train Loss: 0.7896, Val Loss: 0.7825, Val Acc: 0.4007\n",
-            "[9/15] Train Loss: 0.7896, Val Loss: 0.7832, Val Acc: 0.4007\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:40,750] Trial 9 finished with value: 0.4976958525345622 and parameters: {'dim1': 32, 'dim2': 32, 'dim3': 256, 'k1': 9, 'k2': 9, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.074742922120129, 'head_dropout': 0.21430487913366228, 'kernel_size': 11, 'decomposition': False, 'revin': True, 'affine': True}. Best is trial 7 with value: 0.6099476439790575.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[10/15] Train Loss: 0.7896, Val Loss: 0.7839, Val Acc: 0.3989\n",
-            "[11/15] Train Loss: 0.7896, Val Loss: 0.7847, Val Acc: 0.3971\n",
-            "[12/15] Train Loss: 0.7896, Val Loss: 0.7857, Val Acc: 0.3989\n",
-            "[13/15] Train Loss: 0.7896, Val Loss: 0.7867, Val Acc: 0.3989\n",
-            "[14/15] Train Loss: 0.7896, Val Loss: 0.7879, Val Acc: 0.4026\n",
-            "[15/15] Train Loss: 0.7896, Val Loss: 0.7891, Val Acc: 0.4044\n",
-            "[1/15] Train Loss: 0.7866, Val Loss: 0.7752, Val Acc: 0.5118\n",
-            "[2/15] Train Loss: 0.7866, Val Loss: 0.7754, Val Acc: 0.5100\n",
-            "[3/15] Train Loss: 0.7866, Val Loss: 0.7756, Val Acc: 0.5209\n",
-            "[4/15] Train Loss: 0.7866, Val Loss: 0.7757, Val Acc: 0.5191\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:40,951] Trial 10 finished with value: 0.4475806451612903 and parameters: {'dim1': 8, 'dim2': 64, 'dim3': 32, 'k1': 7, 'k2': 3, 'k3': 7, 's1': 5, 's2': 3, 's3': 3, 'dropout': 0.1998044785613833, 'head_dropout': 0.29793674375176615, 'kernel_size': 31, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[5/15] Train Loss: 0.7866, Val Loss: 0.7758, Val Acc: 0.5191\n",
-            "[6/15] Train Loss: 0.7866, Val Loss: 0.7759, Val Acc: 0.5155\n",
-            "[7/15] Train Loss: 0.7866, Val Loss: 0.7761, Val Acc: 0.5064\n",
-            "[8/15] Train Loss: 0.7866, Val Loss: 0.7763, Val Acc: 0.4991\n",
-            "[9/15] Train Loss: 0.7866, Val Loss: 0.7766, Val Acc: 0.4882\n",
-            "[10/15] Train Loss: 0.7866, Val Loss: 0.7769, Val Acc: 0.4991\n",
-            "[11/15] Train Loss: 0.7866, Val Loss: 0.7772, Val Acc: 0.5009\n",
-            "[12/15] Train Loss: 0.7866, Val Loss: 0.7776, Val Acc: 0.4954\n",
-            "[13/15] Train Loss: 0.7866, Val Loss: 0.7780, Val Acc: 0.4991\n",
-            "[14/15] Train Loss: 0.7866, Val Loss: 0.7785, Val Acc: 0.5027\n",
-            "[15/15] Train Loss: 0.7866, Val Loss: 0.7790, Val Acc: 0.5009\n",
-            "[1/15] Train Loss: 0.8067, Val Loss: 0.7768, Val Acc: 0.5319\n",
-            "[2/15] Train Loss: 0.8067, Val Loss: 0.7770, Val Acc: 0.5264\n",
-            "[3/15] Train Loss: 0.8067, Val Loss: 0.7772, Val Acc: 0.5155\n",
-            "[4/15] Train Loss: 0.8067, Val Loss: 0.7773, Val Acc: 0.5082\n",
-            "[5/15] Train Loss: 0.8067, Val Loss: 0.7775, Val Acc: 0.5155\n",
-            "[6/15] Train Loss: 0.8067, Val Loss: 0.7778, Val Acc: 0.5173\n",
-            "[7/15] Train Loss: 0.8067, Val Loss: 0.7781, Val Acc: 0.5173\n",
-            "[8/15] Train Loss: 0.8067, Val Loss: 0.7785, Val Acc: 0.5228\n",
-            "[9/15] Train Loss: 0.8067, Val Loss: 0.7789, Val Acc: 0.5301\n",
-            "[10/15] Train Loss: 0.8067, Val Loss: 0.7795, Val Acc: 0.5301\n",
-            "[11/15] Train Loss: 0.8067, Val Loss: 0.7800, Val Acc: 0.5282\n",
-            "[12/15] Train Loss: 0.8067, Val Loss: 0.7807, Val Acc: 0.5282\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:41,307] Trial 11 finished with value: 0.17252396166134185 and parameters: {'dim1': 64, 'dim2': 128, 'dim3': 64, 'k1': 3, 'k2': 3, 'k3': 5, 's1': 1, 's2': 1, 's3': 1, 'dropout': 0.2798740120820043, 'head_dropout': 0.2901188534382275, 'kernel_size': 15, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\n",
-            "[I 2025-05-05 09:48:41,447] Trial 12 finished with value: 0.5667752442996743 and parameters: {'dim1': 8, 'dim2': 16, 'dim3': 32, 'k1': 11, 'k2': 7, 'k3': 5, 's1': 1, 's2': 1, 's3': 1, 'dropout': 0.22098954675333138, 'head_dropout': 0.2627896340068866, 'kernel_size': 25, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[13/15] Train Loss: 0.8067, Val Loss: 0.7815, Val Acc: 0.5264\n",
-            "[14/15] Train Loss: 0.8067, Val Loss: 0.7823, Val Acc: 0.5282\n",
-            "[15/15] Train Loss: 0.8067, Val Loss: 0.7832, Val Acc: 0.5282\n",
-            "[1/15] Train Loss: 0.8017, Val Loss: 0.7751, Val Acc: 0.4936\n",
-            "[2/15] Train Loss: 0.8017, Val Loss: 0.7752, Val Acc: 0.4845\n",
-            "[3/15] Train Loss: 0.8017, Val Loss: 0.7753, Val Acc: 0.4863\n",
-            "[4/15] Train Loss: 0.8017, Val Loss: 0.7754, Val Acc: 0.4791\n",
-            "[5/15] Train Loss: 0.8017, Val Loss: 0.7754, Val Acc: 0.4736\n",
-            "[6/15] Train Loss: 0.8017, Val Loss: 0.7755, Val Acc: 0.4791\n",
-            "[7/15] Train Loss: 0.8017, Val Loss: 0.7755, Val Acc: 0.4772\n",
-            "[8/15] Train Loss: 0.8017, Val Loss: 0.7756, Val Acc: 0.4772\n",
-            "[9/15] Train Loss: 0.8017, Val Loss: 0.7757, Val Acc: 0.4809\n",
-            "[10/15] Train Loss: 0.8017, Val Loss: 0.7757, Val Acc: 0.4863\n",
-            "[11/15] Train Loss: 0.8017, Val Loss: 0.7759, Val Acc: 0.4845\n",
-            "[12/15] Train Loss: 0.8017, Val Loss: 0.7760, Val Acc: 0.4900\n",
-            "[13/15] Train Loss: 0.8017, Val Loss: 0.7762, Val Acc: 0.5009\n",
-            "[14/15] Train Loss: 0.8017, Val Loss: 0.7765, Val Acc: 0.5100\n",
-            "[15/15] Train Loss: 0.8017, Val Loss: 0.7768, Val Acc: 0.5155\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:41,598] Trial 13 finished with value: 0.5427286356821589 and parameters: {'dim1': 8, 'dim2': 16, 'dim3': 32, 'k1': 11, 'k2': 7, 'k3': 5, 's1': 1, 's2': 1, 's3': 1, 'dropout': 0.20441912287088004, 'head_dropout': 0.20301466241281924, 'kernel_size': 31, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[1/15] Train Loss: 0.7859, Val Loss: 0.7762, Val Acc: 0.4517\n",
-            "[2/15] Train Loss: 0.7859, Val Loss: 0.7763, Val Acc: 0.4444\n",
-            "[3/15] Train Loss: 0.7859, Val Loss: 0.7763, Val Acc: 0.4517\n",
-            "[4/15] Train Loss: 0.7859, Val Loss: 0.7762, Val Acc: 0.4572\n",
-            "[5/15] Train Loss: 0.7859, Val Loss: 0.7761, Val Acc: 0.4608\n",
-            "[6/15] Train Loss: 0.7859, Val Loss: 0.7761, Val Acc: 0.4608\n",
-            "[7/15] Train Loss: 0.7859, Val Loss: 0.7761, Val Acc: 0.4590\n",
-            "[8/15] Train Loss: 0.7859, Val Loss: 0.7761, Val Acc: 0.4572\n",
-            "[9/15] Train Loss: 0.7859, Val Loss: 0.7760, Val Acc: 0.4536\n",
-            "[10/15] Train Loss: 0.7859, Val Loss: 0.7761, Val Acc: 0.4627\n",
-            "[11/15] Train Loss: 0.7859, Val Loss: 0.7761, Val Acc: 0.4517\n",
-            "[12/15] Train Loss: 0.7859, Val Loss: 0.7762, Val Acc: 0.4463\n",
-            "[13/15] Train Loss: 0.7859, Val Loss: 0.7764, Val Acc: 0.4481\n",
-            "[14/15] Train Loss: 0.7859, Val Loss: 0.7767, Val Acc: 0.4499\n",
-            "[15/15] Train Loss: 0.7859, Val Loss: 0.7770, Val Acc: 0.4444\n",
-            "[1/15] Train Loss: 0.8034, Val Loss: 0.7776, Val Acc: 0.4444\n",
-            "[2/15] Train Loss: 0.8034, Val Loss: 0.7775, Val Acc: 0.4390\n",
-            "[3/15] Train Loss: 0.8034, Val Loss: 0.7774, Val Acc: 0.4463\n",
-            "[4/15] Train Loss: 0.8034, Val Loss: 0.7775, Val Acc: 0.4463\n",
-            "[5/15] Train Loss: 0.8034, Val Loss: 0.7776, Val Acc: 0.4444\n",
-            "[6/15] Train Loss: 0.8034, Val Loss: 0.7778, Val Acc: 0.4426\n",
-            "[7/15] Train Loss: 0.8034, Val Loss: 0.7780, Val Acc: 0.4335\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:41,740] Trial 14 finished with value: 0.5368731563421829 and parameters: {'dim1': 8, 'dim2': 16, 'dim3': 32, 'k1': 11, 'k2': 7, 'k3': 7, 's1': 3, 's2': 1, 's3': 1, 'dropout': 0.29953278141519113, 'head_dropout': 0.1211521487604992, 'kernel_size': 25, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[8/15] Train Loss: 0.8034, Val Loss: 0.7784, Val Acc: 0.4317\n",
-            "[9/15] Train Loss: 0.8034, Val Loss: 0.7788, Val Acc: 0.4299\n",
-            "[10/15] Train Loss: 0.8034, Val Loss: 0.7792, Val Acc: 0.4299\n",
-            "[11/15] Train Loss: 0.8034, Val Loss: 0.7798, Val Acc: 0.4281\n",
-            "[12/15] Train Loss: 0.8034, Val Loss: 0.7804, Val Acc: 0.4262\n",
-            "[13/15] Train Loss: 0.8034, Val Loss: 0.7812, Val Acc: 0.4299\n",
-            "[14/15] Train Loss: 0.8034, Val Loss: 0.7820, Val Acc: 0.4299\n",
-            "[15/15] Train Loss: 0.8034, Val Loss: 0.7830, Val Acc: 0.4281\n",
-            "[1/15] Train Loss: 0.7897, Val Loss: 0.7763, Val Acc: 0.4426\n",
-            "[2/15] Train Loss: 0.7897, Val Loss: 0.7763, Val Acc: 0.4426\n",
-            "[3/15] Train Loss: 0.7897, Val Loss: 0.7764, Val Acc: 0.4426\n",
-            "[4/15] Train Loss: 0.7897, Val Loss: 0.7764, Val Acc: 0.4426\n",
-            "[5/15] Train Loss: 0.7897, Val Loss: 0.7765, Val Acc: 0.4426\n",
-            "[6/15] Train Loss: 0.7897, Val Loss: 0.7765, Val Acc: 0.4408\n",
-            "[7/15] Train Loss: 0.7897, Val Loss: 0.7766, Val Acc: 0.4408\n",
-            "[8/15] Train Loss: 0.7897, Val Loss: 0.7766, Val Acc: 0.4408\n",
-            "[9/15] Train Loss: 0.7897, Val Loss: 0.7767, Val Acc: 0.4408\n",
-            "[10/15] Train Loss: 0.7897, Val Loss: 0.7767, Val Acc: 0.4353\n",
-            "[11/15] Train Loss: 0.7897, Val Loss: 0.7768, Val Acc: 0.4353\n",
-            "[12/15] Train Loss: 0.7897, Val Loss: 0.7768, Val Acc: 0.4335\n",
-            "[13/15] Train Loss: 0.7897, Val Loss: 0.7769, Val Acc: 0.4353\n",
-            "[14/15] Train Loss: 0.7897, Val Loss: 0.7769, Val Acc: 0.4317\n",
-            "[15/15] Train Loss: 0.7897, Val Loss: 0.7770, Val Acc: 0.4299\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:41,885] Trial 15 finished with value: 0.5929778933680104 and parameters: {'dim1': 8, 'dim2': 16, 'dim3': 32, 'k1': 11, 'k2': 7, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.20524155117571816, 'head_dropout': 0.2618789349827388, 'kernel_size': 15, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\n",
-            "[I 2025-05-05 09:48:42,110] Trial 16 finished with value: 0.022988505747126436 and parameters: {'dim1': 8, 'dim2': 64, 'dim3': 64, 'k1': 7, 'k2': 5, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.12246560736604013, 'head_dropout': 0.18607763125748958, 'kernel_size': 15, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[1/15] Train Loss: 0.8059, Val Loss: 0.7780, Val Acc: 0.5519\n",
-            "[2/15] Train Loss: 0.8059, Val Loss: 0.7782, Val Acc: 0.5446\n",
-            "[3/15] Train Loss: 0.8059, Val Loss: 0.7784, Val Acc: 0.5410\n",
-            "[4/15] Train Loss: 0.8059, Val Loss: 0.7787, Val Acc: 0.5410\n",
-            "[5/15] Train Loss: 0.8059, Val Loss: 0.7791, Val Acc: 0.5428\n",
-            "[6/15] Train Loss: 0.8059, Val Loss: 0.7795, Val Acc: 0.5428\n",
-            "[7/15] Train Loss: 0.8059, Val Loss: 0.7799, Val Acc: 0.5428\n",
-            "[8/15] Train Loss: 0.8059, Val Loss: 0.7805, Val Acc: 0.5428\n",
-            "[9/15] Train Loss: 0.8059, Val Loss: 0.7811, Val Acc: 0.5428\n",
-            "[10/15] Train Loss: 0.8059, Val Loss: 0.7818, Val Acc: 0.5410\n",
-            "[11/15] Train Loss: 0.8059, Val Loss: 0.7826, Val Acc: 0.5410\n",
-            "[12/15] Train Loss: 0.8059, Val Loss: 0.7835, Val Acc: 0.5392\n",
-            "[13/15] Train Loss: 0.8059, Val Loss: 0.7844, Val Acc: 0.5373\n",
-            "[14/15] Train Loss: 0.8059, Val Loss: 0.7855, Val Acc: 0.5373\n",
-            "[15/15] Train Loss: 0.8059, Val Loss: 0.7866, Val Acc: 0.5355\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:42,255] Trial 17 finished with value: 0.05303030303030303 and parameters: {'dim1': 8, 'dim2': 16, 'dim3': 32, 'k1': 7, 'k2': 5, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.185805691444221, 'head_dropout': 0.1365979182657906, 'kernel_size': 15, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[1/15] Train Loss: 0.7945, Val Loss: 0.7782, Val Acc: 0.5537\n",
-            "[2/15] Train Loss: 0.7945, Val Loss: 0.7780, Val Acc: 0.5519\n",
-            "[3/15] Train Loss: 0.7945, Val Loss: 0.7779, Val Acc: 0.5537\n",
-            "[4/15] Train Loss: 0.7945, Val Loss: 0.7780, Val Acc: 0.5537\n",
-            "[5/15] Train Loss: 0.7945, Val Loss: 0.7781, Val Acc: 0.5519\n",
-            "[6/15] Train Loss: 0.7945, Val Loss: 0.7784, Val Acc: 0.5537\n",
-            "[7/15] Train Loss: 0.7945, Val Loss: 0.7787, Val Acc: 0.5537\n",
-            "[8/15] Train Loss: 0.7945, Val Loss: 0.7791, Val Acc: 0.5537\n",
-            "[9/15] Train Loss: 0.7945, Val Loss: 0.7795, Val Acc: 0.5519\n",
-            "[10/15] Train Loss: 0.7945, Val Loss: 0.7800, Val Acc: 0.5537\n",
-            "[11/15] Train Loss: 0.7945, Val Loss: 0.7806, Val Acc: 0.5519\n",
-            "[12/15] Train Loss: 0.7945, Val Loss: 0.7812, Val Acc: 0.5464\n",
-            "[13/15] Train Loss: 0.7945, Val Loss: 0.7819, Val Acc: 0.5446\n",
-            "[14/15] Train Loss: 0.7945, Val Loss: 0.7827, Val Acc: 0.5446\n",
-            "[15/15] Train Loss: 0.7945, Val Loss: 0.7835, Val Acc: 0.5446\n",
-            "[1/15] Train Loss: 0.7945, Val Loss: 0.7749, Val Acc: 0.5282\n",
-            "[2/15] Train Loss: 0.7945, Val Loss: 0.7749, Val Acc: 0.5392\n",
-            "[3/15] Train Loss: 0.7945, Val Loss: 0.7749, Val Acc: 0.5501\n",
-            "[4/15] Train Loss: 0.7945, Val Loss: 0.7749, Val Acc: 0.5556\n",
-            "[5/15] Train Loss: 0.7945, Val Loss: 0.7750, Val Acc: 0.5592\n",
-            "[6/15] Train Loss: 0.7945, Val Loss: 0.7751, Val Acc: 0.5592\n",
-            "[7/15] Train Loss: 0.7945, Val Loss: 0.7752, Val Acc: 0.5610\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:42,418] Trial 18 finished with value: 0.16382252559726962 and parameters: {'dim1': 16, 'dim2': 16, 'dim3': 32, 'k1': 11, 'k2': 7, 'k3': 7, 's1': 5, 's2': 3, 's3': 3, 'dropout': 0.12153873846946578, 'head_dropout': 0.0040990885857982995, 'kernel_size': 15, 'decomposition': True, 'revin': True, 'affine': True}. Best is trial 7 with value: 0.6099476439790575.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[8/15] Train Loss: 0.7945, Val Loss: 0.7753, Val Acc: 0.5628\n",
-            "[9/15] Train Loss: 0.7945, Val Loss: 0.7755, Val Acc: 0.5610\n",
-            "[10/15] Train Loss: 0.7945, Val Loss: 0.7756, Val Acc: 0.5610\n",
-            "[11/15] Train Loss: 0.7945, Val Loss: 0.7758, Val Acc: 0.5592\n",
-            "[12/15] Train Loss: 0.7945, Val Loss: 0.7760, Val Acc: 0.5610\n",
-            "[13/15] Train Loss: 0.7945, Val Loss: 0.7762, Val Acc: 0.5556\n",
-            "[14/15] Train Loss: 0.7945, Val Loss: 0.7765, Val Acc: 0.5556\n",
-            "[15/15] Train Loss: 0.7945, Val Loss: 0.7768, Val Acc: 0.5537\n",
-            "[1/15] Train Loss: 0.7828, Val Loss: 0.7769, Val Acc: 0.5209\n",
-            "[2/15] Train Loss: 0.7828, Val Loss: 0.7770, Val Acc: 0.5282\n",
-            "[3/15] Train Loss: 0.7828, Val Loss: 0.7771, Val Acc: 0.5355\n",
-            "[4/15] Train Loss: 0.7828, Val Loss: 0.7771, Val Acc: 0.5373\n",
-            "[5/15] Train Loss: 0.7828, Val Loss: 0.7773, Val Acc: 0.5337\n",
-            "[6/15] Train Loss: 0.7828, Val Loss: 0.7774, Val Acc: 0.5319\n",
-            "[7/15] Train Loss: 0.7828, Val Loss: 0.7775, Val Acc: 0.5282\n",
-            "[8/15] Train Loss: 0.7828, Val Loss: 0.7776, Val Acc: 0.5155\n",
-            "[9/15] Train Loss: 0.7828, Val Loss: 0.7778, Val Acc: 0.5046\n",
-            "[10/15] Train Loss: 0.7828, Val Loss: 0.7780, Val Acc: 0.4936\n",
-            "[11/15] Train Loss: 0.7828, Val Loss: 0.7783, Val Acc: 0.4882\n",
-            "[12/15] Train Loss: 0.7828, Val Loss: 0.7787, Val Acc: 0.4809\n",
-            "[13/15] Train Loss: 0.7828, Val Loss: 0.7791, Val Acc: 0.4718\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:42,584] Trial 19 finished with value: 0.35665914221218964 and parameters: {'dim1': 32, 'dim2': 16, 'dim3': 32, 'k1': 7, 'k2': 3, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.24450751860038195, 'head_dropout': 0.2574808942189673, 'kernel_size': 31, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[14/15] Train Loss: 0.7828, Val Loss: 0.7796, Val Acc: 0.4754\n",
-            "[15/15] Train Loss: 0.7828, Val Loss: 0.7801, Val Acc: 0.4809\n",
-            "[1/15] Train Loss: 0.7863, Val Loss: 0.7738, Val Acc: 0.4608\n",
-            "[2/15] Train Loss: 0.7863, Val Loss: 0.7739, Val Acc: 0.4572\n",
-            "[3/15] Train Loss: 0.7863, Val Loss: 0.7740, Val Acc: 0.4608\n",
-            "[4/15] Train Loss: 0.7863, Val Loss: 0.7741, Val Acc: 0.4663\n",
-            "[5/15] Train Loss: 0.7863, Val Loss: 0.7742, Val Acc: 0.4663\n",
-            "[6/15] Train Loss: 0.7863, Val Loss: 0.7743, Val Acc: 0.4608\n",
-            "[7/15] Train Loss: 0.7863, Val Loss: 0.7744, Val Acc: 0.4681\n",
-            "[8/15] Train Loss: 0.7863, Val Loss: 0.7744, Val Acc: 0.4791\n",
-            "[9/15] Train Loss: 0.7863, Val Loss: 0.7744, Val Acc: 0.4791\n",
-            "[10/15] Train Loss: 0.7863, Val Loss: 0.7744, Val Acc: 0.4791\n",
-            "[11/15] Train Loss: 0.7863, Val Loss: 0.7744, Val Acc: 0.4736\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:42,813] Trial 20 finished with value: 0.5577812018489985 and parameters: {'dim1': 8, 'dim2': 64, 'dim3': 64, 'k1': 11, 'k2': 5, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.12296957714694715, 'head_dropout': 0.21705689941827305, 'kernel_size': 15, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\n",
-            "[I 2025-05-05 09:48:42,950] Trial 21 finished with value: 0.42731277533039647 and parameters: {'dim1': 8, 'dim2': 16, 'dim3': 32, 'k1': 11, 'k2': 7, 'k3': 5, 's1': 1, 's2': 1, 's3': 1, 'dropout': 0.2263775487811876, 'head_dropout': 0.26556834420210373, 'kernel_size': 25, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[12/15] Train Loss: 0.7863, Val Loss: 0.7744, Val Acc: 0.4754\n",
-            "[13/15] Train Loss: 0.7863, Val Loss: 0.7743, Val Acc: 0.4754\n",
-            "[14/15] Train Loss: 0.7863, Val Loss: 0.7743, Val Acc: 0.4736\n",
-            "[15/15] Train Loss: 0.7863, Val Loss: 0.7743, Val Acc: 0.4772\n",
-            "[1/15] Train Loss: 0.7921, Val Loss: 0.7749, Val Acc: 0.5428\n",
-            "[2/15] Train Loss: 0.7921, Val Loss: 0.7750, Val Acc: 0.5428\n",
-            "[3/15] Train Loss: 0.7921, Val Loss: 0.7751, Val Acc: 0.5392\n",
-            "[4/15] Train Loss: 0.7921, Val Loss: 0.7753, Val Acc: 0.5428\n",
-            "[5/15] Train Loss: 0.7921, Val Loss: 0.7754, Val Acc: 0.5410\n",
-            "[6/15] Train Loss: 0.7921, Val Loss: 0.7756, Val Acc: 0.5301\n",
-            "[7/15] Train Loss: 0.7921, Val Loss: 0.7758, Val Acc: 0.5373\n",
-            "[8/15] Train Loss: 0.7921, Val Loss: 0.7759, Val Acc: 0.5355\n",
-            "[9/15] Train Loss: 0.7921, Val Loss: 0.7761, Val Acc: 0.5337\n",
-            "[10/15] Train Loss: 0.7921, Val Loss: 0.7763, Val Acc: 0.5228\n",
-            "[11/15] Train Loss: 0.7921, Val Loss: 0.7765, Val Acc: 0.5337\n",
-            "[12/15] Train Loss: 0.7921, Val Loss: 0.7768, Val Acc: 0.5337\n",
-            "[13/15] Train Loss: 0.7921, Val Loss: 0.7770, Val Acc: 0.5319\n",
-            "[14/15] Train Loss: 0.7921, Val Loss: 0.7773, Val Acc: 0.5355\n",
-            "[15/15] Train Loss: 0.7921, Val Loss: 0.7777, Val Acc: 0.5264\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:43,091] Trial 22 finished with value: 0.0962962962962963 and parameters: {'dim1': 8, 'dim2': 16, 'dim3': 32, 'k1': 11, 'k2': 7, 'k3': 5, 's1': 1, 's2': 1, 's3': 1, 'dropout': 0.21861264483852605, 'head_dropout': 0.2804818977771104, 'kernel_size': 25, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[1/15] Train Loss: 0.8118, Val Loss: 0.7756, Val Acc: 0.5574\n",
-            "[2/15] Train Loss: 0.8118, Val Loss: 0.7754, Val Acc: 0.5574\n",
-            "[3/15] Train Loss: 0.8118, Val Loss: 0.7753, Val Acc: 0.5574\n",
-            "[4/15] Train Loss: 0.8118, Val Loss: 0.7752, Val Acc: 0.5592\n",
-            "[5/15] Train Loss: 0.8118, Val Loss: 0.7752, Val Acc: 0.5592\n",
-            "[6/15] Train Loss: 0.8118, Val Loss: 0.7752, Val Acc: 0.5574\n",
-            "[7/15] Train Loss: 0.8118, Val Loss: 0.7753, Val Acc: 0.5556\n",
-            "[8/15] Train Loss: 0.8118, Val Loss: 0.7754, Val Acc: 0.5537\n",
-            "[9/15] Train Loss: 0.8118, Val Loss: 0.7756, Val Acc: 0.5574\n",
-            "[10/15] Train Loss: 0.8118, Val Loss: 0.7759, Val Acc: 0.5574\n",
-            "[11/15] Train Loss: 0.8118, Val Loss: 0.7763, Val Acc: 0.5610\n",
-            "[12/15] Train Loss: 0.8118, Val Loss: 0.7767, Val Acc: 0.5556\n",
-            "[13/15] Train Loss: 0.8118, Val Loss: 0.7772, Val Acc: 0.5592\n",
-            "[14/15] Train Loss: 0.8118, Val Loss: 0.7778, Val Acc: 0.5592\n",
-            "[15/15] Train Loss: 0.8118, Val Loss: 0.7785, Val Acc: 0.5556\n",
-            "[1/15] Train Loss: 0.7932, Val Loss: 0.7717, Val Acc: 0.5137\n",
-            "[2/15] Train Loss: 0.7932, Val Loss: 0.7716, Val Acc: 0.5191\n",
-            "[3/15] Train Loss: 0.7932, Val Loss: 0.7715, Val Acc: 0.5392\n",
-            "[4/15] Train Loss: 0.7932, Val Loss: 0.7714, Val Acc: 0.5392\n",
-            "[5/15] Train Loss: 0.7932, Val Loss: 0.7713, Val Acc: 0.5537\n",
-            "[6/15] Train Loss: 0.7932, Val Loss: 0.7712, Val Acc: 0.5574\n",
-            "[7/15] Train Loss: 0.7932, Val Loss: 0.7710, Val Acc: 0.5428\n",
-            "[8/15] Train Loss: 0.7932, Val Loss: 0.7709, Val Acc: 0.5410\n",
-            "[9/15] Train Loss: 0.7932, Val Loss: 0.7708, Val Acc: 0.5464\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:43,235] Trial 23 finished with value: 0.5185185185185185 and parameters: {'dim1': 8, 'dim2': 16, 'dim3': 32, 'k1': 11, 'k2': 7, 'k3': 3, 's1': 3, 's2': 1, 's3': 1, 'dropout': 0.18458213162672515, 'head_dropout': 0.24241601047205022, 'kernel_size': 31, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\n",
-            "[I 2025-05-05 09:48:43,382] Trial 24 finished with value: 0.5718562874251497 and parameters: {'dim1': 8, 'dim2': 16, 'dim3': 32, 'k1': 11, 'k2': 7, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.2669843072398618, 'head_dropout': 0.19014073403872095, 'kernel_size': 31, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[10/15] Train Loss: 0.7932, Val Loss: 0.7707, Val Acc: 0.5501\n",
-            "[11/15] Train Loss: 0.7932, Val Loss: 0.7706, Val Acc: 0.5519\n",
-            "[12/15] Train Loss: 0.7932, Val Loss: 0.7705, Val Acc: 0.5574\n",
-            "[13/15] Train Loss: 0.7932, Val Loss: 0.7704, Val Acc: 0.5519\n",
-            "[14/15] Train Loss: 0.7932, Val Loss: 0.7704, Val Acc: 0.5519\n",
-            "[15/15] Train Loss: 0.7932, Val Loss: 0.7704, Val Acc: 0.5501\n",
-            "[1/15] Train Loss: 0.7925, Val Loss: 0.7746, Val Acc: 0.4754\n",
-            "[2/15] Train Loss: 0.7925, Val Loss: 0.7748, Val Acc: 0.4699\n",
-            "[3/15] Train Loss: 0.7925, Val Loss: 0.7749, Val Acc: 0.4681\n",
-            "[4/15] Train Loss: 0.7925, Val Loss: 0.7750, Val Acc: 0.4681\n",
-            "[5/15] Train Loss: 0.7925, Val Loss: 0.7751, Val Acc: 0.4681\n",
-            "[6/15] Train Loss: 0.7925, Val Loss: 0.7752, Val Acc: 0.4645\n",
-            "[7/15] Train Loss: 0.7925, Val Loss: 0.7753, Val Acc: 0.4699\n",
-            "[8/15] Train Loss: 0.7925, Val Loss: 0.7754, Val Acc: 0.4699\n",
-            "[9/15] Train Loss: 0.7925, Val Loss: 0.7756, Val Acc: 0.4681\n",
-            "[10/15] Train Loss: 0.7925, Val Loss: 0.7758, Val Acc: 0.4663\n",
-            "[11/15] Train Loss: 0.7925, Val Loss: 0.7759, Val Acc: 0.4645\n",
-            "[12/15] Train Loss: 0.7925, Val Loss: 0.7761, Val Acc: 0.4718\n",
-            "[13/15] Train Loss: 0.7925, Val Loss: 0.7764, Val Acc: 0.4754\n",
-            "[14/15] Train Loss: 0.7925, Val Loss: 0.7766, Val Acc: 0.4736\n",
-            "[15/15] Train Loss: 0.7925, Val Loss: 0.7769, Val Acc: 0.4791\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:43,524] Trial 25 finished with value: 0.5963541666666666 and parameters: {'dim1': 8, 'dim2': 16, 'dim3': 32, 'k1': 3, 'k2': 7, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.2729255052967877, 'head_dropout': 0.18705529902081164, 'kernel_size': 31, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[1/15] Train Loss: 0.7970, Val Loss: 0.7767, Val Acc: 0.4444\n",
-            "[2/15] Train Loss: 0.7970, Val Loss: 0.7769, Val Acc: 0.4426\n",
-            "[3/15] Train Loss: 0.7970, Val Loss: 0.7770, Val Acc: 0.4408\n",
-            "[4/15] Train Loss: 0.7970, Val Loss: 0.7771, Val Acc: 0.4408\n",
-            "[5/15] Train Loss: 0.7970, Val Loss: 0.7772, Val Acc: 0.4408\n",
-            "[6/15] Train Loss: 0.7970, Val Loss: 0.7773, Val Acc: 0.4408\n",
-            "[7/15] Train Loss: 0.7970, Val Loss: 0.7774, Val Acc: 0.4372\n",
-            "[8/15] Train Loss: 0.7970, Val Loss: 0.7776, Val Acc: 0.4372\n",
-            "[9/15] Train Loss: 0.7970, Val Loss: 0.7778, Val Acc: 0.4390\n",
-            "[10/15] Train Loss: 0.7970, Val Loss: 0.7781, Val Acc: 0.4408\n",
-            "[11/15] Train Loss: 0.7970, Val Loss: 0.7784, Val Acc: 0.4390\n",
-            "[12/15] Train Loss: 0.7970, Val Loss: 0.7788, Val Acc: 0.4390\n",
-            "[13/15] Train Loss: 0.7970, Val Loss: 0.7793, Val Acc: 0.4408\n",
-            "[14/15] Train Loss: 0.7970, Val Loss: 0.7797, Val Acc: 0.4408\n",
-            "[15/15] Train Loss: 0.7970, Val Loss: 0.7803, Val Acc: 0.4353\n",
-            "[1/15] Train Loss: 0.8036, Val Loss: 0.7748, Val Acc: 0.4536\n",
-            "[2/15] Train Loss: 0.8036, Val Loss: 0.7747, Val Acc: 0.4590\n",
-            "[3/15] Train Loss: 0.8036, Val Loss: 0.7746, Val Acc: 0.4590\n",
-            "[4/15] Train Loss: 0.8036, Val Loss: 0.7745, Val Acc: 0.4681\n",
-            "[5/15] Train Loss: 0.8036, Val Loss: 0.7746, Val Acc: 0.4645\n",
-            "[6/15] Train Loss: 0.8036, Val Loss: 0.7747, Val Acc: 0.4590\n",
-            "[7/15] Train Loss: 0.8036, Val Loss: 0.7748, Val Acc: 0.4481\n",
-            "[8/15] Train Loss: 0.8036, Val Loss: 0.7749, Val Acc: 0.4390\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:43,689] Trial 26 finished with value: 0.5904255319148937 and parameters: {'dim1': 8, 'dim2': 16, 'dim3': 32, 'k1': 3, 'k2': 7, 'k3': 7, 's1': 5, 's2': 3, 's3': 3, 'dropout': 0.29946465097524033, 'head_dropout': 0.14825447674501546, 'kernel_size': 31, 'decomposition': True, 'revin': True, 'affine': True}. Best is trial 7 with value: 0.6099476439790575.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[9/15] Train Loss: 0.8036, Val Loss: 0.7751, Val Acc: 0.4317\n",
-            "[10/15] Train Loss: 0.8036, Val Loss: 0.7754, Val Acc: 0.4281\n",
-            "[11/15] Train Loss: 0.8036, Val Loss: 0.7757, Val Acc: 0.4317\n",
-            "[12/15] Train Loss: 0.8036, Val Loss: 0.7762, Val Acc: 0.4335\n",
-            "[13/15] Train Loss: 0.8036, Val Loss: 0.7766, Val Acc: 0.4335\n",
-            "[14/15] Train Loss: 0.8036, Val Loss: 0.7772, Val Acc: 0.4353\n",
-            "[15/15] Train Loss: 0.8036, Val Loss: 0.7779, Val Acc: 0.4390\n",
-            "[1/15] Train Loss: 0.7841, Val Loss: 0.7752, Val Acc: 0.5592\n",
-            "[2/15] Train Loss: 0.7841, Val Loss: 0.7750, Val Acc: 0.5574\n",
-            "[3/15] Train Loss: 0.7841, Val Loss: 0.7748, Val Acc: 0.5574\n",
-            "[4/15] Train Loss: 0.7841, Val Loss: 0.7746, Val Acc: 0.5556\n",
-            "[5/15] Train Loss: 0.7841, Val Loss: 0.7744, Val Acc: 0.5556\n",
-            "[6/15] Train Loss: 0.7841, Val Loss: 0.7743, Val Acc: 0.5519\n",
-            "[7/15] Train Loss: 0.7841, Val Loss: 0.7743, Val Acc: 0.5537\n",
-            "[8/15] Train Loss: 0.7841, Val Loss: 0.7742, Val Acc: 0.5574\n",
-            "[9/15] Train Loss: 0.7841, Val Loss: 0.7742, Val Acc: 0.5628\n",
-            "[10/15] Train Loss: 0.7841, Val Loss: 0.7741, Val Acc: 0.5647\n",
-            "[11/15] Train Loss: 0.7841, Val Loss: 0.7740, Val Acc: 0.5628\n",
-            "[12/15] Train Loss: 0.7841, Val Loss: 0.7740, Val Acc: 0.5665\n",
-            "[13/15] Train Loss: 0.7841, Val Loss: 0.7739, Val Acc: 0.5665\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:43,847] Trial 27 finished with value: 0.2364217252396166 and parameters: {'dim1': 16, 'dim2': 16, 'dim3': 32, 'k1': 3, 'k2': 5, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.25200271935724355, 'head_dropout': 0.22482432409286787, 'kernel_size': 31, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[14/15] Train Loss: 0.7841, Val Loss: 0.7740, Val Acc: 0.5628\n",
-            "[15/15] Train Loss: 0.7841, Val Loss: 0.7740, Val Acc: 0.5647\n",
-            "[1/15] Train Loss: 0.7932, Val Loss: 0.7751, Val Acc: 0.5446\n",
-            "[2/15] Train Loss: 0.7932, Val Loss: 0.7750, Val Acc: 0.5483\n",
-            "[3/15] Train Loss: 0.7932, Val Loss: 0.7750, Val Acc: 0.5464\n",
-            "[4/15] Train Loss: 0.7932, Val Loss: 0.7750, Val Acc: 0.5428\n",
-            "[5/15] Train Loss: 0.7932, Val Loss: 0.7749, Val Acc: 0.5428\n",
-            "[6/15] Train Loss: 0.7932, Val Loss: 0.7749, Val Acc: 0.5446\n",
-            "[7/15] Train Loss: 0.7932, Val Loss: 0.7749, Val Acc: 0.5428\n",
-            "[8/15] Train Loss: 0.7932, Val Loss: 0.7749, Val Acc: 0.5446\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:44,172] Trial 28 finished with value: 0.4 and parameters: {'dim1': 32, 'dim2': 64, 'dim3': 128, 'k1': 3, 'k2': 3, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.16977675556582822, 'head_dropout': 0.2064405823469388, 'kernel_size': 15, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[9/15] Train Loss: 0.7932, Val Loss: 0.7749, Val Acc: 0.5301\n",
-            "[10/15] Train Loss: 0.7932, Val Loss: 0.7749, Val Acc: 0.5301\n",
-            "[11/15] Train Loss: 0.7932, Val Loss: 0.7749, Val Acc: 0.5373\n",
-            "[12/15] Train Loss: 0.7932, Val Loss: 0.7750, Val Acc: 0.5337\n",
-            "[13/15] Train Loss: 0.7932, Val Loss: 0.7750, Val Acc: 0.5355\n",
-            "[14/15] Train Loss: 0.7932, Val Loss: 0.7751, Val Acc: 0.5337\n",
-            "[15/15] Train Loss: 0.7932, Val Loss: 0.7752, Val Acc: 0.5301\n",
-            "[1/15] Train Loss: 0.7867, Val Loss: 0.7753, Val Acc: 0.5246\n",
-            "[2/15] Train Loss: 0.7867, Val Loss: 0.7754, Val Acc: 0.5191\n",
-            "[3/15] Train Loss: 0.7867, Val Loss: 0.7754, Val Acc: 0.5191\n",
-            "[4/15] Train Loss: 0.7867, Val Loss: 0.7754, Val Acc: 0.5282\n",
-            "[5/15] Train Loss: 0.7867, Val Loss: 0.7755, Val Acc: 0.5319\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:44,356] Trial 29 finished with value: 0.35467980295566504 and parameters: {'dim1': 8, 'dim2': 32, 'dim3': 64, 'k1': 7, 'k2': 7, 'k3': 3, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.20598016386183188, 'head_dropout': 0.07214530441113338, 'kernel_size': 5, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[6/15] Train Loss: 0.7867, Val Loss: 0.7755, Val Acc: 0.5282\n",
-            "[7/15] Train Loss: 0.7867, Val Loss: 0.7756, Val Acc: 0.5319\n",
-            "[8/15] Train Loss: 0.7867, Val Loss: 0.7757, Val Acc: 0.5228\n",
-            "[9/15] Train Loss: 0.7867, Val Loss: 0.7759, Val Acc: 0.5155\n",
-            "[10/15] Train Loss: 0.7867, Val Loss: 0.7760, Val Acc: 0.5209\n",
-            "[11/15] Train Loss: 0.7867, Val Loss: 0.7762, Val Acc: 0.5209\n",
-            "[12/15] Train Loss: 0.7867, Val Loss: 0.7764, Val Acc: 0.5228\n",
-            "[13/15] Train Loss: 0.7867, Val Loss: 0.7766, Val Acc: 0.5264\n",
-            "[14/15] Train Loss: 0.7867, Val Loss: 0.7769, Val Acc: 0.5246\n",
-            "[15/15] Train Loss: 0.7867, Val Loss: 0.7772, Val Acc: 0.5228\n",
-            "[1/15] Train Loss: 0.7901, Val Loss: 0.7769, Val Acc: 0.4372\n",
-            "[2/15] Train Loss: 0.7901, Val Loss: 0.7770, Val Acc: 0.4372\n",
-            "[3/15] Train Loss: 0.7901, Val Loss: 0.7770, Val Acc: 0.4426\n",
-            "[4/15] Train Loss: 0.7901, Val Loss: 0.7772, Val Acc: 0.4444\n",
-            "[5/15] Train Loss: 0.7901, Val Loss: 0.7774, Val Acc: 0.4408\n",
-            "[6/15] Train Loss: 0.7901, Val Loss: 0.7777, Val Acc: 0.4372\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:44,570] Trial 30 finished with value: 0.5443786982248521 and parameters: {'dim1': 8, 'dim2': 16, 'dim3': 128, 'k1': 3, 'k2': 7, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.2605433262068643, 'head_dropout': 0.16097007706807925, 'kernel_size': 31, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[7/15] Train Loss: 0.7901, Val Loss: 0.7780, Val Acc: 0.4390\n",
-            "[8/15] Train Loss: 0.7901, Val Loss: 0.7784, Val Acc: 0.4426\n",
-            "[9/15] Train Loss: 0.7901, Val Loss: 0.7788, Val Acc: 0.4408\n",
-            "[10/15] Train Loss: 0.7901, Val Loss: 0.7792, Val Acc: 0.4426\n",
-            "[11/15] Train Loss: 0.7901, Val Loss: 0.7798, Val Acc: 0.4463\n",
-            "[12/15] Train Loss: 0.7901, Val Loss: 0.7804, Val Acc: 0.4408\n",
-            "[13/15] Train Loss: 0.7901, Val Loss: 0.7810, Val Acc: 0.4444\n",
-            "[14/15] Train Loss: 0.7901, Val Loss: 0.7818, Val Acc: 0.4426\n",
-            "[15/15] Train Loss: 0.7901, Val Loss: 0.7826, Val Acc: 0.4390\n",
-            "[1/15] Train Loss: 0.7996, Val Loss: 0.7798, Val Acc: 0.5537\n",
-            "[2/15] Train Loss: 0.7996, Val Loss: 0.7802, Val Acc: 0.5537\n",
-            "[3/15] Train Loss: 0.7996, Val Loss: 0.7807, Val Acc: 0.5537\n",
-            "[4/15] Train Loss: 0.7996, Val Loss: 0.7811, Val Acc: 0.5519\n",
-            "[5/15] Train Loss: 0.7996, Val Loss: 0.7816, Val Acc: 0.5501\n",
-            "[6/15] Train Loss: 0.7996, Val Loss: 0.7820, Val Acc: 0.5519\n",
-            "[7/15] Train Loss: 0.7996, Val Loss: 0.7825, Val Acc: 0.5537\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:44,743] Trial 31 finished with value: 0.1033210332103321 and parameters: {'dim1': 8, 'dim2': 16, 'dim3': 32, 'k1': 3, 'k2': 7, 'k3': 7, 's1': 5, 's2': 3, 's3': 3, 'dropout': 0.2993508527932263, 'head_dropout': 0.1045978616593376, 'kernel_size': 31, 'decomposition': True, 'revin': True, 'affine': True}. Best is trial 7 with value: 0.6099476439790575.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[8/15] Train Loss: 0.7996, Val Loss: 0.7830, Val Acc: 0.5537\n",
-            "[9/15] Train Loss: 0.7996, Val Loss: 0.7835, Val Acc: 0.5537\n",
-            "[10/15] Train Loss: 0.7996, Val Loss: 0.7841, Val Acc: 0.5574\n",
-            "[11/15] Train Loss: 0.7996, Val Loss: 0.7847, Val Acc: 0.5574\n",
-            "[12/15] Train Loss: 0.7996, Val Loss: 0.7854, Val Acc: 0.5610\n",
-            "[13/15] Train Loss: 0.7996, Val Loss: 0.7861, Val Acc: 0.5592\n",
-            "[14/15] Train Loss: 0.7996, Val Loss: 0.7869, Val Acc: 0.5556\n",
-            "[15/15] Train Loss: 0.7996, Val Loss: 0.7878, Val Acc: 0.5574\n",
-            "[1/15] Train Loss: 0.7903, Val Loss: 0.7748, Val Acc: 0.5610\n",
-            "[2/15] Train Loss: 0.7903, Val Loss: 0.7749, Val Acc: 0.5483\n",
-            "[3/15] Train Loss: 0.7903, Val Loss: 0.7751, Val Acc: 0.5428\n",
-            "[4/15] Train Loss: 0.7903, Val Loss: 0.7753, Val Acc: 0.5355\n",
-            "[5/15] Train Loss: 0.7903, Val Loss: 0.7755, Val Acc: 0.5355\n",
-            "[6/15] Train Loss: 0.7903, Val Loss: 0.7757, Val Acc: 0.5337\n",
-            "[7/15] Train Loss: 0.7903, Val Loss: 0.7759, Val Acc: 0.5355\n",
-            "[8/15] Train Loss: 0.7903, Val Loss: 0.7761, Val Acc: 0.5373\n",
-            "[9/15] Train Loss: 0.7903, Val Loss: 0.7763, Val Acc: 0.5428\n",
-            "[10/15] Train Loss: 0.7903, Val Loss: 0.7765, Val Acc: 0.5428\n",
-            "[11/15] Train Loss: 0.7903, Val Loss: 0.7767, Val Acc: 0.5373\n",
-            "[12/15] Train Loss: 0.7903, Val Loss: 0.7770, Val Acc: 0.5355\n",
-            "[13/15] Train Loss: 0.7903, Val Loss: 0.7772, Val Acc: 0.5355\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:44,895] Trial 32 finished with value: 0.13058419243986255 and parameters: {'dim1': 8, 'dim2': 16, 'dim3': 32, 'k1': 3, 'k2': 7, 'k3': 7, 's1': 5, 's2': 3, 's3': 3, 'dropout': 0.28188423316190453, 'head_dropout': 0.15651767677402503, 'kernel_size': 31, 'decomposition': True, 'revin': True, 'affine': True}. Best is trial 7 with value: 0.6099476439790575.\n",
-            "[I 2025-05-05 09:48:45,048] Trial 33 finished with value: 0.4777777777777778 and parameters: {'dim1': 8, 'dim2': 16, 'dim3': 32, 'k1': 3, 'k2': 7, 'k3': 7, 's1': 5, 's2': 3, 's3': 3, 'dropout': 0.284458794920738, 'head_dropout': 0.18916809678518312, 'kernel_size': 31, 'decomposition': True, 'revin': True, 'affine': True}. Best is trial 7 with value: 0.6099476439790575.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[14/15] Train Loss: 0.7903, Val Loss: 0.7775, Val Acc: 0.5410\n",
-            "[15/15] Train Loss: 0.7903, Val Loss: 0.7778, Val Acc: 0.5392\n",
-            "[1/15] Train Loss: 0.7911, Val Loss: 0.7756, Val Acc: 0.4663\n",
-            "[2/15] Train Loss: 0.7911, Val Loss: 0.7755, Val Acc: 0.4772\n",
-            "[3/15] Train Loss: 0.7911, Val Loss: 0.7755, Val Acc: 0.4772\n",
-            "[4/15] Train Loss: 0.7911, Val Loss: 0.7755, Val Acc: 0.4736\n",
-            "[5/15] Train Loss: 0.7911, Val Loss: 0.7755, Val Acc: 0.4809\n",
-            "[6/15] Train Loss: 0.7911, Val Loss: 0.7756, Val Acc: 0.4754\n",
-            "[7/15] Train Loss: 0.7911, Val Loss: 0.7756, Val Acc: 0.4791\n",
-            "[8/15] Train Loss: 0.7911, Val Loss: 0.7757, Val Acc: 0.4809\n",
-            "[9/15] Train Loss: 0.7911, Val Loss: 0.7758, Val Acc: 0.4827\n",
-            "[10/15] Train Loss: 0.7911, Val Loss: 0.7759, Val Acc: 0.4754\n",
-            "[11/15] Train Loss: 0.7911, Val Loss: 0.7760, Val Acc: 0.4791\n",
-            "[12/15] Train Loss: 0.7911, Val Loss: 0.7762, Val Acc: 0.4900\n",
-            "[13/15] Train Loss: 0.7911, Val Loss: 0.7764, Val Acc: 0.4845\n",
-            "[14/15] Train Loss: 0.7911, Val Loss: 0.7766, Val Acc: 0.4845\n",
-            "[15/15] Train Loss: 0.7911, Val Loss: 0.7768, Val Acc: 0.4863\n",
-            "[1/15] Train Loss: 0.7908, Val Loss: 0.8054, Val Acc: 0.5027\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:45,188] Trial 34 finished with value: 0.4271047227926078 and parameters: {'dim1': 8, 'dim2': 32, 'dim3': 32, 'k1': 5, 'k2': 5, 'k3': 7, 's1': 5, 's2': 3, 's3': 3, 'dropout': 0.23905371048025148, 'head_dropout': 0.14385077221220094, 'kernel_size': 31, 'decomposition': False, 'revin': False, 'affine': True}. Best is trial 7 with value: 0.6099476439790575.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[2/15] Train Loss: 0.7908, Val Loss: 0.7920, Val Acc: 0.5100\n",
-            "[3/15] Train Loss: 0.7908, Val Loss: 0.7879, Val Acc: 0.5027\n",
-            "[4/15] Train Loss: 0.7908, Val Loss: 0.7863, Val Acc: 0.4918\n",
-            "[5/15] Train Loss: 0.7908, Val Loss: 0.7856, Val Acc: 0.4954\n",
-            "[6/15] Train Loss: 0.7908, Val Loss: 0.7854, Val Acc: 0.5027\n",
-            "[7/15] Train Loss: 0.7908, Val Loss: 0.7854, Val Acc: 0.5046\n",
-            "[8/15] Train Loss: 0.7908, Val Loss: 0.7855, Val Acc: 0.5046\n",
-            "[9/15] Train Loss: 0.7908, Val Loss: 0.7858, Val Acc: 0.5082\n",
-            "[10/15] Train Loss: 0.7908, Val Loss: 0.7862, Val Acc: 0.5064\n",
-            "[11/15] Train Loss: 0.7908, Val Loss: 0.7869, Val Acc: 0.5046\n",
-            "[12/15] Train Loss: 0.7908, Val Loss: 0.7878, Val Acc: 0.5100\n",
-            "[13/15] Train Loss: 0.7908, Val Loss: 0.7889, Val Acc: 0.5046\n",
-            "[14/15] Train Loss: 0.7908, Val Loss: 0.7902, Val Acc: 0.4954\n",
-            "[15/15] Train Loss: 0.7908, Val Loss: 0.7918, Val Acc: 0.4918\n",
-            "[1/15] Train Loss: 0.7977, Val Loss: 1.0801, Val Acc: 0.4554\n",
-            "[2/15] Train Loss: 0.7977, Val Loss: 0.9373, Val Acc: 0.4627\n",
-            "[3/15] Train Loss: 0.7977, Val Loss: 0.8877, Val Acc: 0.4572\n",
-            "[4/15] Train Loss: 0.7977, Val Loss: 0.8640, Val Acc: 0.4590\n",
-            "[5/15] Train Loss: 0.7977, Val Loss: 0.8510, Val Acc: 0.4572\n",
-            "[6/15] Train Loss: 0.7977, Val Loss: 0.8434, Val Acc: 0.4572\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:45,397] Trial 35 finished with value: 0.5705882352941176 and parameters: {'dim1': 64, 'dim2': 16, 'dim3': 32, 'k1': 5, 'k2': 7, 'k3': 7, 's1': 5, 's2': 3, 's3': 3, 'dropout': 0.26842441680215506, 'head_dropout': 0.24156224014025698, 'kernel_size': 5, 'decomposition': True, 'revin': False, 'affine': True}. Best is trial 7 with value: 0.6099476439790575.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[7/15] Train Loss: 0.7977, Val Loss: 0.8390, Val Acc: 0.4681\n",
-            "[8/15] Train Loss: 0.7977, Val Loss: 0.8365, Val Acc: 0.4699\n",
-            "[9/15] Train Loss: 0.7977, Val Loss: 0.8354, Val Acc: 0.4699\n",
-            "[10/15] Train Loss: 0.7977, Val Loss: 0.8352, Val Acc: 0.4699\n",
-            "[11/15] Train Loss: 0.7977, Val Loss: 0.8359, Val Acc: 0.4699\n",
-            "[12/15] Train Loss: 0.7977, Val Loss: 0.8371, Val Acc: 0.4718\n",
-            "[13/15] Train Loss: 0.7977, Val Loss: 0.8387, Val Acc: 0.4718\n",
-            "[14/15] Train Loss: 0.7977, Val Loss: 0.8408, Val Acc: 0.4699\n",
-            "[15/15] Train Loss: 0.7977, Val Loss: 0.8431, Val Acc: 0.4681\n",
-            "[1/15] Train Loss: 0.7839, Val Loss: 0.7741, Val Acc: 0.4444\n",
-            "[2/15] Train Loss: 0.7839, Val Loss: 0.7740, Val Acc: 0.4517\n",
-            "[3/15] Train Loss: 0.7839, Val Loss: 0.7739, Val Acc: 0.4608\n",
-            "[4/15] Train Loss: 0.7839, Val Loss: 0.7738, Val Acc: 0.4481\n",
-            "[5/15] Train Loss: 0.7839, Val Loss: 0.7738, Val Acc: 0.4536\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:45,649] Trial 36 finished with value: 0.4874274661508704 and parameters: {'dim1': 8, 'dim2': 128, 'dim3': 32, 'k1': 3, 'k2': 5, 'k3': 3, 's1': 3, 's2': 3, 's3': 3, 'dropout': 0.2999258695641505, 'head_dropout': 0.08842621105651396, 'kernel_size': 31, 'decomposition': False, 'revin': True, 'affine': True}. Best is trial 7 with value: 0.6099476439790575.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[6/15] Train Loss: 0.7839, Val Loss: 0.7738, Val Acc: 0.4681\n",
-            "[7/15] Train Loss: 0.7839, Val Loss: 0.7737, Val Acc: 0.4699\n",
-            "[8/15] Train Loss: 0.7839, Val Loss: 0.7737, Val Acc: 0.4809\n",
-            "[9/15] Train Loss: 0.7839, Val Loss: 0.7736, Val Acc: 0.4845\n",
-            "[10/15] Train Loss: 0.7839, Val Loss: 0.7736, Val Acc: 0.4882\n",
-            "[11/15] Train Loss: 0.7839, Val Loss: 0.7735, Val Acc: 0.5064\n",
-            "[12/15] Train Loss: 0.7839, Val Loss: 0.7734, Val Acc: 0.5027\n",
-            "[13/15] Train Loss: 0.7839, Val Loss: 0.7732, Val Acc: 0.5027\n",
-            "[14/15] Train Loss: 0.7839, Val Loss: 0.7732, Val Acc: 0.5191\n",
-            "[15/15] Train Loss: 0.7839, Val Loss: 0.7731, Val Acc: 0.5173\n",
-            "[1/15] Train Loss: 0.7945, Val Loss: 1.0617, Val Acc: 0.4590\n",
-            "[2/15] Train Loss: 0.7945, Val Loss: 0.9311, Val Acc: 0.4536\n",
-            "[3/15] Train Loss: 0.7945, Val Loss: 0.8848, Val Acc: 0.4481\n",
-            "[4/15] Train Loss: 0.7945, Val Loss: 0.8624, Val Acc: 0.4444\n",
-            "[5/15] Train Loss: 0.7945, Val Loss: 0.8500, Val Acc: 0.4408\n",
-            "[6/15] Train Loss: 0.7945, Val Loss: 0.8426, Val Acc: 0.4408\n",
-            "[7/15] Train Loss: 0.7945, Val Loss: 0.8382, Val Acc: 0.4444\n",
-            "[8/15] Train Loss: 0.7945, Val Loss: 0.8356, Val Acc: 0.4463\n",
-            "[9/15] Train Loss: 0.7945, Val Loss: 0.8343, Val Acc: 0.4572\n",
-            "[10/15] Train Loss: 0.7945, Val Loss: 0.8339, Val Acc: 0.4554\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:46,056] Trial 37 finished with value: 0.44972577696526506 and parameters: {'dim1': 16, 'dim2': 16, 'dim3': 256, 'k1': 9, 'k2': 7, 'k3': 7, 's1': 5, 's2': 3, 's3': 3, 'dropout': 0.13847363026122422, 'head_dropout': 0.1318539147167737, 'kernel_size': 11, 'decomposition': True, 'revin': False, 'affine': True}. Best is trial 7 with value: 0.6099476439790575.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[11/15] Train Loss: 0.7945, Val Loss: 0.8341, Val Acc: 0.4536\n",
-            "[12/15] Train Loss: 0.7945, Val Loss: 0.8348, Val Acc: 0.4499\n",
-            "[13/15] Train Loss: 0.7945, Val Loss: 0.8359, Val Acc: 0.4444\n",
-            "[14/15] Train Loss: 0.7945, Val Loss: 0.8372, Val Acc: 0.4444\n",
-            "[15/15] Train Loss: 0.7945, Val Loss: 0.8389, Val Acc: 0.4517\n",
-            "[1/15] Train Loss: 0.7849, Val Loss: 0.7763, Val Acc: 0.5228\n",
-            "[2/15] Train Loss: 0.7849, Val Loss: 0.7759, Val Acc: 0.5137\n",
-            "[3/15] Train Loss: 0.7849, Val Loss: 0.7757, Val Acc: 0.5191\n",
-            "[4/15] Train Loss: 0.7849, Val Loss: 0.7756, Val Acc: 0.5064\n",
-            "[5/15] Train Loss: 0.7849, Val Loss: 0.7756, Val Acc: 0.5082\n",
-            "[6/15] Train Loss: 0.7849, Val Loss: 0.7756, Val Acc: 0.5027\n",
-            "[7/15] Train Loss: 0.7849, Val Loss: 0.7757, Val Acc: 0.4954\n",
-            "[8/15] Train Loss: 0.7849, Val Loss: 0.7758, Val Acc: 0.5009\n",
-            "[9/15] Train Loss: 0.7849, Val Loss: 0.7759, Val Acc: 0.5064\n",
-            "[10/15] Train Loss: 0.7849, Val Loss: 0.7760, Val Acc: 0.5027\n",
-            "[11/15] Train Loss: 0.7849, Val Loss: 0.7761, Val Acc: 0.4973\n",
-            "[12/15] Train Loss: 0.7849, Val Loss: 0.7762, Val Acc: 0.4991\n",
-            "[13/15] Train Loss: 0.7849, Val Loss: 0.7763, Val Acc: 0.5027\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:46,400] Trial 38 finished with value: 0.49162011173184356 and parameters: {'dim1': 32, 'dim2': 128, 'dim3': 32, 'k1': 3, 'k2': 9, 'k3': 7, 's1': 5, 's2': 3, 's3': 3, 'dropout': 0.23521536602081144, 'head_dropout': 0.17105895111545744, 'kernel_size': 31, 'decomposition': False, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[14/15] Train Loss: 0.7849, Val Loss: 0.7765, Val Acc: 0.5046\n",
-            "[15/15] Train Loss: 0.7849, Val Loss: 0.7766, Val Acc: 0.5027\n",
-            "[1/15] Train Loss: 0.7959, Val Loss: 1.1342, Val Acc: 0.4481\n",
-            "[2/15] Train Loss: 0.7959, Val Loss: 0.9509, Val Acc: 0.4390\n",
-            "[3/15] Train Loss: 0.7959, Val Loss: 0.8897, Val Acc: 0.4426\n",
-            "[4/15] Train Loss: 0.7959, Val Loss: 0.8612, Val Acc: 0.4444\n",
-            "[5/15] Train Loss: 0.7959, Val Loss: 0.8459, Val Acc: 0.4426\n",
-            "[6/15] Train Loss: 0.7959, Val Loss: 0.8370, Val Acc: 0.4408\n",
-            "[7/15] Train Loss: 0.7959, Val Loss: 0.8317, Val Acc: 0.4408\n",
-            "[8/15] Train Loss: 0.7959, Val Loss: 0.8286, Val Acc: 0.4408\n",
-            "[9/15] Train Loss: 0.7959, Val Loss: 0.8271, Val Acc: 0.4372\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:46,682] Trial 39 finished with value: 0.575 and parameters: {'dim1': 64, 'dim2': 32, 'dim3': 128, 'k1': 7, 'k2': 5, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.256891950192059, 'head_dropout': 0.27891600987785126, 'kernel_size': 5, 'decomposition': True, 'revin': False, 'affine': True}. Best is trial 7 with value: 0.6099476439790575.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[10/15] Train Loss: 0.7959, Val Loss: 0.8266, Val Acc: 0.4353\n",
-            "[11/15] Train Loss: 0.7959, Val Loss: 0.8269, Val Acc: 0.4408\n",
-            "[12/15] Train Loss: 0.7959, Val Loss: 0.8278, Val Acc: 0.4408\n",
-            "[13/15] Train Loss: 0.7959, Val Loss: 0.8293, Val Acc: 0.4408\n",
-            "[14/15] Train Loss: 0.7959, Val Loss: 0.8312, Val Acc: 0.4426\n",
-            "[15/15] Train Loss: 0.7959, Val Loss: 0.8334, Val Acc: 0.4426\n",
-            "[1/15] Train Loss: 0.7889, Val Loss: 0.7736, Val Acc: 0.5282\n",
-            "[2/15] Train Loss: 0.7889, Val Loss: 0.7737, Val Acc: 0.5246\n",
-            "[3/15] Train Loss: 0.7889, Val Loss: 0.7737, Val Acc: 0.5264\n",
-            "[4/15] Train Loss: 0.7889, Val Loss: 0.7737, Val Acc: 0.5173\n",
-            "[5/15] Train Loss: 0.7889, Val Loss: 0.7737, Val Acc: 0.5191\n",
-            "[6/15] Train Loss: 0.7889, Val Loss: 0.7736, Val Acc: 0.5209\n",
-            "[7/15] Train Loss: 0.7889, Val Loss: 0.7736, Val Acc: 0.5082\n",
-            "[8/15] Train Loss: 0.7889, Val Loss: 0.7736, Val Acc: 0.5100\n",
-            "[9/15] Train Loss: 0.7889, Val Loss: 0.7735, Val Acc: 0.5100\n",
-            "[10/15] Train Loss: 0.7889, Val Loss: 0.7735, Val Acc: 0.5100\n",
-            "[11/15] Train Loss: 0.7889, Val Loss: 0.7734, Val Acc: 0.5137\n",
-            "[12/15] Train Loss: 0.7889, Val Loss: 0.7734, Val Acc: 0.5155\n",
-            "[13/15] Train Loss: 0.7889, Val Loss: 0.7734, Val Acc: 0.5209\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:47,046] Trial 40 finished with value: 0.42316258351893093 and parameters: {'dim1': 8, 'dim2': 16, 'dim3': 256, 'k1': 5, 'k2': 7, 'k3': 3, 's1': 3, 's2': 1, 's3': 1, 'dropout': 0.021639038553566026, 'head_dropout': 0.2338370876859288, 'kernel_size': 15, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[14/15] Train Loss: 0.7889, Val Loss: 0.7733, Val Acc: 0.5246\n",
-            "[15/15] Train Loss: 0.7889, Val Loss: 0.7733, Val Acc: 0.5282\n",
-            "[1/15] Train Loss: 0.7814, Val Loss: 0.8668, Val Acc: 0.5392\n",
-            "[2/15] Train Loss: 0.7814, Val Loss: 0.8197, Val Acc: 0.5373\n",
-            "[3/15] Train Loss: 0.7814, Val Loss: 0.8045, Val Acc: 0.5373\n",
-            "[4/15] Train Loss: 0.7814, Val Loss: 0.7974, Val Acc: 0.5392\n",
-            "[5/15] Train Loss: 0.7814, Val Loss: 0.7936, Val Acc: 0.5319\n",
-            "[6/15] Train Loss: 0.7814, Val Loss: 0.7915, Val Acc: 0.5355\n",
-            "[7/15] Train Loss: 0.7814, Val Loss: 0.7903, Val Acc: 0.5355\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:47,370] Trial 41 finished with value: 0.4439746300211416 and parameters: {'dim1': 64, 'dim2': 32, 'dim3': 128, 'k1': 7, 'k2': 5, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.25438661276961566, 'head_dropout': 0.274553572779235, 'kernel_size': 5, 'decomposition': True, 'revin': False, 'affine': True}. Best is trial 7 with value: 0.6099476439790575.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[8/15] Train Loss: 0.7814, Val Loss: 0.7897, Val Acc: 0.5337\n",
-            "[9/15] Train Loss: 0.7814, Val Loss: 0.7895, Val Acc: 0.5319\n",
-            "[10/15] Train Loss: 0.7814, Val Loss: 0.7897, Val Acc: 0.5319\n",
-            "[11/15] Train Loss: 0.7814, Val Loss: 0.7902, Val Acc: 0.5282\n",
-            "[12/15] Train Loss: 0.7814, Val Loss: 0.7909, Val Acc: 0.5337\n",
-            "[13/15] Train Loss: 0.7814, Val Loss: 0.7918, Val Acc: 0.5264\n",
-            "[14/15] Train Loss: 0.7814, Val Loss: 0.7930, Val Acc: 0.5264\n",
-            "[15/15] Train Loss: 0.7814, Val Loss: 0.7943, Val Acc: 0.5209\n",
-            "[1/15] Train Loss: 0.8010, Val Loss: 1.2054, Val Acc: 0.4426\n",
-            "[2/15] Train Loss: 0.8010, Val Loss: 1.0040, Val Acc: 0.4463\n",
-            "[3/15] Train Loss: 0.8010, Val Loss: 0.9333, Val Acc: 0.4444\n",
-            "[4/15] Train Loss: 0.8010, Val Loss: 0.8993, Val Acc: 0.4426\n",
-            "[5/15] Train Loss: 0.8010, Val Loss: 0.8805, Val Acc: 0.4444\n",
-            "[6/15] Train Loss: 0.8010, Val Loss: 0.8693, Val Acc: 0.4426\n",
-            "[7/15] Train Loss: 0.8010, Val Loss: 0.8626, Val Acc: 0.4408\n",
-            "[8/15] Train Loss: 0.8010, Val Loss: 0.8587, Val Acc: 0.4444\n",
-            "[9/15] Train Loss: 0.8010, Val Loss: 0.8568, Val Acc: 0.4481\n",
-            "[10/15] Train Loss: 0.8010, Val Loss: 0.8562, Val Acc: 0.4499\n",
-            "[11/15] Train Loss: 0.8010, Val Loss: 0.8566, Val Acc: 0.4463\n",
-            "[12/15] Train Loss: 0.8010, Val Loss: 0.8579, Val Acc: 0.4463\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:47,702] Trial 42 finished with value: 0.5863013698630137 and parameters: {'dim1': 64, 'dim2': 32, 'dim3': 128, 'k1': 7, 'k2': 5, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.2815590462500547, 'head_dropout': 0.2519157783971989, 'kernel_size': 5, 'decomposition': True, 'revin': False, 'affine': True}. Best is trial 7 with value: 0.6099476439790575.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[13/15] Train Loss: 0.8010, Val Loss: 0.8599, Val Acc: 0.4444\n",
-            "[14/15] Train Loss: 0.8010, Val Loss: 0.8625, Val Acc: 0.4463\n",
-            "[15/15] Train Loss: 0.8010, Val Loss: 0.8655, Val Acc: 0.4499\n",
-            "[1/15] Train Loss: 0.7762, Val Loss: 0.9466, Val Acc: 0.5574\n",
-            "[2/15] Train Loss: 0.7762, Val Loss: 0.8634, Val Acc: 0.5592\n",
-            "[3/15] Train Loss: 0.7762, Val Loss: 0.8352, Val Acc: 0.5610\n",
-            "[4/15] Train Loss: 0.7762, Val Loss: 0.8218, Val Acc: 0.5592\n",
-            "[5/15] Train Loss: 0.7762, Val Loss: 0.8143, Val Acc: 0.5556\n",
-            "[6/15] Train Loss: 0.7762, Val Loss: 0.8099, Val Acc: 0.5464\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:48,034] Trial 43 finished with value: 0.32891246684350134 and parameters: {'dim1': 64, 'dim2': 32, 'dim3': 128, 'k1': 7, 'k2': 5, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.27958438389274326, 'head_dropout': 0.2547783317527342, 'kernel_size': 5, 'decomposition': True, 'revin': False, 'affine': True}. Best is trial 7 with value: 0.6099476439790575.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[7/15] Train Loss: 0.7762, Val Loss: 0.8072, Val Acc: 0.5483\n",
-            "[8/15] Train Loss: 0.7762, Val Loss: 0.8055, Val Acc: 0.5483\n",
-            "[9/15] Train Loss: 0.7762, Val Loss: 0.8046, Val Acc: 0.5483\n",
-            "[10/15] Train Loss: 0.7762, Val Loss: 0.8042, Val Acc: 0.5519\n",
-            "[11/15] Train Loss: 0.7762, Val Loss: 0.8042, Val Acc: 0.5519\n",
-            "[12/15] Train Loss: 0.7762, Val Loss: 0.8046, Val Acc: 0.5483\n",
-            "[13/15] Train Loss: 0.7762, Val Loss: 0.8051, Val Acc: 0.5464\n",
-            "[14/15] Train Loss: 0.7762, Val Loss: 0.8060, Val Acc: 0.5428\n",
-            "[15/15] Train Loss: 0.7762, Val Loss: 0.8069, Val Acc: 0.5392\n",
-            "[1/15] Train Loss: 0.8022, Val Loss: 1.5679, Val Acc: 0.5483\n",
-            "[2/15] Train Loss: 0.8022, Val Loss: 1.2148, Val Acc: 0.5464\n",
-            "[3/15] Train Loss: 0.8022, Val Loss: 1.0844, Val Acc: 0.5446\n",
-            "[4/15] Train Loss: 0.8022, Val Loss: 1.0195, Val Acc: 0.5428\n",
-            "[5/15] Train Loss: 0.8022, Val Loss: 0.9826, Val Acc: 0.5446\n",
-            "[6/15] Train Loss: 0.8022, Val Loss: 0.9602, Val Acc: 0.5428\n",
-            "[7/15] Train Loss: 0.8022, Val Loss: 0.9463, Val Acc: 0.5410\n",
-            "[8/15] Train Loss: 0.8022, Val Loss: 0.9378, Val Acc: 0.5410\n",
-            "[9/15] Train Loss: 0.8022, Val Loss: 0.9329, Val Acc: 0.5392\n",
-            "[10/15] Train Loss: 0.8022, Val Loss: 0.9307, Val Acc: 0.5392\n",
-            "[11/15] Train Loss: 0.8022, Val Loss: 0.9303, Val Acc: 0.5392\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:48,366] Trial 44 finished with value: 0.05303030303030303 and parameters: {'dim1': 64, 'dim2': 32, 'dim3': 128, 'k1': 7, 'k2': 5, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.28706130371147476, 'head_dropout': 0.2996400506490291, 'kernel_size': 11, 'decomposition': True, 'revin': False, 'affine': True}. Best is trial 7 with value: 0.6099476439790575.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[12/15] Train Loss: 0.8022, Val Loss: 0.9316, Val Acc: 0.5428\n",
-            "[13/15] Train Loss: 0.8022, Val Loss: 0.9341, Val Acc: 0.5428\n",
-            "[14/15] Train Loss: 0.8022, Val Loss: 0.9375, Val Acc: 0.5428\n",
-            "[15/15] Train Loss: 0.8022, Val Loss: 0.9417, Val Acc: 0.5446\n",
-            "[1/15] Train Loss: 0.7859, Val Loss: 0.9747, Val Acc: 0.4681\n",
-            "[2/15] Train Loss: 0.7859, Val Loss: 0.8587, Val Acc: 0.4681\n",
-            "[3/15] Train Loss: 0.7859, Val Loss: 0.8247, Val Acc: 0.4699\n",
-            "[4/15] Train Loss: 0.7859, Val Loss: 0.8103, Val Acc: 0.4699\n",
-            "[5/15] Train Loss: 0.7859, Val Loss: 0.8030, Val Acc: 0.4754\n",
-            "[6/15] Train Loss: 0.7859, Val Loss: 0.7990, Val Acc: 0.4754\n",
-            "[7/15] Train Loss: 0.7859, Val Loss: 0.7969, Val Acc: 0.4791\n",
-            "[8/15] Train Loss: 0.7859, Val Loss: 0.7957, Val Acc: 0.4809\n",
-            "[9/15] Train Loss: 0.7859, Val Loss: 0.7951, Val Acc: 0.4809\n",
-            "[10/15] Train Loss: 0.7859, Val Loss: 0.7949, Val Acc: 0.4863\n",
-            "[11/15] Train Loss: 0.7859, Val Loss: 0.7951, Val Acc: 0.4900\n",
-            "[12/15] Train Loss: 0.7859, Val Loss: 0.7956, Val Acc: 0.4845\n",
-            "[13/15] Train Loss: 0.7859, Val Loss: 0.7962, Val Acc: 0.4754\n",
-            "[14/15] Train Loss: 0.7859, Val Loss: 0.7971, Val Acc: 0.4809\n",
-            "[15/15] Train Loss: 0.7859, Val Loss: 0.7981, Val Acc: 0.4827\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:48,727] Trial 45 finished with value: 0.5 and parameters: {'dim1': 64, 'dim2': 32, 'dim3': 128, 'k1': 9, 'k2': 9, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.26902528879003557, 'head_dropout': 0.200551722543649, 'kernel_size': 5, 'decomposition': False, 'revin': False, 'affine': True}. Best is trial 7 with value: 0.6099476439790575.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[1/15] Train Loss: 0.7913, Val Loss: 0.8491, Val Acc: 0.5100\n",
-            "[2/15] Train Loss: 0.7913, Val Loss: 0.8054, Val Acc: 0.5118\n",
-            "[3/15] Train Loss: 0.7913, Val Loss: 0.7927, Val Acc: 0.5064\n",
-            "[4/15] Train Loss: 0.7913, Val Loss: 0.7876, Val Acc: 0.5082\n",
-            "[5/15] Train Loss: 0.7913, Val Loss: 0.7853, Val Acc: 0.5137\n",
-            "[6/15] Train Loss: 0.7913, Val Loss: 0.7841, Val Acc: 0.5118\n",
-            "[7/15] Train Loss: 0.7913, Val Loss: 0.7835, Val Acc: 0.5173\n",
-            "[8/15] Train Loss: 0.7913, Val Loss: 0.7833, Val Acc: 0.5118\n",
-            "[9/15] Train Loss: 0.7913, Val Loss: 0.7834, Val Acc: 0.5118\n",
-            "[10/15] Train Loss: 0.7913, Val Loss: 0.7839, Val Acc: 0.5118\n",
-            "[11/15] Train Loss: 0.7913, Val Loss: 0.7846, Val Acc: 0.5082\n",
-            "[12/15] Train Loss: 0.7913, Val Loss: 0.7853, Val Acc: 0.5155\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:49,027] Trial 46 finished with value: 0.548885077186964 and parameters: {'dim1': 8, 'dim2': 128, 'dim3': 32, 'k1': 7, 'k2': 3, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.22533306494045258, 'head_dropout': 0.2471239945755956, 'kernel_size': 31, 'decomposition': True, 'revin': False, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[13/15] Train Loss: 0.7913, Val Loss: 0.7863, Val Acc: 0.5155\n",
-            "[14/15] Train Loss: 0.7913, Val Loss: 0.7874, Val Acc: 0.5209\n",
-            "[15/15] Train Loss: 0.7913, Val Loss: 0.7886, Val Acc: 0.5209\n",
-            "[1/15] Train Loss: 0.7858, Val Loss: 0.7737, Val Acc: 0.4900\n",
-            "[2/15] Train Loss: 0.7858, Val Loss: 0.7737, Val Acc: 0.4863\n",
-            "[3/15] Train Loss: 0.7858, Val Loss: 0.7737, Val Acc: 0.4845\n",
-            "[4/15] Train Loss: 0.7858, Val Loss: 0.7738, Val Acc: 0.4845\n",
-            "[5/15] Train Loss: 0.7858, Val Loss: 0.7739, Val Acc: 0.4772\n",
-            "[6/15] Train Loss: 0.7858, Val Loss: 0.7739, Val Acc: 0.4681\n",
-            "[7/15] Train Loss: 0.7858, Val Loss: 0.7738, Val Acc: 0.4754\n",
-            "[8/15] Train Loss: 0.7858, Val Loss: 0.7738, Val Acc: 0.4754\n",
-            "[9/15] Train Loss: 0.7858, Val Loss: 0.7738, Val Acc: 0.4791\n",
-            "[10/15] Train Loss: 0.7858, Val Loss: 0.7737, Val Acc: 0.4754\n",
-            "[11/15] Train Loss: 0.7858, Val Loss: 0.7737, Val Acc: 0.4754\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:49,848] Trial 47 finished with value: 0.5585023400936038 and parameters: {'dim1': 16, 'dim2': 64, 'dim3': 256, 'k1': 3, 'k2': 5, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.24786540869650164, 'head_dropout': 0.22854516895153715, 'kernel_size': 5, 'decomposition': True, 'revin': True, 'affine': True}. Best is trial 7 with value: 0.6099476439790575.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[12/15] Train Loss: 0.7858, Val Loss: 0.7736, Val Acc: 0.4809\n",
-            "[13/15] Train Loss: 0.7858, Val Loss: 0.7735, Val Acc: 0.4845\n",
-            "[14/15] Train Loss: 0.7858, Val Loss: 0.7735, Val Acc: 0.4791\n",
-            "[15/15] Train Loss: 0.7858, Val Loss: 0.7735, Val Acc: 0.4845\n",
-            "[1/15] Train Loss: 0.7960, Val Loss: 0.7757, Val Acc: 0.4499\n",
-            "[2/15] Train Loss: 0.7960, Val Loss: 0.7758, Val Acc: 0.4536\n",
-            "[3/15] Train Loss: 0.7960, Val Loss: 0.7759, Val Acc: 0.4554\n",
-            "[4/15] Train Loss: 0.7960, Val Loss: 0.7761, Val Acc: 0.4536\n",
-            "[5/15] Train Loss: 0.7960, Val Loss: 0.7762, Val Acc: 0.4517\n",
-            "[6/15] Train Loss: 0.7960, Val Loss: 0.7763, Val Acc: 0.4499\n",
-            "[7/15] Train Loss: 0.7960, Val Loss: 0.7764, Val Acc: 0.4499\n",
-            "[8/15] Train Loss: 0.7960, Val Loss: 0.7764, Val Acc: 0.4517\n",
-            "[9/15] Train Loss: 0.7960, Val Loss: 0.7765, Val Acc: 0.4572\n",
-            "[10/15] Train Loss: 0.7960, Val Loss: 0.7767, Val Acc: 0.4608\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:50,255] Trial 48 finished with value: 0.5625 and parameters: {'dim1': 64, 'dim2': 16, 'dim3': 64, 'k1': 7, 'k2': 9, 'k3': 7, 's1': 3, 's2': 3, 's3': 3, 'dropout': 0.2087542335606744, 'head_dropout': 0.12073612337038966, 'kernel_size': 15, 'decomposition': True, 'revin': True, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[11/15] Train Loss: 0.7960, Val Loss: 0.7768, Val Acc: 0.4554\n",
-            "[12/15] Train Loss: 0.7960, Val Loss: 0.7770, Val Acc: 0.4572\n",
-            "[13/15] Train Loss: 0.7960, Val Loss: 0.7772, Val Acc: 0.4517\n",
-            "[14/15] Train Loss: 0.7960, Val Loss: 0.7774, Val Acc: 0.4590\n",
-            "[15/15] Train Loss: 0.7960, Val Loss: 0.7777, Val Acc: 0.4645\n",
-            "[1/15] Train Loss: 0.7928, Val Loss: 0.8299, Val Acc: 0.4718\n",
-            "[2/15] Train Loss: 0.7928, Val Loss: 0.8068, Val Acc: 0.4663\n",
-            "[3/15] Train Loss: 0.7928, Val Loss: 0.7999, Val Acc: 0.4572\n",
-            "[4/15] Train Loss: 0.7928, Val Loss: 0.7967, Val Acc: 0.4517\n",
-            "[5/15] Train Loss: 0.7928, Val Loss: 0.7951, Val Acc: 0.4517\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stderr",
-          "text": [
-            "[I 2025-05-05 09:48:50,469] Trial 49 finished with value: 0.4925619834710744 and parameters: {'dim1': 32, 'dim2': 16, 'dim3': 32, 'k1': 9, 'k2': 7, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.188281187380417, 'head_dropout': 0.21855434672217192, 'kernel_size': 31, 'decomposition': False, 'revin': False, 'affine': False}. Best is trial 7 with value: 0.6099476439790575.\n"
-          ]
-        },
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[6/15] Train Loss: 0.7928, Val Loss: 0.7945, Val Acc: 0.4499\n",
-            "[7/15] Train Loss: 0.7928, Val Loss: 0.7943, Val Acc: 0.4444\n",
-            "[8/15] Train Loss: 0.7928, Val Loss: 0.7945, Val Acc: 0.4426\n",
-            "[9/15] Train Loss: 0.7928, Val Loss: 0.7951, Val Acc: 0.4408\n",
-            "[10/15] Train Loss: 0.7928, Val Loss: 0.7957, Val Acc: 0.4444\n",
-            "[11/15] Train Loss: 0.7928, Val Loss: 0.7966, Val Acc: 0.4426\n",
-            "[12/15] Train Loss: 0.7928, Val Loss: 0.7976, Val Acc: 0.4426\n",
-            "[13/15] Train Loss: 0.7928, Val Loss: 0.7988, Val Acc: 0.4408\n",
-            "[14/15] Train Loss: 0.7928, Val Loss: 0.8002, Val Acc: 0.4335\n",
-            "[15/15] Train Loss: 0.7928, Val Loss: 0.8017, Val Acc: 0.4408\n",
-            "✅ Best Trial:\n",
-            "{'dim1': 8, 'dim2': 16, 'dim3': 32, 'k1': 7, 'k2': 5, 'k3': 7, 's1': 5, 's2': 1, 's3': 1, 'dropout': 0.23580595312520866, 'head_dropout': 0.2414528024642886, 'kernel_size': 31, 'decomposition': True, 'revin': True, 'affine': False}\n"
-          ]
-        }
-      ]
-    },
-    {
-      "cell_type": "markdown",
-      "source": [
-        "###시각화 코드"
-      ],
-      "metadata": {
-        "id": "Rg-yp_utuBji"
-      }
-    },
-    {
-      "cell_type": "code",
-      "source": [
-        "def visualize_training(train_losses, val_losses, val_accs):\n",
-        "    plt.figure(figsize=(12,4))\n",
-        "    plt.subplot(1,2,1)\n",
-        "    plt.plot(train_losses, label='Train Loss')\n",
-        "    plt.plot(val_losses, label='Val Loss')\n",
-        "    plt.legend(); plt.title(\"Loss over Epochs\")\n",
-        "\n",
-        "    plt.subplot(1,2,2)\n",
-        "    plt.plot(val_accs, label='Val Accuracy')\n",
-        "    plt.legend(); plt.title(\"Validation Accuracy\")\n",
-        "    plt.show()\n",
-        "\n",
-        "def visualize_prediction(pred_probs, true_labels):\n",
-        "    plt.figure(figsize=(10,4))\n",
-        "    plt.plot(true_labels, label='True')\n",
-        "    plt.plot(pred_probs, label='Pred (sigmoid)', alpha=0.7)\n",
-        "    plt.legend(); plt.title(\"Prediction vs True\")\n",
-        "    plt.show()\n",
-        "\n",
-        "def visualize_cumulative_return(pred_probs, true_labels, prices):\n",
-        "    signal = (pred_probs > 0.5).astype(int)\n",
-        "    returns = (prices[1:] / prices[:-1]) - 1\n",
-        "    strategy_returns = returns * signal[:-1]  # 예측한 시점의 다음날 수익\n",
-        "\n",
-        "    cumulative = (strategy_returns + 1).cumprod()\n",
-        "    market = (returns + 1).cumprod()\n",
-        "\n",
-        "    plt.plot(cumulative, label='Strategy')\n",
-        "    plt.plot(market, label='Market (buy & hold)')\n",
-        "    plt.legend(); plt.title(\"Cumulative Return\")\n",
-        "    plt.show()\n"
-      ],
-      "metadata": {
-        "id": "NRsQNf3tuBNM"
-      },
-      "execution_count": 77,
-      "outputs": []
-    },
-    {
-      "cell_type": "code",
-      "source": [
-        "import numpy as np\n",
-        "import random\n",
-        "def set_seed(seed=42):\n",
-        "    random.seed(seed)\n",
-        "    np.random.seed(seed)\n",
-        "    torch.manual_seed(seed)\n",
-        "    torch.cuda.manual_seed_all(seed)\n",
-        "    torch.backends.cudnn.deterministic = True\n",
-        "    torch.backends.cudnn.benchmark = False\n",
-        "    torch.use_deterministic_algorithms(True)\n",
-        "set_seed(42)\n",
-        "\n",
-        "# 1. 라벨 생성\n",
-        "close_prices = data[f'prccd_{company_name}'].values\n",
-        "returns = (close_prices[1:] / close_prices[:-1]) - 1\n",
-        "labels = np.where(returns > 0.003, 1, 0)  # 0.3% 초과만 1로\n",
-        "labels = torch.tensor(labels, dtype=torch.float32)\n",
-        "\n",
-        "# 2. GAT 임베딩 → TCN 입력 형태로 변환\n",
-        "embeddings = embeddings[:-1]  # 라벨과 길이 맞춤\n",
-        "tcn_input = embeddings.unsqueeze(0)  # [1, T, C]\n",
-        "\n",
-        "# ✅ 3. 길이 맞춰주기 (가장 중요)\n",
-        "min_len = min(tcn_input.shape[1], labels.shape[0])\n",
-        "tcn_input = tcn_input[:, :min_len, :]\n",
-        "labels = labels[:min_len]\n",
-        "\n",
-        "# 3. 학습/검증 데이터 분할\n",
-        "seq_len = tcn_input.shape[1]\n",
-        "split = int(seq_len * 0.8)\n",
-        "X_train = tcn_input[:, :split, :]\n",
-        "X_val   = tcn_input[:, split:, :]\n",
-        "y_train = labels[:split]\n",
-        "y_val   = labels[split:]\n",
-        "\n",
-        "class BestConfig:\n",
-        "    def __init__(self):\n",
-        "        self.enc_in = X_train.shape[2]\n",
-        "        self.dims = [best_params['dim1'], best_params['dim2'], best_params['dim3']]\n",
-        "        self.large_size = [best_params['k1'], best_params['k2'], best_params['k3']]\n",
-        "        self.small_size = [best_params['s1'], best_params['s2'], best_params['s3']]\n",
-        "        self.small_kernel_merged = False\n",
-        "        self.dropout = best_params['dropout']\n",
-        "        self.head_dropout = best_params['head_dropout']\n",
-        "        self.revin = best_params['revin']\n",
-        "        self.affine = best_params['affine']\n",
-        "        self.decomposition = best_params['decomposition']\n",
-        "        self.kernel_size = best_params['kernel_size']\n",
-        "\n",
-        "# 4. 모델 생성 및 학습\n",
-        "model = ModernTCN(BestConfig())\n",
-        "\n",
-        "train_losses, val_losses, val_accs = train_model(model,\n",
-        "X_train, y_train, X_val, y_val, epochs=100,lr=1e-2)\n",
-        "\n",
-        "# 5. 예측 및 시각화\n",
-        "model.eval()\n",
-        "with torch.no_grad():\n",
-        "    pred_logits = model(X_val).squeeze(0)  # [1, T] → [T]\n",
-        "    pred_probs = torch.sigmoid(pred_logits).cpu().numpy()\n",
-        "    pred_labels = (pred_probs > 0.5).astype(int)\n",
-        "\n",
-        "\n",
-        "from sklearn.metrics import precision_recall_curve, f1_score\n",
-        "\n",
-        "\"\"\"\n",
-        "# 1. 실제 라벨\n",
-        "true_labels = y_val.cpu().numpy()\n",
-        "\n",
-        "# 2. 다양한 threshold에 대해 f1-score 측정\n",
-        "precisions, recalls, thresholds = precision_recall_curve(true_labels, pred_probs)\n",
-        "\n",
-        "f1s = 2 * (precisions * recalls) / (precisions + recalls + 1e-8)  # f1-score 계산\n",
-        "best_idx = np.argmax(f1s)\n",
-        "best_threshold = thresholds[best_idx]\n",
-        "\n",
-        "print(f\"✅ Best threshold by F1-score: {best_threshold:.4f}, F1: {f1s[best_idx]:.4f}\")\n",
-        "\n",
-        "# 3. 최적 threshold로 예측 라벨 생성\n",
-        "pred_labels = (pred_probs > best_threshold).astype(int)\n",
-        "# 6. 누적 수익률 (선택)\n",
-        "# future_prices = close_prices[split+1:]  # 실제 수익률 계산용\n",
-        "# visualize_cumulative_return(pred_probs, y_val.cpu().numpy(), future_prices)\n",
-        "\"\"\"\n",
-        "\n",
-        "visualize_training(train_losses, val_losses, val_accs)\n",
-        "visualize_prediction(pred_probs, y_val.cpu().numpy())\n"
-      ],
-      "metadata": {
-        "colab": {
-          "base_uri": "https://localhost:8080/",
-          "height": 1000
-        },
-        "id": "UCzrQgDimtsc",
-        "outputId": "c1bbea0f-9c47-419e-c12f-f2779cb67478"
-      },
-      "execution_count": 151,
-      "outputs": [
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "[1/100] Train Loss: 0.6948, Val Loss: 0.6915, Val Acc: 0.5523\n",
-            "[2/100] Train Loss: 0.6948, Val Loss: 0.6916, Val Acc: 0.5505\n",
-            "[3/100] Train Loss: 0.6948, Val Loss: 0.6918, Val Acc: 0.5468\n",
-            "[4/100] Train Loss: 0.6948, Val Loss: 0.6920, Val Acc: 0.5468\n",
-            "[5/100] Train Loss: 0.6948, Val Loss: 0.6923, Val Acc: 0.5431\n",
-            "[6/100] Train Loss: 0.6948, Val Loss: 0.6926, Val Acc: 0.5431\n",
-            "[7/100] Train Loss: 0.6948, Val Loss: 0.6929, Val Acc: 0.5450\n",
-            "[8/100] Train Loss: 0.6948, Val Loss: 0.6932, Val Acc: 0.5468\n",
-            "[9/100] Train Loss: 0.6948, Val Loss: 0.6936, Val Acc: 0.5486\n",
-            "[10/100] Train Loss: 0.6948, Val Loss: 0.6940, Val Acc: 0.5468\n",
-            "[11/100] Train Loss: 0.6948, Val Loss: 0.6945, Val Acc: 0.5394\n",
-            "[12/100] Train Loss: 0.6948, Val Loss: 0.6950, Val Acc: 0.5321\n",
-            "[13/100] Train Loss: 0.6948, Val Loss: 0.6956, Val Acc: 0.5284\n",
-            "[14/100] Train Loss: 0.6948, Val Loss: 0.6963, Val Acc: 0.5211\n",
-            "[15/100] Train Loss: 0.6948, Val Loss: 0.6971, Val Acc: 0.5193\n",
-            "[16/100] Train Loss: 0.6948, Val Loss: 0.6980, Val Acc: 0.5138\n",
-            "[17/100] Train Loss: 0.6948, Val Loss: 0.6990, Val Acc: 0.5083\n",
-            "[18/100] Train Loss: 0.6948, Val Loss: 0.7001, Val Acc: 0.5119\n",
-            "[19/100] Train Loss: 0.6948, Val Loss: 0.7013, Val Acc: 0.5119\n",
-            "[20/100] Train Loss: 0.6948, Val Loss: 0.7027, Val Acc: 0.5138\n",
-            "[21/100] Train Loss: 0.6948, Val Loss: 0.7041, Val Acc: 0.5156\n",
-            "[22/100] Train Loss: 0.6948, Val Loss: 0.7057, Val Acc: 0.5174\n",
-            "[23/100] Train Loss: 0.6948, Val Loss: 0.7074, Val Acc: 0.5211\n",
-            "[24/100] Train Loss: 0.6948, Val Loss: 0.7091, Val Acc: 0.5211\n",
-            "[25/100] Train Loss: 0.6948, Val Loss: 0.7109, Val Acc: 0.5174\n",
-            "[26/100] Train Loss: 0.6948, Val Loss: 0.7127, Val Acc: 0.5174\n",
-            "[27/100] Train Loss: 0.6948, Val Loss: 0.7147, Val Acc: 0.5211\n",
-            "[28/100] Train Loss: 0.6948, Val Loss: 0.7167, Val Acc: 0.5248\n",
-            "[29/100] Train Loss: 0.6948, Val Loss: 0.7186, Val Acc: 0.5211\n",
-            "[30/100] Train Loss: 0.6948, Val Loss: 0.7206, Val Acc: 0.5193\n",
-            "[31/100] Train Loss: 0.6948, Val Loss: 0.7226, Val Acc: 0.5248\n",
-            "[32/100] Train Loss: 0.6948, Val Loss: 0.7245, Val Acc: 0.5248\n",
-            "[33/100] Train Loss: 0.6948, Val Loss: 0.7263, Val Acc: 0.5284\n",
-            "[34/100] Train Loss: 0.6948, Val Loss: 0.7281, Val Acc: 0.5303\n",
-            "[35/100] Train Loss: 0.6948, Val Loss: 0.7299, Val Acc: 0.5303\n",
-            "[36/100] Train Loss: 0.6948, Val Loss: 0.7316, Val Acc: 0.5303\n",
-            "[37/100] Train Loss: 0.6948, Val Loss: 0.7333, Val Acc: 0.5321\n",
-            "[38/100] Train Loss: 0.6948, Val Loss: 0.7348, Val Acc: 0.5358\n",
-            "[39/100] Train Loss: 0.6948, Val Loss: 0.7363, Val Acc: 0.5358\n",
-            "[40/100] Train Loss: 0.6948, Val Loss: 0.7377, Val Acc: 0.5339\n",
-            "[41/100] Train Loss: 0.6948, Val Loss: 0.7390, Val Acc: 0.5339\n",
-            "[42/100] Train Loss: 0.6948, Val Loss: 0.7403, Val Acc: 0.5321\n",
-            "[43/100] Train Loss: 0.6948, Val Loss: 0.7414, Val Acc: 0.5321\n",
-            "[44/100] Train Loss: 0.6948, Val Loss: 0.7425, Val Acc: 0.5321\n",
-            "[45/100] Train Loss: 0.6948, Val Loss: 0.7435, Val Acc: 0.5321\n",
-            "[46/100] Train Loss: 0.6948, Val Loss: 0.7444, Val Acc: 0.5321\n",
-            "[47/100] Train Loss: 0.6948, Val Loss: 0.7452, Val Acc: 0.5321\n",
-            "[48/100] Train Loss: 0.6948, Val Loss: 0.7460, Val Acc: 0.5321\n",
-            "[49/100] Train Loss: 0.6948, Val Loss: 0.7467, Val Acc: 0.5321\n",
-            "[50/100] Train Loss: 0.6948, Val Loss: 0.7474, Val Acc: 0.5321\n",
-            "[51/100] Train Loss: 0.6948, Val Loss: 0.7480, Val Acc: 0.5321\n",
-            "[52/100] Train Loss: 0.6948, Val Loss: 0.7485, Val Acc: 0.5321\n",
-            "[53/100] Train Loss: 0.6948, Val Loss: 0.7490, Val Acc: 0.5321\n",
-            "[54/100] Train Loss: 0.6948, Val Loss: 0.7495, Val Acc: 0.5321\n",
-            "[55/100] Train Loss: 0.6948, Val Loss: 0.7499, Val Acc: 0.5321\n",
-            "[56/100] Train Loss: 0.6948, Val Loss: 0.7503, Val Acc: 0.5321\n",
-            "[57/100] Train Loss: 0.6948, Val Loss: 0.7506, Val Acc: 0.5321\n",
-            "[58/100] Train Loss: 0.6948, Val Loss: 0.7509, Val Acc: 0.5321\n",
-            "[59/100] Train Loss: 0.6948, Val Loss: 0.7512, Val Acc: 0.5321\n",
-            "[60/100] Train Loss: 0.6948, Val Loss: 0.7515, Val Acc: 0.5321\n",
-            "[61/100] Train Loss: 0.6948, Val Loss: 0.7517, Val Acc: 0.5321\n",
-            "[62/100] Train Loss: 0.6948, Val Loss: 0.7519, Val Acc: 0.5321\n",
-            "[63/100] Train Loss: 0.6948, Val Loss: 0.7521, Val Acc: 0.5321\n",
-            "[64/100] Train Loss: 0.6948, Val Loss: 0.7523, Val Acc: 0.5321\n",
-            "[65/100] Train Loss: 0.6948, Val Loss: 0.7525, Val Acc: 0.5321\n",
-            "[66/100] Train Loss: 0.6948, Val Loss: 0.7526, Val Acc: 0.5321\n",
-            "[67/100] Train Loss: 0.6948, Val Loss: 0.7527, Val Acc: 0.5321\n",
-            "[68/100] Train Loss: 0.6948, Val Loss: 0.7528, Val Acc: 0.5321\n",
-            "[69/100] Train Loss: 0.6948, Val Loss: 0.7529, Val Acc: 0.5321\n",
-            "[70/100] Train Loss: 0.6948, Val Loss: 0.7530, Val Acc: 0.5321\n",
-            "[71/100] Train Loss: 0.6948, Val Loss: 0.7531, Val Acc: 0.5321\n",
-            "[72/100] Train Loss: 0.6948, Val Loss: 0.7532, Val Acc: 0.5321\n",
-            "[73/100] Train Loss: 0.6948, Val Loss: 0.7533, Val Acc: 0.5321\n",
-            "[74/100] Train Loss: 0.6948, Val Loss: 0.7533, Val Acc: 0.5321\n",
-            "[75/100] Train Loss: 0.6948, Val Loss: 0.7534, Val Acc: 0.5321\n",
-            "[76/100] Train Loss: 0.6948, Val Loss: 0.7534, Val Acc: 0.5321\n",
-            "[77/100] Train Loss: 0.6948, Val Loss: 0.7535, Val Acc: 0.5321\n",
-            "[78/100] Train Loss: 0.6948, Val Loss: 0.7535, Val Acc: 0.5321\n",
-            "[79/100] Train Loss: 0.6948, Val Loss: 0.7535, Val Acc: 0.5321\n",
-            "[80/100] Train Loss: 0.6948, Val Loss: 0.7536, Val Acc: 0.5321\n",
-            "[81/100] Train Loss: 0.6948, Val Loss: 0.7536, Val Acc: 0.5321\n",
-            "[82/100] Train Loss: 0.6948, Val Loss: 0.7536, Val Acc: 0.5321\n",
-            "[83/100] Train Loss: 0.6948, Val Loss: 0.7537, Val Acc: 0.5321\n",
-            "[84/100] Train Loss: 0.6948, Val Loss: 0.7537, Val Acc: 0.5321\n",
-            "[85/100] Train Loss: 0.6948, Val Loss: 0.7537, Val Acc: 0.5321\n",
-            "[86/100] Train Loss: 0.6948, Val Loss: 0.7537, Val Acc: 0.5321\n",
-            "[87/100] Train Loss: 0.6948, Val Loss: 0.7537, Val Acc: 0.5321\n",
-            "[88/100] Train Loss: 0.6948, Val Loss: 0.7537, Val Acc: 0.5321\n",
-            "[89/100] Train Loss: 0.6948, Val Loss: 0.7538, Val Acc: 0.5321\n",
-            "[90/100] Train Loss: 0.6948, Val Loss: 0.7538, Val Acc: 0.5321\n",
-            "[91/100] Train Loss: 0.6948, Val Loss: 0.7538, Val Acc: 0.5321\n",
-            "[92/100] Train Loss: 0.6948, Val Loss: 0.7538, Val Acc: 0.5321\n",
-            "[93/100] Train Loss: 0.6948, Val Loss: 0.7538, Val Acc: 0.5321\n",
-            "[94/100] Train Loss: 0.6948, Val Loss: 0.7538, Val Acc: 0.5321\n",
-            "[95/100] Train Loss: 0.6948, Val Loss: 0.7538, Val Acc: 0.5321\n",
-            "[96/100] Train Loss: 0.6948, Val Loss: 0.7538, Val Acc: 0.5321\n",
-            "[97/100] Train Loss: 0.6948, Val Loss: 0.7538, Val Acc: 0.5321\n",
-            "[98/100] Train Loss: 0.6948, Val Loss: 0.7538, Val Acc: 0.5321\n",
-            "[99/100] Train Loss: 0.6948, Val Loss: 0.7538, Val Acc: 0.5321\n",
-            "[100/100] Train Loss: 0.6948, Val Loss: 0.7538, Val Acc: 0.5321\n"
-          ]
-        },
-        {
-          "output_type": "display_data",
-          "data": {
-            "text/plain": [
-              "<Figure size 1200x400 with 2 Axes>"
-            ],
-            "image/png": "\n"
-          },
-          "metadata": {}
-        },
-        {
-          "output_type": "display_data",
-          "data": {
-            "text/plain": [
-              "<Figure size 1000x400 with 1 Axes>"
-            ],
-            "image/png": "\n"
-          },
-          "metadata": {}
-        }
-      ]
-    },
-    {
-      "cell_type": "code",
-      "source": [
-        "#정확도 기반\n",
-        "from sklearn.metrics import classification_report, confusion_matrix\n",
-        "print(classification_report(y_val.cpu(), pred_labels))\n",
-        "print(confusion_matrix(y_val.cpu(), pred_labels))\n"
-      ],
-      "metadata": {
-        "colab": {
-          "base_uri": "https://localhost:8080/"
-        },
-        "id": "dFx060ibp0FO",
-        "outputId": "0ca39b7e-6e35-416c-8c5f-c3bfaee96307"
-      },
-      "execution_count": 82,
-      "outputs": [
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "              precision    recall  f1-score   support\n",
-            "\n",
-            "         0.0       0.59      0.41      0.48       306\n",
-            "         1.0       0.46      0.65      0.54       243\n",
-            "\n",
-            "    accuracy                           0.51       549\n",
-            "   macro avg       0.53      0.53      0.51       549\n",
-            "weighted avg       0.54      0.51      0.51       549\n",
-            "\n",
-            "[[125 181]\n",
-            " [ 86 157]]\n"
-          ]
-        }
-      ]
-    },
-    {
-      "cell_type": "code",
-      "source": [
-        "#f1 score 기반\n",
-        "from sklearn.metrics import classification_report, confusion_matrix\n",
-        "print(classification_report(y_val.cpu(), pred_labels))\n",
-        "print(confusion_matrix(y_val.cpu(), pred_labels))\n"
-      ],
-      "metadata": {
-        "colab": {
-          "base_uri": "https://localhost:8080/"
-        },
-        "id": "9gLZn6L2wV4s",
-        "outputId": "9b454dfc-6de4-4c27-807d-bbc3b7715c56"
-      },
-      "execution_count": 152,
-      "outputs": [
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "              precision    recall  f1-score   support\n",
-            "\n",
-            "         0.0       0.55      0.81      0.66       301\n",
-            "         1.0       0.45      0.19      0.27       244\n",
-            "\n",
-            "    accuracy                           0.53       545\n",
-            "   macro avg       0.50      0.50      0.46       545\n",
-            "weighted avg       0.51      0.53      0.48       545\n",
-            "\n",
-            "[[243  58]\n",
-            " [197  47]]\n"
-          ]
-        }
-      ]
-    },
-    {
-      "cell_type": "code",
-      "source": [
-        "unique, counts = np.unique(labels.numpy(), return_counts=True)\n",
-        "print(dict(zip(unique, counts)))\n"
-      ],
-      "metadata": {
-        "colab": {
-          "base_uri": "https://localhost:8080/"
-        },
-        "id": "V74w7Uqz3k2i",
-        "outputId": "ac3053d3-fc94-4d0f-e9c2-6561d6e2019e"
-      },
-      "execution_count": 142,
-      "outputs": [
-        {
-          "output_type": "stream",
-          "name": "stdout",
-          "text": [
-            "{np.float32(0.0): np.int64(1520), np.float32(1.0): np.int64(1207)}\n"
-          ]
-        }
-      ]
-    }
-  ]
-}
\ No newline at end of file
+#%% md
+# 실행 준비
+#%%
+#from google.colab import drive
+#drive.mount('/content/drive')
+#%%
+import pandas as pd
+#%%
+file_path = '/content/daily_all.csv'
+df = pd.read_csv(file_path, engine='pyarrow')
+#%%
+df = pd.read_csv("daily_all.csv")
+#%%
+df
+#%% md
+# 데이터셋 로드
+#%% md
+- 피처 선택
+#%%
+company_name = "AMZN"  # 예측할 회사 선택
+
+# 데이터 선택: 종가는 모든 회사에 대해, 거래량과 감정분석은 예측할 회사만
+data = df[[f'prccd_{company}' for company in ['TSLA', 'NVDA', 'MSFT', 'GOOG', 'AAPL', 'DIS', 'XOM', 'CRM', 'INTC', 'AMZN']] +
+          [f'cshtrd_{company_name}', f'sent_{company_name}', 'datadate']].copy()
+data.set_index('datadate', inplace=True)
+
+# 예측 회사의 상승/하락 결과 (1: 상승, 0: 하락) : GAT에서 사용 X
+# data.loc[:, 'y'] = (df[f'prccd_{company_name}'] > df[f'prccd_{company_name}'].shift(1)).astype(int)
+# data = data[1:] # 첫 번째 행은 상승/하락 정보를 알 수 없으므로 제거
+
+# 감정분석 결측값을 0으로 채움
+data.fillna(0, inplace=True)  # 기존 sent에는 NaN이 너무 많음; 임베딩도 NaN으로 출력됨
+
+# 결과 출력
+data
+#%%
+data.isna().sum()
+#%% md
+# GAT
+#%% md
+- 노드 : 각 시점
+- 피처 : 10개 주식 종가 + 예측 기업 감정분석
+- GAT의 역할 : 피처들의 관계(회사 간의 관계 등)을 파악해 **시점별** 임베딩 생성;  다른 시점과의 연관성을 반영    
+(ex. 1~10일 전과 연결이 되어있는 상태에서, 1일 전 정보는 얼마나 중요하고 10일 전 정보는 얼마나 중요한지 판단)
+#%%
+# PyTorch Geometric 설치
+!pip install torch-geometric
+!pip install pyg-lib torch-scatter torch-sparse torch-cluster torch-spline-conv -f https://data.pyg.org/whl/torch-2.3.0+cpu.html
+#%%
+# import 문
+import torch
+import torch.nn as nn
+from torch_geometric.nn import GATv2Conv
+#%%
+# GAT 레이어 정의
+class GATLayer(nn.Module):
+    def __init__(self, in_features, out_features, heads=4):
+        super().__init__()
+        self.gat = GATv2Conv(in_features, out_features, heads=heads, concat=False) # 선형 변환 : concat이 True이면 결합, False이면 평균
+                                                                                   # GATv2Conv 내부에서 어텐션 계산이 수행됨
+
+    def forward(self, x, edge_index):
+        return self.gat(x, edge_index)
+#%%
+# 데이터 준비
+node_features = data.values  # shape: [날짜 수, feature 수]
+n_nodes = node_features.shape[0] # 노드 수 (==날짜 수)
+
+# 그래프 형태로 변환 : 엣지 생성 (시점 간 연결)
+edge_list = []
+for i in range(n_nodes):
+    for j in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]: # 이후 시점들에 단방향 연결; (휴장 같은 것은 생각하지 않음.... 시점 기준)
+        if i + j < n_nodes:
+            edge_list.append([i, i + j])
+edge_index = torch.tensor(edge_list).t()
+#%%
+edge_index # 출력 결과의 첫째행이 출발노드, 둘째행이 도착노드!
+#%%
+# GAT 입력 형태로 변환
+x = torch.tensor(node_features, dtype=torch.float)
+#%%
+# GAT 모델 생성 및 실행
+gat_model = GATLayer(in_features=data.shape[1], out_features=8) # 결과: 각 시점(노드)에 대한 (output_features)차원 임베딩
+embeddings = gat_model(x, edge_index)  # shape: [날짜 수, 설정한 out_features 수]
+#%%
+embeddings
+#%% md
+# csv로 저장
+#%%
+embeddings_np = embeddings.detach().cpu().numpy()
+
+# DataFrame으로 변환
+df_embeddings = pd.DataFrame(embeddings_np)
+
+# data의 인덱스(datadate)를 가져와서 추가 (data는 이미 set_index로 datadate를 인덱스로 설정했음)
+df_embeddings['datadate'] = data.index.values
+
+# 컬럼 이름 설정
+column_names = [f'emb_{i}' for i in range(embeddings_np.shape[1])]
+df_embeddings.columns = column_names + ['datadate']
+
+# datadate를 첫 번째 컬럼으로 이동
+df_embeddings = df_embeddings[['datadate'] + column_names]
+
+# 결과 확인
+print("Embeddings with datadate:")
+print(df_embeddings.head())
+#%%
+# CSV로 저장
+df_embeddings.to_csv(f'embeddings_{company_name}.csv', index=False)
+#%%
+!pip install optuna
+#%% md
+###TCN 시작
+#%%
+import torch
+import torch.nn as nn
+import torch.nn.functional as F
+import matplotlib.pyplot as plt
+import optuna
+# --- 유틸 함수 ---
+def get_conv1d(in_channels, out_channels, kernel_size, stride, padding, dilation, groups, bias):
+    return nn.Conv1d(in_channels=in_channels, out_channels=out_channels,
+                     kernel_size=kernel_size, stride=stride,
+                     padding=padding, dilation=dilation,
+                     groups=groups, bias=bias)
+
+def get_bn(channels):
+    return nn.BatchNorm1d(channels)
+
+def conv_bn(in_channels, out_channels, kernel_size, stride, padding, groups, dilation=1, bias=False):
+    if padding is None:
+        padding = kernel_size // 2
+    result = nn.Sequential()
+    result.add_module('conv', get_conv1d(in_channels, out_channels, kernel_size, stride, padding, dilation, groups, bias))
+    result.add_module('bn', get_bn(out_channels))
+    return result
+
+# --- RevIN ---
+class RevIN(nn.Module):
+    def __init__(self, num_features: int, eps=1e-5, affine=True, subtract_last=False):
+        super().__init__()
+        self.num_features = num_features
+        self.eps = eps
+        self.affine = affine
+        self.subtract_last = subtract_last
+        if self.affine:
+            self._init_params()
+
+    def _init_params(self):
+        self.affine_weight = nn.Parameter(torch.ones(self.num_features))
+        self.affine_bias = nn.Parameter(torch.zeros(self.num_features))
+
+    def forward(self, x, mode: str):
+        if mode == 'norm':
+            self._get_statistics(x)
+            x = self._normalize(x)
+        elif mode == 'denorm':
+            x = self._denormalize(x)
+        return x
+
+    def _get_statistics(self, x):
+        dim2reduce = tuple(range(1, x.ndim - 1))
+        if self.subtract_last:
+            self.last = x[:, -1:, :].unsqueeze(1)
+        else:
+            self.mean = torch.mean(x, dim=dim2reduce, keepdim=True).detach()
+        self.stdev = torch.sqrt(torch.var(x, dim=dim2reduce, keepdim=True, unbiased=False) + self.eps).detach()
+
+    def _normalize(self, x):
+        x = (x - self.mean) / self.stdev
+        if self.affine:
+            x = x * self.affine_weight[None, None, :] + self.affine_bias[None, None, :]
+        return x
+
+    def _denormalize(self, x):
+        if self.affine:
+            x = (x - self.affine_bias[None, None, :]) / self.affine_weight[None, None, :]
+        x = x * self.stdev + self.mean
+        return x
+
+# --- 시계열 분해 ---
+class moving_avg(nn.Module):
+    def __init__(self, kernel_size, stride):
+        super().__init__()
+        self.kernel_size = kernel_size
+        self.avg = nn.AvgPool1d(kernel_size=kernel_size, stride=stride, padding=0)
+
+    def forward(self, x):
+        front = x[:, 0:1, :].repeat(1, (self.kernel_size - 1) // 2, 1)
+        end = x[:, -1:, :].repeat(1, (self.kernel_size - 1) // 2, 1)
+        x = torch.cat([front, x, end], dim=1)
+        x = self.avg(x.permute(0, 2, 1))
+        return x.permute(0, 2, 1)
+
+class series_decomp(nn.Module):
+    def __init__(self, kernel_size):
+        super().__init__()
+        self.moving_avg = moving_avg(kernel_size, stride=1)
+
+    def forward(self, x):
+        moving_mean = self.moving_avg(x)
+        return x - moving_mean, moving_mean
+
+# --- 커스텀 커널 ---
+class ReparamLargeKernelConv(nn.Module):
+    def __init__(self, in_channels, out_channels, kernel_size, stride, groups, small_kernel, small_kernel_merged=False):
+        super().__init__()
+        self.kernel_size = kernel_size
+        self.small_kernel = small_kernel
+        padding = kernel_size // 2
+        if small_kernel_merged:
+            self.lkb_reparam = nn.Conv1d(in_channels, out_channels, kernel_size, stride, padding, groups=groups, bias=True)
+        else:
+            self.lkb_origin = conv_bn(in_channels, out_channels, kernel_size, stride, padding, groups)
+            if small_kernel is not None:
+                self.small_conv = conv_bn(in_channels, out_channels, small_kernel, stride, small_kernel // 2, groups)
+
+    def forward(self, x):
+        if hasattr(self, 'lkb_reparam'):
+            return self.lkb_reparam(x)
+        out = self.lkb_origin(x)
+        if hasattr(self, 'small_conv'):
+            out += self.small_conv(x)
+        return out
+
+# --- 출력층 ---
+class Flatten_Head(nn.Module):
+    def __init__(self, d_model):
+        super().__init__()
+        self.linear = nn.Linear(d_model, 1)
+
+    def forward(self, x):         # x: [B, C, T]
+        x = x.permute(0, 2, 1)    # → [B, T, C]
+        x = self.linear(x)        # → [B, T, 1]
+        return x.squeeze(-1)     # → [B, T]
+
+# --- ModernTCN 모델 ---
+class ModernTCN(nn.Module):
+    def __init__(self, configs):
+        super().__init__()
+        self.revin = RevIN(configs.enc_in, affine=configs.affine) if configs.revin else None
+        self.decomp = series_decomp(configs.kernel_size) if configs.decomposition else None
+
+        self.conv_layers = nn.ModuleList()
+        self.norm_layers = nn.ModuleList()
+
+        c_in = configs.enc_in
+        for i in range(len(configs.dims)):
+            conv = ReparamLargeKernelConv(c_in, configs.dims[i],
+                                          kernel_size=configs.large_size[i],
+                                          stride=1,
+                                          groups=1,
+                                          small_kernel=configs.small_size[i],
+                                          small_kernel_merged=configs.small_kernel_merged)
+            self.conv_layers.append(conv)
+            self.norm_layers.append(nn.BatchNorm1d(configs.dims[i]))
+            c_in = configs.dims[i]
+
+        self.head = Flatten_Head(configs.dims[-1])
+
+    def forward(self, x):  # x: [B, T, C]
+        if self.revin:
+            x = self.revin(x, 'norm')
+        if self.decomp:
+            x, _ = self.decomp(x)
+        x = x.permute(0, 2, 1)  # [B, C, T]
+        for conv, norm in zip(self.conv_layers, self.norm_layers):
+            x = conv(x)
+            x = norm(x)
+            x = F.relu(x)
+        out = self.head(x)  # [B, T]
+        return out
+
+# --- Config 클래스 ---
+class Configs:
+    def __init__(self, enc_in):
+        self.enc_in = enc_in
+        self.dims = [8,16, 32]
+        self.large_size = [5, 5, 3]
+        self.small_size = [5, 3, 3]
+        self.small_kernel_merged = False
+        self.dropout = 0.1
+        self.head_dropout = 0.2
+        self.revin = True
+        self.affine = True
+        self.decomposition = True
+        self.kernel_size = 25
+
+#%% md
+###학습 및 OPTUNA
+#%%
+import matplotlib.pyplot as plt
+from sklearn.metrics import f1_score # Import f1_score
+def train_model(model, X_train, y_train, X_val, y_val, epochs=30, lr=1e-3,pos_weight=None):
+    optimizer = torch.optim.Adam(model.parameters(), lr=lr)
+    #criterion = nn.BCEWithLogitsLoss()
+    criterion = nn.BCEWithLogitsLoss(pos_weight=pos_weight) if pos_weight is not None else nn.BCEWithLogitsLoss()
+    train_losses, val_losses, val_accs = [], [], []
+
+    for epoch in range(epochs):
+        # 1. 학습 단계
+        model.train()
+        optimizer.zero_grad()
+        train_output = model(X_train).squeeze(0)  # → [T]
+        train_output = train_output.detach().clone().requires_grad_(True)  # detach + clone + requires_grad 복구
+        loss = criterion(train_output, y_train.float())
+        loss.backward()
+        optimizer.step()
+
+        train_losses.append(loss.item())
+
+        # 2. 검증 단계
+        model.eval()
+        with torch.no_grad():
+            val_output = model(X_val).squeeze(0)
+            val_loss = criterion(val_output, y_val.float()).item()
+            pred = (torch.sigmoid(val_output) > 0.5).int()
+            acc = (pred == y_val).float().mean().item()
+
+        val_losses.append(val_loss)
+        val_accs.append(acc)
+
+        print(f"[{epoch+1}/{epochs}] Train Loss: {loss.item():.4f}, Val Loss: {val_loss:.4f}, Val Acc: {acc:.4f}")
+
+    return train_losses, val_losses, val_accs
+#%%
+# Config class 내부를 trial 기반으로 생성
+def objective(trial):
+    dims = [
+        trial.suggest_categorical("dim1", [8, 16, 32, 64]),
+        trial.suggest_categorical("dim2", [16, 32, 64, 128]),
+        trial.suggest_categorical("dim3", [32, 64, 128, 256])
+    ]
+    large_size = [
+        trial.suggest_categorical("k1", [3, 5, 7, 9, 11]),
+        trial.suggest_categorical("k2", [3, 5, 7, 9]),
+        trial.suggest_categorical("k3", [3, 5, 7])
+    ]
+    small_size = [
+        trial.suggest_categorical("s1", [1, 3, 5]),
+        trial.suggest_categorical("s2", [1, 3]),
+        trial.suggest_categorical("s3", [1, 3])
+    ]
+    dropout = trial.suggest_float("dropout", 0.0, 0.3)
+    head_dropout = trial.suggest_float("head_dropout", 0.0, 0.3)
+    kernel_size = trial.suggest_categorical("kernel_size", [5, 11, 15, 25, 31])
+    decomposition = trial.suggest_categorical("decomposition", [True, False])
+    revin = trial.suggest_categorical("revin", [True, False])
+    affine = trial.suggest_categorical("affine", [True, False])
+
+    class TrialConfig:
+        def __init__(self):
+            self.enc_in = X_train.shape[2]
+            self.dims = dims
+            self.large_size = large_size
+            self.small_size = small_size
+            self.small_kernel_merged = False
+            self.dropout = dropout
+            self.head_dropout = head_dropout
+            self.revin = revin
+            self.affine = affine
+            self.decomposition = decomposition
+            self.kernel_size = kernel_size
+
+    model = ModernTCN(TrialConfig())
+    #_, _, val_accs = train_model(model, X_train, y_train, X_val, y_val, epochs=15)
+    #return max(val_accs)  # Accuracy 기준 최적화
+
+   #pos_weight 계산 (불균형 데이터 보정)
+    pos_weight = torch.tensor([(y_train == 0).sum() / (y_train == 1).sum()]).to(y_train.device)
+
+    #모델 학습 (loss에 pos_weight 반영됨)
+    train_model(model, X_train, y_train, X_val, y_val, epochs=15, pos_weight=pos_weight)
+
+    model.eval()
+    with torch.no_grad():
+        pred = model(X_val).squeeze(0)
+        probs = torch.sigmoid(pred).cpu().numpy()
+        preds = (probs > 0.5).astype(int)
+
+    y_true = y_val.cpu().numpy()
+    return f1_score(y_true, preds)
+
+
+# Optuna 튜닝 실행
+study = optuna.create_study(direction="maximize")
+study.optimize(objective, n_trials=50)
+
+# 최적 하이퍼파라미터 출력
+print("✅ Best Trial:")
+print(study.best_trial.params)
+best_params = study.best_trial.params
+#%% md
+###시각화 코드
+#%%
+def visualize_training(train_losses, val_losses, val_accs):
+    plt.figure(figsize=(12,4))
+    plt.subplot(1,2,1)
+    plt.plot(train_losses, label='Train Loss')
+    plt.plot(val_losses, label='Val Loss')
+    plt.legend(); plt.title("Loss over Epochs")
+
+    plt.subplot(1,2,2)
+    plt.plot(val_accs, label='Val Accuracy')
+    plt.legend(); plt.title("Validation Accuracy")
+    plt.show()
+
+def visualize_prediction(pred_probs, true_labels):
+    plt.figure(figsize=(10,4))
+    plt.plot(true_labels, label='True')
+    plt.plot(pred_probs, label='Pred (sigmoid)', alpha=0.7)
+    plt.legend(); plt.title("Prediction vs True")
+    plt.show()
+
+def visualize_cumulative_return(pred_probs, true_labels, prices):
+    signal = (pred_probs > 0.5).astype(int)
+    returns = (prices[1:] / prices[:-1]) - 1
+    strategy_returns = returns * signal[:-1]  # 예측한 시점의 다음날 수익
+
+    cumulative = (strategy_returns + 1).cumprod()
+    market = (returns + 1).cumprod()
+
+    plt.plot(cumulative, label='Strategy')
+    plt.plot(market, label='Market (buy & hold)')
+    plt.legend(); plt.title("Cumulative Return")
+    plt.show()
+
+#%%
+import numpy as np
+import random
+def set_seed(seed=42):
+    random.seed(seed)
+    np.random.seed(seed)
+    torch.manual_seed(seed)
+    torch.cuda.manual_seed_all(seed)
+    torch.backends.cudnn.deterministic = True
+    torch.backends.cudnn.benchmark = False
+    torch.use_deterministic_algorithms(True)
+set_seed(42)
+
+# 1. 라벨 생성
+close_prices = data[f'prccd_{company_name}'].values
+returns = (close_prices[1:] / close_prices[:-1]) - 1
+labels = np.where(returns > 0.003, 1, 0)  # 0.3% 초과만 1로
+labels = torch.tensor(labels, dtype=torch.float32)
+
+# 2. GAT 임베딩 → TCN 입력 형태로 변환
+embeddings = embeddings[:-1]  # 라벨과 길이 맞춤
+tcn_input = embeddings.unsqueeze(0)  # [1, T, C]
+
+# ✅ 3. 길이 맞춰주기 (가장 중요)
+min_len = min(tcn_input.shape[1], labels.shape[0])
+tcn_input = tcn_input[:, :min_len, :]
+labels = labels[:min_len]
+
+# 3. 학습/검증 데이터 분할
+seq_len = tcn_input.shape[1]
+split = int(seq_len * 0.8)
+X_train = tcn_input[:, :split, :]
+X_val   = tcn_input[:, split:, :]
+y_train = labels[:split]
+y_val   = labels[split:]
+
+class BestConfig:
+    def __init__(self):
+        self.enc_in = X_train.shape[2]
+        self.dims = [best_params['dim1'], best_params['dim2'], best_params['dim3']]
+        self.large_size = [best_params['k1'], best_params['k2'], best_params['k3']]
+        self.small_size = [best_params['s1'], best_params['s2'], best_params['s3']]
+        self.small_kernel_merged = False
+        self.dropout = best_params['dropout']
+        self.head_dropout = best_params['head_dropout']
+        self.revin = best_params['revin']
+        self.affine = best_params['affine']
+        self.decomposition = best_params['decomposition']
+        self.kernel_size = best_params['kernel_size']
+
+# 4. 모델 생성 및 학습
+model = ModernTCN(BestConfig())
+
+train_losses, val_losses, val_accs = train_model(model,
+X_train, y_train, X_val, y_val, epochs=100,lr=1e-2)
+
+# 5. 예측 및 시각화
+model.eval()
+with torch.no_grad():
+    pred_logits = model(X_val).squeeze(0)  # [1, T] → [T]
+    pred_probs = torch.sigmoid(pred_logits).cpu().numpy()
+    pred_labels = (pred_probs > 0.5).astype(int)
+
+
+from sklearn.metrics import precision_recall_curve, f1_score
+
+"""
+# 1. 실제 라벨
+true_labels = y_val.cpu().numpy()
+
+# 2. 다양한 threshold에 대해 f1-score 측정
+precisions, recalls, thresholds = precision_recall_curve(true_labels, pred_probs)
+
+f1s = 2 * (precisions * recalls) / (precisions + recalls + 1e-8)  # f1-score 계산
+best_idx = np.argmax(f1s)
+best_threshold = thresholds[best_idx]
+
+print(f"✅ Best threshold by F1-score: {best_threshold:.4f}, F1: {f1s[best_idx]:.4f}")
+
+# 3. 최적 threshold로 예측 라벨 생성
+pred_labels = (pred_probs > best_threshold).astype(int)
+# 6. 누적 수익률 (선택)
+# future_prices = close_prices[split+1:]  # 실제 수익률 계산용
+# visualize_cumulative_return(pred_probs, y_val.cpu().numpy(), future_prices)
+"""
+
+visualize_training(train_losses, val_losses, val_accs)
+visualize_prediction(pred_probs, y_val.cpu().numpy())
+
+#%%
+#정확도 기반
+from sklearn.metrics import classification_report, confusion_matrix
+print(classification_report(y_val.cpu(), pred_labels))
+print(confusion_matrix(y_val.cpu(), pred_labels))
+
+#%%
+#f1 score 기반
+from sklearn.metrics import classification_report, confusion_matrix
+print(classification_report(y_val.cpu(), pred_labels))
+print(confusion_matrix(y_val.cpu(), pred_labels))
+
+#%%
+unique, counts = np.unique(labels.numpy(), return_counts=True)
+print(dict(zip(unique, counts)))
